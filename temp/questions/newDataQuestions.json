[
   {
      "acRate": 50.85951806852985,
      "frontEndId": "1",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Two Sum",
      "titleSlug": "two-sum",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 41.37597599693564,
      "frontEndId": "2",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Add Two Numbers",
      "titleSlug": "add-two-numbers",
      "topicTags": ["Linked List", "Math", "Recursion"]
   },
   {
      "acRate": 34.0637419219365,
      "frontEndId": "3",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Substring Without Repeating Characters",
      "titleSlug": "longest-substring-without-repeating-characters",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 38.15613995172628,
      "frontEndId": "4",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Median of Two Sorted Arrays",
      "titleSlug": "median-of-two-sorted-arrays",
      "topicTags": ["Array", "Binary Search", "Divide and Conquer"]
   },
   {
      "acRate": 32.834527070460794,
      "frontEndId": "5",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Palindromic Substring",
      "titleSlug": "longest-palindromic-substring",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 46.08695687538941,
      "frontEndId": "6",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Zigzag Conversion",
      "titleSlug": "zigzag-conversion",
      "topicTags": ["String"]
   },
   {
      "acRate": 27.905881844572853,
      "frontEndId": "7",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Reverse Integer",
      "titleSlug": "reverse-integer",
      "topicTags": ["Math"]
   },
   {
      "acRate": 16.786388124279757,
      "frontEndId": "8",
      "status": "ac",
      "difficulty": "Medium",
      "title": "String to Integer (atoi)",
      "titleSlug": "string-to-integer-atoi",
      "topicTags": ["String"]
   },
   {
      "acRate": 54.59887150667115,
      "frontEndId": "9",
      "status": null,
      "difficulty": "Easy",
      "title": "Palindrome Number",
      "titleSlug": "palindrome-number",
      "topicTags": ["Math"]
   },
   {
      "acRate": 27.862690949947705,
      "frontEndId": "10",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Regular Expression Matching",
      "titleSlug": "regular-expression-matching",
      "topicTags": ["String", "Dynamic Programming", "Recursion"]
   },
   {
      "acRate": 54.221080012810795,
      "frontEndId": "11",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Container With Most Water",
      "titleSlug": "container-with-most-water",
      "topicTags": ["Array", "Two Pointers", "Greedy"]
   },
   {
      "acRate": 63.242635445993265,
      "frontEndId": "12",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Integer to Roman",
      "titleSlug": "integer-to-roman",
      "topicTags": ["Hash Table", "Math", "String"]
   },
   {
      "acRate": 59.580646533034894,
      "frontEndId": "13",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Roman to Integer",
      "titleSlug": "roman-to-integer",
      "topicTags": ["Hash Table", "Math", "String"]
   },
   {
      "acRate": 41.652442452118166,
      "frontEndId": "14",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Longest Common Prefix",
      "titleSlug": "longest-common-prefix",
      "topicTags": ["String", "Trie"]
   },
   {
      "acRate": 33.409226340307846,
      "frontEndId": "15",
      "status": "ac",
      "difficulty": "Medium",
      "title": "3Sum",
      "titleSlug": "3sum",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 45.48807994218975,
      "frontEndId": "16",
      "status": "ac",
      "difficulty": "Medium",
      "title": "3Sum Closest",
      "titleSlug": "3sum-closest",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 58.77424504147521,
      "frontEndId": "17",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Letter Combinations of a Phone Number",
      "titleSlug": "letter-combinations-of-a-phone-number",
      "topicTags": ["Hash Table", "String", "Backtracking"]
   },
   {
      "acRate": 35.77956060370824,
      "frontEndId": "18",
      "status": "ac",
      "difficulty": "Medium",
      "title": "4Sum",
      "titleSlug": "4sum",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 42.7663436540897,
      "frontEndId": "19",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Remove Nth Node From End of List",
      "titleSlug": "remove-nth-node-from-end-of-list",
      "topicTags": ["Linked List", "Two Pointers"]
   },
   {
      "acRate": 40.18722260667368,
      "frontEndId": "20",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Valid Parentheses",
      "titleSlug": "valid-parentheses",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 63.28277167612016,
      "frontEndId": "21",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Merge Two Sorted Lists",
      "titleSlug": "merge-two-sorted-lists",
      "topicTags": ["Linked List", "Recursion"]
   },
   {
      "acRate": 73.52093879213865,
      "frontEndId": "22",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Generate Parentheses",
      "titleSlug": "generate-parentheses",
      "topicTags": ["String", "Dynamic Programming", "Backtracking"]
   },
   {
      "acRate": 51.09933672160385,
      "frontEndId": "23",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Merge k Sorted Lists",
      "titleSlug": "merge-k-sorted-lists",
      "topicTags": [
         "Linked List",
         "Divide and Conquer",
         "Heap (Priority Queue)",
         "Merge Sort"
      ]
   },
   {
      "acRate": 63.213545485452606,
      "frontEndId": "24",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Swap Nodes in Pairs",
      "titleSlug": "swap-nodes-in-pairs",
      "topicTags": ["Linked List", "Recursion"]
   },
   {
      "acRate": 56.77221420983998,
      "frontEndId": "25",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Reverse Nodes in k-Group",
      "titleSlug": "reverse-nodes-in-k-group",
      "topicTags": ["Linked List", "Recursion"]
   },
   {
      "acRate": 53.40660022378743,
      "frontEndId": "26",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Remove Duplicates from Sorted Array",
      "titleSlug": "remove-duplicates-from-sorted-array",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 54.83407853140173,
      "frontEndId": "27",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Remove Element",
      "titleSlug": "remove-element",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 40.68782348325222,
      "frontEndId": "28",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find the Index of the First Occurrence in a String",
      "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
      "topicTags": ["Two Pointers", "String", "String Matching"]
   },
   {
      "acRate": 17.114134448742604,
      "frontEndId": "29",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Divide Two Integers",
      "titleSlug": "divide-two-integers",
      "topicTags": ["Math", "Bit Manipulation"]
   },
   {
      "acRate": 31.548115491424944,
      "frontEndId": "30",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Substring with Concatenation of All Words",
      "titleSlug": "substring-with-concatenation-of-all-words",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 38.6929894443338,
      "frontEndId": "31",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Next Permutation",
      "titleSlug": "next-permutation",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 33.29358969403087,
      "frontEndId": "32",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Longest Valid Parentheses",
      "titleSlug": "longest-valid-parentheses",
      "topicTags": ["String", "Dynamic Programming", "Stack"]
   },
   {
      "acRate": 40.04131480209983,
      "frontEndId": "33",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Search in Rotated Sorted Array",
      "titleSlug": "search-in-rotated-sorted-array",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 43.39930392367947,
      "frontEndId": "34",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find First and Last Position of Element in Sorted Array",
      "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 44.54896283829778,
      "frontEndId": "35",
      "status": null,
      "difficulty": "Easy",
      "title": "Search Insert Position",
      "titleSlug": "search-insert-position",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 58.71640982997142,
      "frontEndId": "36",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Valid Sudoku",
      "titleSlug": "valid-sudoku",
      "topicTags": ["Array", "Hash Table", "Matrix"]
   },
   {
      "acRate": 59.40897692582744,
      "frontEndId": "37",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Sudoku Solver",
      "titleSlug": "sudoku-solver",
      "topicTags": ["Array", "Hash Table", "Backtracking", "Matrix"]
   },
   {
      "acRate": 53.37661857054077,
      "frontEndId": "38",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count and Say",
      "titleSlug": "count-and-say",
      "topicTags": ["String"]
   },
   {
      "acRate": 70.09483593986722,
      "frontEndId": "39",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Combination Sum",
      "titleSlug": "combination-sum",
      "topicTags": ["Array", "Backtracking"]
   },
   {
      "acRate": 53.787221777421934,
      "frontEndId": "40",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Combination Sum II",
      "titleSlug": "combination-sum-ii",
      "topicTags": ["Array", "Backtracking"]
   },
   {
      "acRate": 37.212010640213116,
      "frontEndId": "41",
      "status": "ac",
      "difficulty": "Hard",
      "title": "First Missing Positive",
      "titleSlug": "first-missing-positive",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 60.02866382221153,
      "frontEndId": "42",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Trapping Rain Water",
      "titleSlug": "trapping-rain-water",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Dynamic Programming",
         "Stack",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 39.54553189028439,
      "frontEndId": "43",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Multiply Strings",
      "titleSlug": "multiply-strings",
      "topicTags": ["Math", "String", "Simulation"]
   },
   {
      "acRate": 27.29654869389121,
      "frontEndId": "44",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Wildcard Matching",
      "titleSlug": "wildcard-matching",
      "topicTags": ["String", "Dynamic Programming", "Greedy", "Recursion"]
   },
   {
      "acRate": 40.14849382319722,
      "frontEndId": "45",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Jump Game II",
      "titleSlug": "jump-game-ii",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 77.3358051655811,
      "frontEndId": "46",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Permutations",
      "titleSlug": "permutations",
      "topicTags": ["Array", "Backtracking"]
   },
   {
      "acRate": 58.13353868103732,
      "frontEndId": "47",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Permutations II",
      "titleSlug": "permutations-ii",
      "topicTags": ["Array", "Backtracking"]
   },
   {
      "acRate": 72.78386392180963,
      "frontEndId": "48",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Rotate Image",
      "titleSlug": "rotate-image",
      "topicTags": ["Array", "Math", "Matrix"]
   },
   {
      "acRate": 67.06814165661682,
      "frontEndId": "49",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Group Anagrams",
      "titleSlug": "group-anagrams",
      "topicTags": ["Array", "Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 34.06020329975382,
      "frontEndId": "50",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Pow(x, n)",
      "titleSlug": "powx-n",
      "topicTags": ["Math", "Recursion"]
   },
   {
      "acRate": 66.32873653710885,
      "frontEndId": "51",
      "status": "ac",
      "difficulty": "Hard",
      "title": "N-Queens",
      "titleSlug": "n-queens",
      "topicTags": ["Array", "Backtracking"]
   },
   {
      "acRate": 72.69066299541022,
      "frontEndId": "52",
      "status": "ac",
      "difficulty": "Hard",
      "title": "N-Queens II",
      "titleSlug": "n-queens-ii",
      "topicTags": ["Backtracking"]
   },
   {
      "acRate": 50.373975649500416,
      "frontEndId": "53",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Subarray",
      "titleSlug": "maximum-subarray",
      "topicTags": ["Array", "Divide and Conquer", "Dynamic Programming"]
   },
   {
      "acRate": 47.77724960634723,
      "frontEndId": "54",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Spiral Matrix",
      "titleSlug": "spiral-matrix",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 38.59818792258111,
      "frontEndId": "55",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Jump Game",
      "titleSlug": "jump-game",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 46.6038115431809,
      "frontEndId": "56",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Merge Intervals",
      "titleSlug": "merge-intervals",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 39.452584659923794,
      "frontEndId": "57",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Insert Interval",
      "titleSlug": "insert-interval",
      "topicTags": ["Array"]
   },
   {
      "acRate": 46.531400188890814,
      "frontEndId": "58",
      "status": null,
      "difficulty": "Easy",
      "title": "Length of Last Word",
      "titleSlug": "length-of-last-word",
      "topicTags": ["String"]
   },
   {
      "acRate": 70.21641955593567,
      "frontEndId": "59",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Spiral Matrix II",
      "titleSlug": "spiral-matrix-ii",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 45.65089850285739,
      "frontEndId": "60",
      "status": null,
      "difficulty": "Hard",
      "title": "Permutation Sequence",
      "titleSlug": "permutation-sequence",
      "topicTags": ["Math", "Recursion"]
   },
   {
      "acRate": 36.85755058300814,
      "frontEndId": "61",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Rotate List",
      "titleSlug": "rotate-list",
      "topicTags": ["Linked List", "Two Pointers"]
   },
   {
      "acRate": 63.70263127947703,
      "frontEndId": "62",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Unique Paths",
      "titleSlug": "unique-paths",
      "topicTags": ["Math", "Dynamic Programming", "Combinatorics"]
   },
   {
      "acRate": 41.004148332118525,
      "frontEndId": "63",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Unique Paths II",
      "titleSlug": "unique-paths-ii",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 62.95622642563264,
      "frontEndId": "64",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Path Sum",
      "titleSlug": "minimum-path-sum",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 18.978025213743322,
      "frontEndId": "65",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Valid Number",
      "titleSlug": "valid-number",
      "topicTags": ["String"]
   },
   {
      "acRate": 44.29391001241851,
      "frontEndId": "66",
      "status": null,
      "difficulty": "Easy",
      "title": "Plus One",
      "titleSlug": "plus-one",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 52.76343039441809,
      "frontEndId": "67",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Add Binary",
      "titleSlug": "add-binary",
      "topicTags": ["Math", "String", "Bit Manipulation", "Simulation"]
   },
   {
      "acRate": 41.46729932924637,
      "frontEndId": "68",
      "status": null,
      "difficulty": "Hard",
      "title": "Text Justification",
      "titleSlug": "text-justification",
      "topicTags": ["Array", "String", "Simulation"]
   },
   {
      "acRate": 37.994089768253104,
      "frontEndId": "69",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Sqrt(x)",
      "titleSlug": "sqrtx",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 52.22705047382937,
      "frontEndId": "70",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Climbing Stairs",
      "titleSlug": "climbing-stairs",
      "topicTags": ["Math", "Dynamic Programming", "Memoization"]
   },
   {
      "acRate": 41.063045952182755,
      "frontEndId": "71",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Simplify Path",
      "titleSlug": "simplify-path",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 55.51311008469789,
      "frontEndId": "72",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Edit Distance",
      "titleSlug": "edit-distance",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 53.64203908918667,
      "frontEndId": "73",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Set Matrix Zeroes",
      "titleSlug": "set-matrix-zeroes",
      "topicTags": ["Array", "Hash Table", "Matrix"]
   },
   {
      "acRate": 49.29050934787062,
      "frontEndId": "74",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Search a 2D Matrix",
      "titleSlug": "search-a-2d-matrix",
      "topicTags": ["Array", "Binary Search", "Matrix"]
   },
   {
      "acRate": 60.56164614108178,
      "frontEndId": "75",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sort Colors",
      "titleSlug": "sort-colors",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 41.309670547257426,
      "frontEndId": "76",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Window Substring",
      "titleSlug": "minimum-window-substring",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 69.41241606744616,
      "frontEndId": "77",
      "status": null,
      "difficulty": "Medium",
      "title": "Combinations",
      "titleSlug": "combinations",
      "topicTags": ["Backtracking"]
   },
   {
      "acRate": 76.26918944322426,
      "frontEndId": "78",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Subsets",
      "titleSlug": "subsets",
      "topicTags": ["Array", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 40.80527775245612,
      "frontEndId": "79",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Word Search",
      "titleSlug": "word-search",
      "topicTags": ["Array", "Backtracking", "Matrix"]
   },
   {
      "acRate": 55.36701429864577,
      "frontEndId": "80",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Remove Duplicates from Sorted Array II",
      "titleSlug": "remove-duplicates-from-sorted-array-ii",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 37.28085099914287,
      "frontEndId": "81",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Search in Rotated Sorted Array II",
      "titleSlug": "search-in-rotated-sorted-array-ii",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 46.604836250794314,
      "frontEndId": "82",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Remove Duplicates from Sorted List II",
      "titleSlug": "remove-duplicates-from-sorted-list-ii",
      "topicTags": ["Linked List", "Two Pointers"]
   },
   {
      "acRate": 51.54724947079329,
      "frontEndId": "83",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Remove Duplicates from Sorted List",
      "titleSlug": "remove-duplicates-from-sorted-list",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 43.42163200998076,
      "frontEndId": "84",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Largest Rectangle in Histogram",
      "titleSlug": "largest-rectangle-in-histogram",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 45.96018029594483,
      "frontEndId": "85",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Maximal Rectangle",
      "titleSlug": "maximal-rectangle",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Stack",
         "Matrix",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 55.17874391349359,
      "frontEndId": "86",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Partition List",
      "titleSlug": "partition-list",
      "topicTags": ["Linked List", "Two Pointers"]
   },
   {
      "acRate": 39.3410243997975,
      "frontEndId": "87",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Scramble String",
      "titleSlug": "scramble-string",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 48.12392054214993,
      "frontEndId": "88",
      "status": null,
      "difficulty": "Easy",
      "title": "Merge Sorted Array",
      "titleSlug": "merge-sorted-array",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 58.05817419350756,
      "frontEndId": "89",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Gray Code",
      "titleSlug": "gray-code",
      "topicTags": ["Math", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 56.581744970826286,
      "frontEndId": "90",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Subsets II",
      "titleSlug": "subsets-ii",
      "topicTags": ["Array", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 33.4067203811815,
      "frontEndId": "91",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Decode Ways",
      "titleSlug": "decode-ways",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 47.18538444156222,
      "frontEndId": "92",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Reverse Linked List II",
      "titleSlug": "reverse-linked-list-ii",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 48.581386858799945,
      "frontEndId": "93",
      "status": null,
      "difficulty": "Medium",
      "title": "Restore IP Addresses",
      "titleSlug": "restore-ip-addresses",
      "topicTags": ["String", "Backtracking"]
   },
   {
      "acRate": 74.83071910184417,
      "frontEndId": "94",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Binary Tree Inorder Traversal",
      "titleSlug": "binary-tree-inorder-traversal",
      "topicTags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 56.50794755523671,
      "frontEndId": "95",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Unique Binary Search Trees II",
      "titleSlug": "unique-binary-search-trees-ii",
      "topicTags": [
         "Dynamic Programming",
         "Backtracking",
         "Tree",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 60.44071312319067,
      "frontEndId": "96",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Unique Binary Search Trees",
      "titleSlug": "unique-binary-search-trees",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Tree",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 39.34305512775845,
      "frontEndId": "97",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Interleaving String",
      "titleSlug": "interleaving-string",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 32.3777656506869,
      "frontEndId": "98",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Validate Binary Search Tree",
      "titleSlug": "validate-binary-search-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 52.077076610270666,
      "frontEndId": "99",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Recover Binary Search Tree",
      "titleSlug": "recover-binary-search-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 59.7753965728207,
      "frontEndId": "100",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Same Tree",
      "titleSlug": "same-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 55.37948593146829,
      "frontEndId": "101",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Symmetric Tree",
      "titleSlug": "symmetric-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 65.83694310447898,
      "frontEndId": "102",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Binary Tree Level Order Traversal",
      "titleSlug": "binary-tree-level-order-traversal",
      "topicTags": ["Tree", "Breadth-First Search", "Binary Tree"]
   },
   {
      "acRate": 57.97580380987281,
      "frontEndId": "103",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Binary Tree Zigzag Level Order Traversal",
      "titleSlug": "binary-tree-zigzag-level-order-traversal",
      "topicTags": ["Tree", "Breadth-First Search", "Binary Tree"]
   },
   {
      "acRate": 74.60065907331138,
      "frontEndId": "104",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Maximum Depth of Binary Tree",
      "titleSlug": "maximum-depth-of-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 62.67560354876991,
      "frontEndId": "105",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Construct Binary Tree from Preorder and Inorder Traversal",
      "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
      "topicTags": [
         "Array",
         "Hash Table",
         "Divide and Conquer",
         "Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 61.41309063098825,
      "frontEndId": "106",
      "status": null,
      "difficulty": "Medium",
      "title": "Construct Binary Tree from Inorder and Postorder Traversal",
      "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
      "topicTags": [
         "Array",
         "Hash Table",
         "Divide and Conquer",
         "Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 62.26730418194675,
      "frontEndId": "107",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Binary Tree Level Order Traversal II",
      "titleSlug": "binary-tree-level-order-traversal-ii",
      "topicTags": ["Tree", "Breadth-First Search", "Binary Tree"]
   },
   {
      "acRate": 70.77501991723356,
      "frontEndId": "108",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Convert Sorted Array to Binary Search Tree",
      "titleSlug": "convert-sorted-array-to-binary-search-tree",
      "topicTags": [
         "Array",
         "Divide and Conquer",
         "Tree",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 61.002326697935516,
      "frontEndId": "109",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Convert Sorted List to Binary Search Tree",
      "titleSlug": "convert-sorted-list-to-binary-search-tree",
      "topicTags": [
         "Linked List",
         "Divide and Conquer",
         "Tree",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 50.57294791186548,
      "frontEndId": "110",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Balanced Binary Tree",
      "titleSlug": "balanced-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 46.674151652330785,
      "frontEndId": "111",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Depth of Binary Tree",
      "titleSlug": "minimum-depth-of-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 49.18688627397936,
      "frontEndId": "112",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Path Sum",
      "titleSlug": "path-sum",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 57.727626049036274,
      "frontEndId": "113",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Path Sum II",
      "titleSlug": "path-sum-ii",
      "topicTags": ["Backtracking", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 63.40835443911115,
      "frontEndId": "114",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Flatten Binary Tree to Linked List",
      "titleSlug": "flatten-binary-tree-to-linked-list",
      "topicTags": [
         "Linked List",
         "Stack",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 45.486731296319135,
      "frontEndId": "115",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Distinct Subsequences",
      "titleSlug": "distinct-subsequences",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 61.577942856781135,
      "frontEndId": "116",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Populating Next Right Pointers in Each Node",
      "titleSlug": "populating-next-right-pointers-in-each-node",
      "topicTags": [
         "Linked List",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 51.30188647475499,
      "frontEndId": "117",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Populating Next Right Pointers in Each Node II",
      "titleSlug": "populating-next-right-pointers-in-each-node-ii",
      "topicTags": [
         "Linked List",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 73.09429386976211,
      "frontEndId": "118",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Pascal's Triangle",
      "titleSlug": "pascals-triangle",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 63.16194388933464,
      "frontEndId": "119",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Pascal's Triangle II",
      "titleSlug": "pascals-triangle-ii",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 55.68214329762233,
      "frontEndId": "120",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Triangle",
      "titleSlug": "triangle",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 53.4868986640508,
      "frontEndId": "121",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Best Time to Buy and Sell Stock",
      "titleSlug": "best-time-to-buy-and-sell-stock",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 65.14096312983027,
      "frontEndId": "122",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Best Time to Buy and Sell Stock II",
      "titleSlug": "best-time-to-buy-and-sell-stock-ii",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 46.9252326148905,
      "frontEndId": "123",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Best Time to Buy and Sell Stock III",
      "titleSlug": "best-time-to-buy-and-sell-stock-iii",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 39.56245480948284,
      "frontEndId": "124",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Binary Tree Maximum Path Sum",
      "titleSlug": "binary-tree-maximum-path-sum",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 45.84818796681846,
      "frontEndId": "125",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Valid Palindrome",
      "titleSlug": "valid-palindrome",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 27.33836918210011,
      "frontEndId": "126",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Word Ladder II",
      "titleSlug": "word-ladder-ii",
      "topicTags": [
         "Hash Table",
         "String",
         "Backtracking",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 38.10224197245908,
      "frontEndId": "127",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Word Ladder",
      "titleSlug": "word-ladder",
      "topicTags": ["Hash Table", "String", "Breadth-First Search"]
   },
   {
      "acRate": 47.438635923720476,
      "frontEndId": "128",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Consecutive Sequence",
      "titleSlug": "longest-consecutive-sequence",
      "topicTags": ["Array", "Hash Table", "Union Find"]
   },
   {
      "acRate": 62.12168211051517,
      "frontEndId": "129",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sum Root to Leaf Numbers",
      "titleSlug": "sum-root-to-leaf-numbers",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 38.138759610663215,
      "frontEndId": "130",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Surrounded Regions",
      "titleSlug": "surrounded-regions",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 66.32300103015938,
      "frontEndId": "131",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Palindrome Partitioning",
      "titleSlug": "palindrome-partitioning",
      "topicTags": ["String", "Dynamic Programming", "Backtracking"]
   },
   {
      "acRate": 33.60577945348277,
      "frontEndId": "132",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Palindrome Partitioning II",
      "titleSlug": "palindrome-partitioning-ii",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 55.04431987699389,
      "frontEndId": "133",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Clone Graph",
      "titleSlug": "clone-graph",
      "topicTags": [
         "Hash Table",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph"
      ]
   },
   {
      "acRate": 45.800054800369594,
      "frontEndId": "134",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Gas Station",
      "titleSlug": "gas-station",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 43.26721824073802,
      "frontEndId": "135",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Candy",
      "titleSlug": "candy",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 71.69139435993566,
      "frontEndId": "136",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Single Number",
      "titleSlug": "single-number",
      "topicTags": ["Array", "Bit Manipulation"]
   },
   {
      "acRate": 61.635090585178474,
      "frontEndId": "137",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Single Number II",
      "titleSlug": "single-number-ii",
      "topicTags": ["Array", "Bit Manipulation"]
   },
   {
      "acRate": 54.28906844536385,
      "frontEndId": "138",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Copy List with Random Pointer",
      "titleSlug": "copy-list-with-random-pointer",
      "topicTags": ["Hash Table", "Linked List"]
   },
   {
      "acRate": 46.266008904186826,
      "frontEndId": "139",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Word Break",
      "titleSlug": "word-break",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Dynamic Programming",
         "Trie",
         "Memoization"
      ]
   },
   {
      "acRate": 46.48223564106165,
      "frontEndId": "140",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Word Break II",
      "titleSlug": "word-break-ii",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Dynamic Programming",
         "Backtracking",
         "Trie",
         "Memoization"
      ]
   },
   {
      "acRate": 48.903952677772054,
      "frontEndId": "141",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Linked List Cycle",
      "titleSlug": "linked-list-cycle",
      "topicTags": ["Hash Table", "Linked List", "Two Pointers"]
   },
   {
      "acRate": 50.10239634147392,
      "frontEndId": "142",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Linked List Cycle II",
      "titleSlug": "linked-list-cycle-ii",
      "topicTags": ["Hash Table", "Linked List", "Two Pointers"]
   },
   {
      "acRate": 54.68051588406786,
      "frontEndId": "143",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Reorder List",
      "titleSlug": "reorder-list",
      "topicTags": ["Linked List", "Two Pointers", "Stack", "Recursion"]
   },
   {
      "acRate": 68.28079405573973,
      "frontEndId": "144",
      "status": null,
      "difficulty": "Easy",
      "title": "Binary Tree Preorder Traversal",
      "titleSlug": "binary-tree-preorder-traversal",
      "topicTags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 69.58755455971438,
      "frontEndId": "145",
      "status": null,
      "difficulty": "Easy",
      "title": "Binary Tree Postorder Traversal",
      "titleSlug": "binary-tree-postorder-traversal",
      "topicTags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 41.71642545138873,
      "frontEndId": "146",
      "status": "ac",
      "difficulty": "Medium",
      "title": "LRU Cache",
      "titleSlug": "lru-cache",
      "topicTags": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"]
   },
   {
      "acRate": 52.21817281263089,
      "frontEndId": "147",
      "status": null,
      "difficulty": "Medium",
      "title": "Insertion Sort List",
      "titleSlug": "insertion-sort-list",
      "topicTags": ["Linked List", "Sorting"]
   },
   {
      "acRate": 56.51546880073964,
      "frontEndId": "148",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sort List",
      "titleSlug": "sort-list",
      "topicTags": [
         "Linked List",
         "Two Pointers",
         "Divide and Conquer",
         "Sorting",
         "Merge Sort"
      ]
   },
   {
      "acRate": 25.875394537428704,
      "frontEndId": "149",
      "status": null,
      "difficulty": "Hard",
      "title": "Max Points on a Line",
      "titleSlug": "max-points-on-a-line",
      "topicTags": ["Array", "Hash Table", "Math", "Geometry"]
   },
   {
      "acRate": 47.80548038616419,
      "frontEndId": "150",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Evaluate Reverse Polish Notation",
      "titleSlug": "evaluate-reverse-polish-notation",
      "topicTags": ["Array", "Math", "Stack"]
   },
   {
      "acRate": 37.44966473311606,
      "frontEndId": "151",
      "status": null,
      "difficulty": "Medium",
      "title": "Reverse Words in a String",
      "titleSlug": "reverse-words-in-a-string",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 34.82446765880892,
      "frontEndId": "152",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Product Subarray",
      "titleSlug": "maximum-product-subarray",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 49.5626437736924,
      "frontEndId": "153",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Minimum in Rotated Sorted Array",
      "titleSlug": "find-minimum-in-rotated-sorted-array",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 43.484415978681604,
      "frontEndId": "154",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Find Minimum in Rotated Sorted Array II",
      "titleSlug": "find-minimum-in-rotated-sorted-array-ii",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 53.13918127177859,
      "frontEndId": "155",
      "status": null,
      "difficulty": "Medium",
      "title": "Min Stack",
      "titleSlug": "min-stack",
      "topicTags": ["Stack", "Design"]
   },
   {
      "acRate": 62.2792166771952,
      "frontEndId": "156",
      "status": null,
      "difficulty": "Medium",
      "title": "Binary Tree Upside Down",
      "titleSlug": "binary-tree-upside-down",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 41.18849388712596,
      "frontEndId": "157",
      "status": null,
      "difficulty": "Easy",
      "title": "Read N Characters Given Read4",
      "titleSlug": "read-n-characters-given-read4",
      "topicTags": ["String", "Simulation", "Interactive"]
   },
   {
      "acRate": 41.88638663670539,
      "frontEndId": "158",
      "status": null,
      "difficulty": "Hard",
      "title": "Read N Characters Given read4 II - Call Multiple Times",
      "titleSlug": "read-n-characters-given-read4-ii-call-multiple-times",
      "topicTags": ["String", "Simulation", "Interactive"]
   },
   {
      "acRate": 54.22748636443071,
      "frontEndId": "159",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Substring with At Most Two Distinct Characters",
      "titleSlug": "longest-substring-with-at-most-two-distinct-characters",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 56.00504965170536,
      "frontEndId": "160",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Intersection of Two Linked Lists",
      "titleSlug": "intersection-of-two-linked-lists",
      "topicTags": ["Hash Table", "Linked List", "Two Pointers"]
   },
   {
      "acRate": 34.222456712887336,
      "frontEndId": "161",
      "status": null,
      "difficulty": "Medium",
      "title": "One Edit Distance",
      "titleSlug": "one-edit-distance",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 45.7926195415849,
      "frontEndId": "162",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Peak Element",
      "titleSlug": "find-peak-element",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 32.748117360163185,
      "frontEndId": "163",
      "status": null,
      "difficulty": "Easy",
      "title": "Missing Ranges",
      "titleSlug": "missing-ranges",
      "topicTags": ["Array"]
   },
   {
      "acRate": 44.40984784806734,
      "frontEndId": "164",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Gap",
      "titleSlug": "maximum-gap",
      "topicTags": ["Array", "Sorting", "Bucket Sort", "Radix Sort"]
   },
   {
      "acRate": 36.3028444643881,
      "frontEndId": "165",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Compare Version Numbers",
      "titleSlug": "compare-version-numbers",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 24.578121054926893,
      "frontEndId": "166",
      "status": null,
      "difficulty": "Medium",
      "title": "Fraction to Recurring Decimal",
      "titleSlug": "fraction-to-recurring-decimal",
      "topicTags": ["Hash Table", "Math", "String"]
   },
   {
      "acRate": 60.3933936575235,
      "frontEndId": "167",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Two Sum II - Input Array Is Sorted",
      "titleSlug": "two-sum-ii-input-array-is-sorted",
      "topicTags": ["Array", "Two Pointers", "Binary Search"]
   },
   {
      "acRate": 39.551887260249515,
      "frontEndId": "168",
      "status": null,
      "difficulty": "Easy",
      "title": "Excel Sheet Column Title",
      "titleSlug": "excel-sheet-column-title",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 63.85077787030231,
      "frontEndId": "169",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Majority Element",
      "titleSlug": "majority-element",
      "topicTags": [
         "Array",
         "Hash Table",
         "Divide and Conquer",
         "Sorting",
         "Counting"
      ]
   },
   {
      "acRate": 37.74898611061264,
      "frontEndId": "170",
      "status": null,
      "difficulty": "Easy",
      "title": "Two Sum III - Data structure design",
      "titleSlug": "two-sum-iii-data-structure-design",
      "topicTags": [
         "Array",
         "Hash Table",
         "Two Pointers",
         "Design",
         "Data Stream"
      ]
   },
   {
      "acRate": 62.928545125886906,
      "frontEndId": "171",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Excel Sheet Column Number",
      "titleSlug": "excel-sheet-column-number",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 42.79677851948664,
      "frontEndId": "172",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Factorial Trailing Zeroes",
      "titleSlug": "factorial-trailing-zeroes",
      "topicTags": ["Math"]
   },
   {
      "acRate": 70.83765498566927,
      "frontEndId": "173",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Binary Search Tree Iterator",
      "titleSlug": "binary-search-tree-iterator",
      "topicTags": [
         "Stack",
         "Tree",
         "Design",
         "Binary Search Tree",
         "Binary Tree",
         "Iterator"
      ]
   },
   {
      "acRate": 37.721991656593126,
      "frontEndId": "174",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Dungeon Game",
      "titleSlug": "dungeon-game",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 74.96872007496941,
      "frontEndId": "175",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Combine Two Tables",
      "titleSlug": "combine-two-tables",
      "topicTags": ["Database"]
   },
   {
      "acRate": 39.04428169203628,
      "frontEndId": "176",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Second Highest Salary",
      "titleSlug": "second-highest-salary",
      "topicTags": ["Database"]
   },
   {
      "acRate": 38.086215631690486,
      "frontEndId": "177",
      "status": null,
      "difficulty": "Medium",
      "title": "Nth Highest Salary",
      "titleSlug": "nth-highest-salary",
      "topicTags": ["Database"]
   },
   {
      "acRate": 61.26583370476341,
      "frontEndId": "178",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Rank Scores",
      "titleSlug": "rank-scores",
      "topicTags": ["Database"]
   },
   {
      "acRate": 35.308678925797835,
      "frontEndId": "179",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Largest Number",
      "titleSlug": "largest-number",
      "topicTags": ["Array", "String", "Greedy", "Sorting"]
   },
   {
      "acRate": 46.70644685428005,
      "frontEndId": "180",
      "status": null,
      "difficulty": "Medium",
      "title": "Consecutive Numbers",
      "titleSlug": "consecutive-numbers",
      "topicTags": ["Database"]
   },
   {
      "acRate": 68.8770799387745,
      "frontEndId": "181",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Employees Earning More Than Their Managers",
      "titleSlug": "employees-earning-more-than-their-managers",
      "topicTags": ["Database"]
   },
   {
      "acRate": 70.7478359481143,
      "frontEndId": "182",
      "status": null,
      "difficulty": "Easy",
      "title": "Duplicate Emails",
      "titleSlug": "duplicate-emails",
      "topicTags": ["Database"]
   },
   {
      "acRate": 68.59924829580369,
      "frontEndId": "183",
      "status": null,
      "difficulty": "Easy",
      "title": "Customers Who Never Order",
      "titleSlug": "customers-who-never-order",
      "topicTags": ["Database"]
   },
   {
      "acRate": 50.669248391783775,
      "frontEndId": "184",
      "status": null,
      "difficulty": "Medium",
      "title": "Department Highest Salary",
      "titleSlug": "department-highest-salary",
      "topicTags": ["Database"]
   },
   {
      "acRate": 51.170660582739536,
      "frontEndId": "185",
      "status": null,
      "difficulty": "Hard",
      "title": "Department Top Three Salaries",
      "titleSlug": "department-top-three-salaries",
      "topicTags": ["Database"]
   },
   {
      "acRate": 53.59198981184898,
      "frontEndId": "186",
      "status": null,
      "difficulty": "Medium",
      "title": "Reverse Words in a String II",
      "titleSlug": "reverse-words-in-a-string-ii",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 47.85166767956298,
      "frontEndId": "187",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Repeated DNA Sequences",
      "titleSlug": "repeated-dna-sequences",
      "topicTags": [
         "Hash Table",
         "String",
         "Bit Manipulation",
         "Sliding Window",
         "Rolling Hash",
         "Hash Function"
      ]
   },
   {
      "acRate": 41.1111054500619,
      "frontEndId": "188",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Best Time to Buy and Sell Stock IV",
      "titleSlug": "best-time-to-buy-and-sell-stock-iv",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 39.88182511223168,
      "frontEndId": "189",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Rotate Array",
      "titleSlug": "rotate-array",
      "topicTags": ["Array", "Math", "Two Pointers"]
   },
   {
      "acRate": 56.251848284710995,
      "frontEndId": "190",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Reverse Bits",
      "titleSlug": "reverse-bits",
      "topicTags": ["Divide and Conquer", "Bit Manipulation"]
   },
   {
      "acRate": 68.4245248769356,
      "frontEndId": "191",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Number of 1 Bits",
      "titleSlug": "number-of-1-bits",
      "topicTags": ["Divide and Conquer", "Bit Manipulation"]
   },
   {
      "acRate": 25.45532627127976,
      "frontEndId": "192",
      "status": null,
      "difficulty": "Medium",
      "title": "Word Frequency",
      "titleSlug": "word-frequency",
      "topicTags": ["Shell"]
   },
   {
      "acRate": 25.742474404629423,
      "frontEndId": "193",
      "status": null,
      "difficulty": "Easy",
      "title": "Valid Phone Numbers",
      "titleSlug": "valid-phone-numbers",
      "topicTags": ["Shell"]
   },
   {
      "acRate": 25.557935389361774,
      "frontEndId": "194",
      "status": null,
      "difficulty": "Medium",
      "title": "Transpose File",
      "titleSlug": "transpose-file",
      "topicTags": ["Shell"]
   },
   {
      "acRate": 32.898675977460506,
      "frontEndId": "195",
      "status": null,
      "difficulty": "Easy",
      "title": "Tenth Line",
      "titleSlug": "tenth-line",
      "topicTags": ["Shell"]
   },
   {
      "acRate": 61.02140072487211,
      "frontEndId": "196",
      "status": null,
      "difficulty": "Easy",
      "title": "Delete Duplicate Emails",
      "titleSlug": "delete-duplicate-emails",
      "topicTags": ["Database"]
   },
   {
      "acRate": 45.84260135362215,
      "frontEndId": "197",
      "status": null,
      "difficulty": "Easy",
      "title": "Rising Temperature",
      "titleSlug": "rising-temperature",
      "topicTags": ["Database"]
   },
   {
      "acRate": 49.9932037664589,
      "frontEndId": "198",
      "status": "ac",
      "difficulty": "Medium",
      "title": "House Robber",
      "titleSlug": "house-robber",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 62.32331656059108,
      "frontEndId": "199",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Binary Tree Right Side View",
      "titleSlug": "binary-tree-right-side-view",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 57.90950978065784,
      "frontEndId": "200",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Islands",
      "titleSlug": "number-of-islands",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 42.72632346603905,
      "frontEndId": "201",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Bitwise AND of Numbers Range",
      "titleSlug": "bitwise-and-of-numbers-range",
      "topicTags": ["Bit Manipulation"]
   },
   {
      "acRate": 55.3896779522135,
      "frontEndId": "202",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Happy Number",
      "titleSlug": "happy-number",
      "topicTags": ["Hash Table", "Math", "Two Pointers"]
   },
   {
      "acRate": 47.40899601779445,
      "frontEndId": "203",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Remove Linked List Elements",
      "titleSlug": "remove-linked-list-elements",
      "topicTags": ["Linked List", "Recursion"]
   },
   {
      "acRate": 33.352584244258495,
      "frontEndId": "204",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Primes",
      "titleSlug": "count-primes",
      "topicTags": ["Array", "Math", "Enumeration", "Number Theory"]
   },
   {
      "acRate": 43.49392144491633,
      "frontEndId": "205",
      "status": null,
      "difficulty": "Easy",
      "title": "Isomorphic Strings",
      "titleSlug": "isomorphic-strings",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 74.88906637503445,
      "frontEndId": "206",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Reverse Linked List",
      "titleSlug": "reverse-linked-list",
      "topicTags": ["Linked List", "Recursion"]
   },
   {
      "acRate": 46.242586182327926,
      "frontEndId": "207",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Course Schedule",
      "titleSlug": "course-schedule",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 63.93399289550054,
      "frontEndId": "208",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Implement Trie (Prefix Tree)",
      "titleSlug": "implement-trie-prefix-tree",
      "topicTags": ["Hash Table", "String", "Design", "Trie"]
   },
   {
      "acRate": 46.48033463682405,
      "frontEndId": "209",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Size Subarray Sum",
      "titleSlug": "minimum-size-subarray-sum",
      "topicTags": ["Array", "Binary Search", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 49.42225757222191,
      "frontEndId": "210",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Course Schedule II",
      "titleSlug": "course-schedule-ii",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 44.47389374342177,
      "frontEndId": "211",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Design Add and Search Words Data Structure",
      "titleSlug": "design-add-and-search-words-data-structure",
      "topicTags": ["String", "Depth-First Search", "Design", "Trie"]
   },
   {
      "acRate": 36.135335755087475,
      "frontEndId": "212",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Word Search II",
      "titleSlug": "word-search-ii",
      "topicTags": ["Array", "String", "Backtracking", "Trie", "Matrix"]
   },
   {
      "acRate": 41.54524805495074,
      "frontEndId": "213",
      "status": "ac",
      "difficulty": "Medium",
      "title": "House Robber II",
      "titleSlug": "house-robber-ii",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 32.74032817212632,
      "frontEndId": "214",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Shortest Palindrome",
      "titleSlug": "shortest-palindrome",
      "topicTags": [
         "String",
         "Rolling Hash",
         "String Matching",
         "Hash Function"
      ]
   },
   {
      "acRate": 67.04557678608242,
      "frontEndId": "215",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Kth Largest Element in an Array",
      "titleSlug": "kth-largest-element-in-an-array",
      "topicTags": [
         "Array",
         "Divide and Conquer",
         "Sorting",
         "Heap (Priority Queue)",
         "Quickselect"
      ]
   },
   {
      "acRate": 68.689779613944,
      "frontEndId": "216",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Combination Sum III",
      "titleSlug": "combination-sum-iii",
      "topicTags": ["Array", "Backtracking"]
   },
   {
      "acRate": 61.048781828672105,
      "frontEndId": "217",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Contains Duplicate",
      "titleSlug": "contains-duplicate",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 42.25481449578539,
      "frontEndId": "218",
      "status": "ac",
      "difficulty": "Hard",
      "title": "The Skyline Problem",
      "titleSlug": "the-skyline-problem",
      "topicTags": [
         "Array",
         "Divide and Conquer",
         "Binary Indexed Tree",
         "Segment Tree",
         "Line Sweep",
         "Heap (Priority Queue)",
         "Ordered Set"
      ]
   },
   {
      "acRate": 43.63459587419682,
      "frontEndId": "219",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Contains Duplicate II",
      "titleSlug": "contains-duplicate-ii",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 22.46007842459383,
      "frontEndId": "220",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Contains Duplicate III",
      "titleSlug": "contains-duplicate-iii",
      "topicTags": [
         "Array",
         "Sliding Window",
         "Sorting",
         "Bucket Sort",
         "Ordered Set"
      ]
   },
   {
      "acRate": 45.79252646248943,
      "frontEndId": "221",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximal Square",
      "titleSlug": "maximal-square",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 62.808477217783995,
      "frontEndId": "222",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Count Complete Tree Nodes",
      "titleSlug": "count-complete-tree-nodes",
      "topicTags": [
         "Binary Search",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 45.491084126463186,
      "frontEndId": "223",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Rectangle Area",
      "titleSlug": "rectangle-area",
      "topicTags": ["Math", "Geometry"]
   },
   {
      "acRate": 42.734412509360254,
      "frontEndId": "224",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Basic Calculator",
      "titleSlug": "basic-calculator",
      "topicTags": ["Math", "String", "Stack", "Recursion"]
   },
   {
      "acRate": 62.35108258722689,
      "frontEndId": "225",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Implement Stack using Queues",
      "titleSlug": "implement-stack-using-queues",
      "topicTags": ["Stack", "Design", "Queue"]
   },
   {
      "acRate": 75.86956876816572,
      "frontEndId": "226",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Invert Binary Tree",
      "titleSlug": "invert-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 42.791335553388805,
      "frontEndId": "227",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Basic Calculator II",
      "titleSlug": "basic-calculator-ii",
      "topicTags": ["Math", "String", "Stack"]
   },
   {
      "acRate": 49.63573365311656,
      "frontEndId": "228",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Summary Ranges",
      "titleSlug": "summary-ranges",
      "topicTags": ["Array"]
   },
   {
      "acRate": 50.26543286408259,
      "frontEndId": "229",
      "status": null,
      "difficulty": "Medium",
      "title": "Majority Element II",
      "titleSlug": "majority-element-ii",
      "topicTags": ["Array", "Hash Table", "Sorting", "Counting"]
   },
   {
      "acRate": 71.37016313030593,
      "frontEndId": "230",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Kth Smallest Element in a BST",
      "titleSlug": "kth-smallest-element-in-a-bst",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 46.352982710321086,
      "frontEndId": "231",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Power of Two",
      "titleSlug": "power-of-two",
      "topicTags": ["Math", "Bit Manipulation", "Recursion"]
   },
   {
      "acRate": 64.05425277016099,
      "frontEndId": "232",
      "status": null,
      "difficulty": "Easy",
      "title": "Implement Queue using Stacks",
      "titleSlug": "implement-queue-using-stacks",
      "topicTags": ["Stack", "Design", "Queue"]
   },
   {
      "acRate": 34.248964553839116,
      "frontEndId": "233",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Digit One",
      "titleSlug": "number-of-digit-one",
      "topicTags": ["Math", "Dynamic Programming", "Recursion"]
   },
   {
      "acRate": 51.09790761579119,
      "frontEndId": "234",
      "status": null,
      "difficulty": "Easy",
      "title": "Palindrome Linked List",
      "titleSlug": "palindrome-linked-list",
      "topicTags": ["Linked List", "Two Pointers", "Stack", "Recursion"]
   },
   {
      "acRate": 63.21864365733384,
      "frontEndId": "235",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Lowest Common Ancestor of a Binary Search Tree",
      "titleSlug": "lowest-common-ancestor-of-a-binary-search-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 60.47808788694676,
      "frontEndId": "236",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Lowest Common Ancestor of a Binary Tree",
      "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 77.35867825093098,
      "frontEndId": "237",
      "status": null,
      "difficulty": "Medium",
      "title": "Delete Node in a Linked List",
      "titleSlug": "delete-node-in-a-linked-list",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 65.03530953134921,
      "frontEndId": "238",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Product of Array Except Self",
      "titleSlug": "product-of-array-except-self",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 46.42961028683662,
      "frontEndId": "239",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Sliding Window Maximum",
      "titleSlug": "sliding-window-maximum",
      "topicTags": [
         "Array",
         "Queue",
         "Sliding Window",
         "Heap (Priority Queue)",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 51.77161707966823,
      "frontEndId": "240",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Search a 2D Matrix II",
      "titleSlug": "search-a-2d-matrix-ii",
      "topicTags": ["Array", "Binary Search", "Divide and Conquer", "Matrix"]
   },
   {
      "acRate": 64.73449865479319,
      "frontEndId": "241",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Different Ways to Add Parentheses",
      "titleSlug": "different-ways-to-add-parentheses",
      "topicTags": [
         "Math",
         "String",
         "Dynamic Programming",
         "Recursion",
         "Memoization"
      ]
   },
   {
      "acRate": 63.36900993736205,
      "frontEndId": "242",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Valid Anagram",
      "titleSlug": "valid-anagram",
      "topicTags": ["Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 65.1252256210704,
      "frontEndId": "243",
      "status": null,
      "difficulty": "Easy",
      "title": "Shortest Word Distance",
      "titleSlug": "shortest-word-distance",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 60.99172202350537,
      "frontEndId": "244",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest Word Distance II",
      "titleSlug": "shortest-word-distance-ii",
      "topicTags": ["Array", "Hash Table", "Two Pointers", "String", "Design"]
   },
   {
      "acRate": 58.22316696756159,
      "frontEndId": "245",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest Word Distance III",
      "titleSlug": "shortest-word-distance-iii",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 47.65883513624418,
      "frontEndId": "246",
      "status": null,
      "difficulty": "Easy",
      "title": "Strobogrammatic Number",
      "titleSlug": "strobogrammatic-number",
      "topicTags": ["Hash Table", "Two Pointers", "String"]
   },
   {
      "acRate": 51.739403207465784,
      "frontEndId": "247",
      "status": null,
      "difficulty": "Medium",
      "title": "Strobogrammatic Number II",
      "titleSlug": "strobogrammatic-number-ii",
      "topicTags": ["Array", "String", "Recursion"]
   },
   {
      "acRate": 41.9981964467659,
      "frontEndId": "248",
      "status": null,
      "difficulty": "Hard",
      "title": "Strobogrammatic Number III",
      "titleSlug": "strobogrammatic-number-iii",
      "topicTags": ["Array", "String", "Recursion"]
   },
   {
      "acRate": 64.63509759902591,
      "frontEndId": "249",
      "status": null,
      "difficulty": "Medium",
      "title": "Group Shifted Strings",
      "titleSlug": "group-shifted-strings",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 56.054722044924986,
      "frontEndId": "250",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Univalue Subtrees",
      "titleSlug": "count-univalue-subtrees",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 49.28934030619857,
      "frontEndId": "251",
      "status": null,
      "difficulty": "Medium",
      "title": "Flatten 2D Vector",
      "titleSlug": "flatten-2d-vector",
      "topicTags": ["Array", "Two Pointers", "Design", "Iterator"]
   },
   {
      "acRate": 57.61736821425403,
      "frontEndId": "252",
      "status": null,
      "difficulty": "Easy",
      "title": "Meeting Rooms",
      "titleSlug": "meeting-rooms",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 50.798965300873746,
      "frontEndId": "253",
      "status": null,
      "difficulty": "Medium",
      "title": "Meeting Rooms II",
      "titleSlug": "meeting-rooms-ii",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 49.26579264833945,
      "frontEndId": "254",
      "status": null,
      "difficulty": "Medium",
      "title": "Factor Combinations",
      "titleSlug": "factor-combinations",
      "topicTags": ["Array", "Backtracking"]
   },
   {
      "acRate": 48.57493759094368,
      "frontEndId": "255",
      "status": null,
      "difficulty": "Medium",
      "title": "Verify Preorder Sequence in Binary Search Tree",
      "titleSlug": "verify-preorder-sequence-in-binary-search-tree",
      "topicTags": [
         "Stack",
         "Tree",
         "Binary Search Tree",
         "Recursion",
         "Monotonic Stack",
         "Binary Tree"
      ]
   },
   {
      "acRate": 61.65875178244041,
      "frontEndId": "256",
      "status": null,
      "difficulty": "Medium",
      "title": "Paint House",
      "titleSlug": "paint-house",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 62.57167340452568,
      "frontEndId": "257",
      "status": null,
      "difficulty": "Easy",
      "title": "Binary Tree Paths",
      "titleSlug": "binary-tree-paths",
      "topicTags": [
         "String",
         "Backtracking",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 66.0231942528046,
      "frontEndId": "258",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Add Digits",
      "titleSlug": "add-digits",
      "topicTags": ["Math", "Simulation", "Number Theory"]
   },
   {
      "acRate": 50.59390326827645,
      "frontEndId": "259",
      "status": null,
      "difficulty": "Medium",
      "title": "3Sum Smaller",
      "titleSlug": "3sum-smaller",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 67.95709329693686,
      "frontEndId": "260",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Single Number III",
      "titleSlug": "single-number-iii",
      "topicTags": ["Array", "Bit Manipulation"]
   },
   {
      "acRate": 47.54248129564675,
      "frontEndId": "261",
      "status": null,
      "difficulty": "Medium",
      "title": "Graph Valid Tree",
      "titleSlug": "graph-valid-tree",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 36.37759017651573,
      "frontEndId": "262",
      "status": null,
      "difficulty": "Hard",
      "title": "Trips and Users",
      "titleSlug": "trips-and-users",
      "topicTags": ["Database"]
   },
   {
      "acRate": 42.003897783363385,
      "frontEndId": "263",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Ugly Number",
      "titleSlug": "ugly-number",
      "topicTags": ["Math"]
   },
   {
      "acRate": 46.18796413823207,
      "frontEndId": "264",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Ugly Number II",
      "titleSlug": "ugly-number-ii",
      "topicTags": [
         "Hash Table",
         "Math",
         "Dynamic Programming",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 54.025863739996495,
      "frontEndId": "265",
      "status": null,
      "difficulty": "Hard",
      "title": "Paint House II",
      "titleSlug": "paint-house-ii",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 66.39892810300393,
      "frontEndId": "266",
      "status": null,
      "difficulty": "Easy",
      "title": "Palindrome Permutation",
      "titleSlug": "palindrome-permutation",
      "topicTags": ["Hash Table", "String", "Bit Manipulation"]
   },
   {
      "acRate": 40.91122351262589,
      "frontEndId": "267",
      "status": null,
      "difficulty": "Medium",
      "title": "Palindrome Permutation II",
      "titleSlug": "palindrome-permutation-ii",
      "topicTags": ["Hash Table", "String", "Backtracking"]
   },
   {
      "acRate": 64.11297195903501,
      "frontEndId": "268",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Missing Number",
      "titleSlug": "missing-number",
      "topicTags": [
         "Array",
         "Hash Table",
         "Math",
         "Binary Search",
         "Bit Manipulation",
         "Sorting"
      ]
   },
   {
      "acRate": 35.471817790405574,
      "frontEndId": "269",
      "status": null,
      "difficulty": "Hard",
      "title": "Alien Dictionary",
      "titleSlug": "alien-dictionary",
      "topicTags": [
         "Array",
         "String",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 53.19660703072617,
      "frontEndId": "270",
      "status": null,
      "difficulty": "Easy",
      "title": "Closest Binary Search Tree Value",
      "titleSlug": "closest-binary-search-tree-value",
      "topicTags": [
         "Binary Search",
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 44.87702131630517,
      "frontEndId": "271",
      "status": null,
      "difficulty": "Medium",
      "title": "Encode and Decode Strings",
      "titleSlug": "encode-and-decode-strings",
      "topicTags": ["Array", "String", "Design"]
   },
   {
      "acRate": 58.673146544122986,
      "frontEndId": "272",
      "status": null,
      "difficulty": "Hard",
      "title": "Closest Binary Search Tree Value II",
      "titleSlug": "closest-binary-search-tree-value-ii",
      "topicTags": [
         "Two Pointers",
         "Stack",
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Heap (Priority Queue)",
         "Binary Tree"
      ]
   },
   {
      "acRate": 30.21135034005521,
      "frontEndId": "273",
      "status": null,
      "difficulty": "Hard",
      "title": "Integer to English Words",
      "titleSlug": "integer-to-english-words",
      "topicTags": ["Math", "String", "Recursion"]
   },
   {
      "acRate": 38.48570288843357,
      "frontEndId": "274",
      "status": null,
      "difficulty": "Medium",
      "title": "H-Index",
      "titleSlug": "h-index",
      "topicTags": ["Array", "Sorting", "Counting Sort"]
   },
   {
      "acRate": 37.8230812556248,
      "frontEndId": "275",
      "status": null,
      "difficulty": "Medium",
      "title": "H-Index II",
      "titleSlug": "h-index-ii",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 45.23021021206415,
      "frontEndId": "276",
      "status": null,
      "difficulty": "Medium",
      "title": "Paint Fence",
      "titleSlug": "paint-fence",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 46.85736589101902,
      "frontEndId": "277",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Celebrity",
      "titleSlug": "find-the-celebrity",
      "topicTags": ["Two Pointers", "Graph", "Interactive"]
   },
   {
      "acRate": 43.80379545582302,
      "frontEndId": "278",
      "status": null,
      "difficulty": "Easy",
      "title": "First Bad Version",
      "titleSlug": "first-bad-version",
      "topicTags": ["Binary Search", "Interactive"]
   },
   {
      "acRate": 52.99411707103957,
      "frontEndId": "279",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Perfect Squares",
      "titleSlug": "perfect-squares",
      "topicTags": ["Math", "Dynamic Programming", "Breadth-First Search"]
   },
   {
      "acRate": 67.38120296272761,
      "frontEndId": "280",
      "status": null,
      "difficulty": "Medium",
      "title": "Wiggle Sort",
      "titleSlug": "wiggle-sort",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 63.2764046533008,
      "frontEndId": "281",
      "status": null,
      "difficulty": "Medium",
      "title": "Zigzag Iterator",
      "titleSlug": "zigzag-iterator",
      "topicTags": ["Array", "Design", "Queue", "Iterator"]
   },
   {
      "acRate": 39.38889184000243,
      "frontEndId": "282",
      "status": null,
      "difficulty": "Hard",
      "title": "Expression Add Operators",
      "titleSlug": "expression-add-operators",
      "topicTags": ["Math", "String", "Backtracking"]
   },
   {
      "acRate": 61.40613807388126,
      "frontEndId": "283",
      "status": null,
      "difficulty": "Easy",
      "title": "Move Zeroes",
      "titleSlug": "move-zeroes",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 59.0063427303838,
      "frontEndId": "284",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Peeking Iterator",
      "titleSlug": "peeking-iterator",
      "topicTags": ["Array", "Design", "Iterator"]
   },
   {
      "acRate": 49.12579178107224,
      "frontEndId": "285",
      "status": null,
      "difficulty": "Medium",
      "title": "Inorder Successor in BST",
      "titleSlug": "inorder-successor-in-bst",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 60.83242264073922,
      "frontEndId": "286",
      "status": null,
      "difficulty": "Medium",
      "title": "Walls and Gates",
      "titleSlug": "walls-and-gates",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 59.35721065599247,
      "frontEndId": "287",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find the Duplicate Number",
      "titleSlug": "find-the-duplicate-number",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Bit Manipulation"
      ]
   },
   {
      "acRate": 25.858899733029894,
      "frontEndId": "288",
      "status": null,
      "difficulty": "Medium",
      "title": "Unique Word Abbreviation",
      "titleSlug": "unique-word-abbreviation",
      "topicTags": ["Array", "Hash Table", "String", "Design"]
   },
   {
      "acRate": 68.16363401729255,
      "frontEndId": "289",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Game of Life",
      "titleSlug": "game-of-life",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 41.71389856701517,
      "frontEndId": "290",
      "status": null,
      "difficulty": "Easy",
      "title": "Word Pattern",
      "titleSlug": "word-pattern",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 47.327707933995924,
      "frontEndId": "291",
      "status": null,
      "difficulty": "Medium",
      "title": "Word Pattern II",
      "titleSlug": "word-pattern-ii",
      "topicTags": ["Hash Table", "String", "Backtracking"]
   },
   {
      "acRate": 56.360650261663515,
      "frontEndId": "292",
      "status": null,
      "difficulty": "Easy",
      "title": "Nim Game",
      "titleSlug": "nim-game",
      "topicTags": ["Math", "Brainteaser", "Game Theory"]
   },
   {
      "acRate": 63.45016727612231,
      "frontEndId": "293",
      "status": null,
      "difficulty": "Easy",
      "title": "Flip Game",
      "titleSlug": "flip-game",
      "topicTags": ["String"]
   },
   {
      "acRate": 51.96846239079801,
      "frontEndId": "294",
      "status": null,
      "difficulty": "Medium",
      "title": "Flip Game II",
      "titleSlug": "flip-game-ii",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Backtracking",
         "Memoization",
         "Game Theory"
      ]
   },
   {
      "acRate": 51.49495220626612,
      "frontEndId": "295",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Find Median from Data Stream",
      "titleSlug": "find-median-from-data-stream",
      "topicTags": [
         "Two Pointers",
         "Design",
         "Sorting",
         "Heap (Priority Queue)",
         "Data Stream"
      ]
   },
   {
      "acRate": 60.135940138340096,
      "frontEndId": "296",
      "status": null,
      "difficulty": "Hard",
      "title": "Best Meeting Point",
      "titleSlug": "best-meeting-point",
      "topicTags": ["Array", "Math", "Sorting", "Matrix"]
   },
   {
      "acRate": 56.00737870876832,
      "frontEndId": "297",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Serialize and Deserialize Binary Tree",
      "titleSlug": "serialize-and-deserialize-binary-tree",
      "topicTags": [
         "String",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Design",
         "Binary Tree"
      ]
   },
   {
      "acRate": 53.15922116228274,
      "frontEndId": "298",
      "status": null,
      "difficulty": "Medium",
      "title": "Binary Tree Longest Consecutive Sequence",
      "titleSlug": "binary-tree-longest-consecutive-sequence",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 49.820714432383426,
      "frontEndId": "299",
      "status": null,
      "difficulty": "Medium",
      "title": "Bulls and Cows",
      "titleSlug": "bulls-and-cows",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 53.44661948677292,
      "frontEndId": "300",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Increasing Subsequence",
      "titleSlug": "longest-increasing-subsequence",
      "topicTags": ["Array", "Binary Search", "Dynamic Programming"]
   },
   {
      "acRate": 47.429137793336295,
      "frontEndId": "301",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Remove Invalid Parentheses",
      "titleSlug": "remove-invalid-parentheses",
      "topicTags": ["String", "Backtracking", "Breadth-First Search"]
   },
   {
      "acRate": 58.71442199707768,
      "frontEndId": "302",
      "status": null,
      "difficulty": "Hard",
      "title": "Smallest Rectangle Enclosing Black Pixels",
      "titleSlug": "smallest-rectangle-enclosing-black-pixels",
      "topicTags": [
         "Array",
         "Binary Search",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 61.39716391867124,
      "frontEndId": "303",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Range Sum Query - Immutable",
      "titleSlug": "range-sum-query-immutable",
      "topicTags": ["Array", "Design", "Prefix Sum"]
   },
   {
      "acRate": 53.56207338897423,
      "frontEndId": "304",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Range Sum Query 2D - Immutable",
      "titleSlug": "range-sum-query-2d-immutable",
      "topicTags": ["Array", "Design", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 39.59020918241505,
      "frontEndId": "305",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Islands II",
      "titleSlug": "number-of-islands-ii",
      "topicTags": ["Array", "Union Find"]
   },
   {
      "acRate": 31.265464167981044,
      "frontEndId": "306",
      "status": null,
      "difficulty": "Medium",
      "title": "Additive Number",
      "titleSlug": "additive-number",
      "topicTags": ["String", "Backtracking"]
   },
   {
      "acRate": 40.75840083948773,
      "frontEndId": "307",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Range Sum Query - Mutable",
      "titleSlug": "range-sum-query-mutable",
      "topicTags": ["Array", "Design", "Binary Indexed Tree", "Segment Tree"]
   },
   {
      "acRate": 43.5388988803156,
      "frontEndId": "308",
      "status": null,
      "difficulty": "Hard",
      "title": "Range Sum Query 2D - Mutable",
      "titleSlug": "range-sum-query-2d-mutable",
      "topicTags": [
         "Array",
         "Design",
         "Binary Indexed Tree",
         "Segment Tree",
         "Matrix"
      ]
   },
   {
      "acRate": 57.373253240594366,
      "frontEndId": "309",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Best Time to Buy and Sell Stock with Cooldown",
      "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 38.67514751289924,
      "frontEndId": "310",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Height Trees",
      "titleSlug": "minimum-height-trees",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 67.79677496559565,
      "frontEndId": "311",
      "status": null,
      "difficulty": "Medium",
      "title": "Sparse Matrix Multiplication",
      "titleSlug": "sparse-matrix-multiplication",
      "topicTags": ["Array", "Hash Table", "Matrix"]
   },
   {
      "acRate": 58.058895397298436,
      "frontEndId": "312",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Burst Balloons",
      "titleSlug": "burst-balloons",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 45.31323004813219,
      "frontEndId": "313",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Super Ugly Number",
      "titleSlug": "super-ugly-number",
      "topicTags": ["Array", "Math", "Dynamic Programming"]
   },
   {
      "acRate": 52.77416192964548,
      "frontEndId": "314",
      "status": null,
      "difficulty": "Medium",
      "title": "Binary Tree Vertical Order Traversal",
      "titleSlug": "binary-tree-vertical-order-traversal",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 42.400246064368204,
      "frontEndId": "315",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Count of Smaller Numbers After Self",
      "titleSlug": "count-of-smaller-numbers-after-self",
      "topicTags": [
         "Array",
         "Binary Search",
         "Divide and Conquer",
         "Binary Indexed Tree",
         "Segment Tree",
         "Merge Sort",
         "Ordered Set"
      ]
   },
   {
      "acRate": 48.855256869581396,
      "frontEndId": "316",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Remove Duplicate Letters",
      "titleSlug": "remove-duplicate-letters",
      "topicTags": ["String", "Stack", "Greedy", "Monotonic Stack"]
   },
   {
      "acRate": 42.659654919039525,
      "frontEndId": "317",
      "status": null,
      "difficulty": "Hard",
      "title": "Shortest Distance from All Buildings",
      "titleSlug": "shortest-distance-from-all-buildings",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 59.807166333402286,
      "frontEndId": "318",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Product of Word Lengths",
      "titleSlug": "maximum-product-of-word-lengths",
      "topicTags": ["Array", "String", "Bit Manipulation"]
   },
   {
      "acRate": 52.526730097356946,
      "frontEndId": "319",
      "status": null,
      "difficulty": "Medium",
      "title": "Bulb Switcher",
      "titleSlug": "bulb-switcher",
      "topicTags": ["Math", "Brainteaser"]
   },
   {
      "acRate": 58.007948682192165,
      "frontEndId": "320",
      "status": null,
      "difficulty": "Medium",
      "title": "Generalized Abbreviation",
      "titleSlug": "generalized-abbreviation",
      "topicTags": ["String", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 29.497933884297524,
      "frontEndId": "321",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Create Maximum Number",
      "titleSlug": "create-maximum-number",
      "topicTags": ["Stack", "Greedy", "Monotonic Stack"]
   },
   {
      "acRate": 42.994126471869464,
      "frontEndId": "322",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Coin Change",
      "titleSlug": "coin-change",
      "topicTags": ["Array", "Dynamic Programming", "Breadth-First Search"]
   },
   {
      "acRate": 62.45238800463518,
      "frontEndId": "323",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Connected Components in an Undirected Graph",
      "titleSlug": "number-of-connected-components-in-an-undirected-graph",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 33.82982037523223,
      "frontEndId": "324",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Wiggle Sort II",
      "titleSlug": "wiggle-sort-ii",
      "topicTags": ["Array", "Divide and Conquer", "Sorting", "Quickselect"]
   },
   {
      "acRate": 49.34583034800767,
      "frontEndId": "325",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Size Subarray Sum Equals k",
      "titleSlug": "maximum-size-subarray-sum-equals-k",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 45.906600667402735,
      "frontEndId": "326",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Power of Three",
      "titleSlug": "power-of-three",
      "topicTags": ["Math", "Recursion"]
   },
   {
      "acRate": 35.75713524735026,
      "frontEndId": "327",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Count of Range Sum",
      "titleSlug": "count-of-range-sum",
      "topicTags": [
         "Array",
         "Binary Search",
         "Divide and Conquer",
         "Binary Indexed Tree",
         "Segment Tree",
         "Merge Sort",
         "Ordered Set"
      ]
   },
   {
      "acRate": 61.346197051987794,
      "frontEndId": "328",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Odd Even Linked List",
      "titleSlug": "odd-even-linked-list",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 52.943449783114225,
      "frontEndId": "329",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Longest Increasing Path in a Matrix",
      "titleSlug": "longest-increasing-path-in-a-matrix",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort",
         "Memoization",
         "Matrix"
      ]
   },
   {
      "acRate": 40.802628996207204,
      "frontEndId": "330",
      "status": null,
      "difficulty": "Hard",
      "title": "Patching Array",
      "titleSlug": "patching-array",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 44.83331880919981,
      "frontEndId": "331",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Verify Preorder Serialization of a Binary Tree",
      "titleSlug": "verify-preorder-serialization-of-a-binary-tree",
      "topicTags": ["String", "Stack", "Tree", "Binary Tree"]
   },
   {
      "acRate": 43.49753813107948,
      "frontEndId": "332",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Reconstruct Itinerary",
      "titleSlug": "reconstruct-itinerary",
      "topicTags": ["Depth-First Search", "Graph", "Eulerian Circuit"]
   },
   {
      "acRate": 43.17683232281356,
      "frontEndId": "333",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest BST Subtree",
      "titleSlug": "largest-bst-subtree",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 41.00133892707311,
      "frontEndId": "334",
      "status": null,
      "difficulty": "Medium",
      "title": "Increasing Triplet Subsequence",
      "titleSlug": "increasing-triplet-subsequence",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 29.71132105564364,
      "frontEndId": "335",
      "status": null,
      "difficulty": "Hard",
      "title": "Self Crossing",
      "titleSlug": "self-crossing",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 35.007443641003825,
      "frontEndId": "336",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Palindrome Pairs",
      "titleSlug": "palindrome-pairs",
      "topicTags": ["Array", "Hash Table", "String", "Trie"]
   },
   {
      "acRate": 54.0628142153691,
      "frontEndId": "337",
      "status": "ac",
      "difficulty": "Medium",
      "title": "House Robber III",
      "titleSlug": "house-robber-iii",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 77.59017793973267,
      "frontEndId": "338",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Counting Bits",
      "titleSlug": "counting-bits",
      "topicTags": ["Dynamic Programming", "Bit Manipulation"]
   },
   {
      "acRate": 82.5348796928961,
      "frontEndId": "339",
      "status": null,
      "difficulty": "Medium",
      "title": "Nested List Weight Sum",
      "titleSlug": "nested-list-weight-sum",
      "topicTags": ["Depth-First Search", "Breadth-First Search"]
   },
   {
      "acRate": 48.38284879308857,
      "frontEndId": "340",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Substring with At Most K Distinct Characters",
      "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 62.108447715668724,
      "frontEndId": "341",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Flatten Nested List Iterator",
      "titleSlug": "flatten-nested-list-iterator",
      "topicTags": [
         "Stack",
         "Tree",
         "Depth-First Search",
         "Design",
         "Queue",
         "Iterator"
      ]
   },
   {
      "acRate": 46.81381925692616,
      "frontEndId": "342",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Power of Four",
      "titleSlug": "power-of-four",
      "topicTags": ["Math", "Bit Manipulation", "Recursion"]
   },
   {
      "acRate": 59.931255935959484,
      "frontEndId": "343",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Integer Break",
      "titleSlug": "integer-break",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 77.28829887553032,
      "frontEndId": "344",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Reverse String",
      "titleSlug": "reverse-string",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 51.43672049737293,
      "frontEndId": "345",
      "status": null,
      "difficulty": "Easy",
      "title": "Reverse Vowels of a String",
      "titleSlug": "reverse-vowels-of-a-string",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 77.31009645630503,
      "frontEndId": "346",
      "status": null,
      "difficulty": "Easy",
      "title": "Moving Average from Data Stream",
      "titleSlug": "moving-average-from-data-stream",
      "topicTags": ["Array", "Design", "Queue", "Data Stream"]
   },
   {
      "acRate": 62.98022696073282,
      "frontEndId": "347",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Top K Frequent Elements",
      "titleSlug": "top-k-frequent-elements",
      "topicTags": [
         "Array",
         "Hash Table",
         "Divide and Conquer",
         "Sorting",
         "Heap (Priority Queue)",
         "Bucket Sort",
         "Counting",
         "Quickselect"
      ]
   },
   {
      "acRate": 57.70332524976652,
      "frontEndId": "348",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Tic-Tac-Toe",
      "titleSlug": "design-tic-tac-toe",
      "topicTags": ["Array", "Hash Table", "Design", "Matrix", "Simulation"]
   },
   {
      "acRate": 71.72044074270866,
      "frontEndId": "349",
      "status": null,
      "difficulty": "Easy",
      "title": "Intersection of Two Arrays",
      "titleSlug": "intersection-of-two-arrays",
      "topicTags": [
         "Array",
         "Hash Table",
         "Two Pointers",
         "Binary Search",
         "Sorting"
      ]
   },
   {
      "acRate": 56.18813775797352,
      "frontEndId": "350",
      "status": null,
      "difficulty": "Easy",
      "title": "Intersection of Two Arrays II",
      "titleSlug": "intersection-of-two-arrays-ii",
      "topicTags": [
         "Array",
         "Hash Table",
         "Two Pointers",
         "Binary Search",
         "Sorting"
      ]
   },
   {
      "acRate": 51.730446937595595,
      "frontEndId": "351",
      "status": null,
      "difficulty": "Medium",
      "title": "Android Unlock Patterns",
      "titleSlug": "android-unlock-patterns",
      "topicTags": ["Dynamic Programming", "Backtracking"]
   },
   {
      "acRate": 59.850582855670766,
      "frontEndId": "352",
      "status": null,
      "difficulty": "Hard",
      "title": "Data Stream as Disjoint Intervals",
      "titleSlug": "data-stream-as-disjoint-intervals",
      "topicTags": ["Binary Search", "Design", "Ordered Set"]
   },
   {
      "acRate": 38.851809674704164,
      "frontEndId": "353",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Snake Game",
      "titleSlug": "design-snake-game",
      "topicTags": ["Array", "Hash Table", "Design", "Queue", "Simulation"]
   },
   {
      "acRate": 37.314855171496745,
      "frontEndId": "354",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Russian Doll Envelopes",
      "titleSlug": "russian-doll-envelopes",
      "topicTags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 38.48623514650528,
      "frontEndId": "355",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Design Twitter",
      "titleSlug": "design-twitter",
      "topicTags": [
         "Hash Table",
         "Linked List",
         "Design",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 35.13566342439615,
      "frontEndId": "356",
      "status": null,
      "difficulty": "Medium",
      "title": "Line Reflection",
      "titleSlug": "line-reflection",
      "topicTags": ["Array", "Hash Table", "Math"]
   },
   {
      "acRate": 52.36288874732148,
      "frontEndId": "357",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Numbers with Unique Digits",
      "titleSlug": "count-numbers-with-unique-digits",
      "topicTags": ["Math", "Dynamic Programming", "Backtracking"]
   },
   {
      "acRate": 38.42876746506986,
      "frontEndId": "358",
      "status": null,
      "difficulty": "Hard",
      "title": "Rearrange String k Distance Apart",
      "titleSlug": "rearrange-string-k-distance-apart",
      "topicTags": [
         "Hash Table",
         "String",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)",
         "Counting"
      ]
   },
   {
      "acRate": 75.65698298747526,
      "frontEndId": "359",
      "status": null,
      "difficulty": "Easy",
      "title": "Logger Rate Limiter",
      "titleSlug": "logger-rate-limiter",
      "topicTags": ["Hash Table", "Design"]
   },
   {
      "acRate": 55.318702089677615,
      "frontEndId": "360",
      "status": null,
      "difficulty": "Medium",
      "title": "Sort Transformed Array",
      "titleSlug": "sort-transformed-array",
      "topicTags": ["Array", "Math", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 51.55824446823214,
      "frontEndId": "361",
      "status": null,
      "difficulty": "Medium",
      "title": "Bomb Enemy",
      "titleSlug": "bomb-enemy",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 68.46904828529678,
      "frontEndId": "362",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Hit Counter",
      "titleSlug": "design-hit-counter",
      "topicTags": ["Array", "Hash Table", "Binary Search", "Design", "Queue"]
   },
   {
      "acRate": 43.97829913297937,
      "frontEndId": "363",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Max Sum of Rectangle No Larger Than K",
      "titleSlug": "max-sum-of-rectangle-no-larger-than-k",
      "topicTags": [
         "Array",
         "Binary Search",
         "Matrix",
         "Prefix Sum",
         "Ordered Set"
      ]
   },
   {
      "acRate": 66.0807656042798,
      "frontEndId": "364",
      "status": null,
      "difficulty": "Medium",
      "title": "Nested List Weight Sum II",
      "titleSlug": "nested-list-weight-sum-ii",
      "topicTags": ["Stack", "Depth-First Search", "Breadth-First Search"]
   },
   {
      "acRate": 39.01544206922851,
      "frontEndId": "365",
      "status": null,
      "difficulty": "Medium",
      "title": "Water and Jug Problem",
      "titleSlug": "water-and-jug-problem",
      "topicTags": ["Math", "Depth-First Search", "Breadth-First Search"]
   },
   {
      "acRate": 80.38999227900712,
      "frontEndId": "366",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Leaves of Binary Tree",
      "titleSlug": "find-leaves-of-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 43.41426313726031,
      "frontEndId": "367",
      "status": null,
      "difficulty": "Easy",
      "title": "Valid Perfect Square",
      "titleSlug": "valid-perfect-square",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 42.182684526781564,
      "frontEndId": "368",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Largest Divisible Subset",
      "titleSlug": "largest-divisible-subset",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 60.93575673173549,
      "frontEndId": "369",
      "status": null,
      "difficulty": "Medium",
      "title": "Plus One Linked List",
      "titleSlug": "plus-one-linked-list",
      "topicTags": ["Linked List", "Math"]
   },
   {
      "acRate": 71.3558625486043,
      "frontEndId": "370",
      "status": null,
      "difficulty": "Medium",
      "title": "Range Addition",
      "titleSlug": "range-addition",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 51.077771468322716,
      "frontEndId": "371",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sum of Two Integers",
      "titleSlug": "sum-of-two-integers",
      "topicTags": ["Math", "Bit Manipulation"]
   },
   {
      "acRate": 35.66808200092881,
      "frontEndId": "372",
      "status": null,
      "difficulty": "Medium",
      "title": "Super Pow",
      "titleSlug": "super-pow",
      "topicTags": ["Math", "Divide and Conquer"]
   },
   {
      "acRate": 40.087820044667616,
      "frontEndId": "373",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find K Pairs with Smallest Sums",
      "titleSlug": "find-k-pairs-with-smallest-sums",
      "topicTags": ["Array", "Heap (Priority Queue)"]
   },
   {
      "acRate": 52.60889702602125,
      "frontEndId": "374",
      "status": null,
      "difficulty": "Easy",
      "title": "Guess Number Higher or Lower",
      "titleSlug": "guess-number-higher-or-lower",
      "topicTags": ["Binary Search", "Interactive"]
   },
   {
      "acRate": 47.972200785226605,
      "frontEndId": "375",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Guess Number Higher or Lower II",
      "titleSlug": "guess-number-higher-or-lower-ii",
      "topicTags": ["Math", "Dynamic Programming", "Game Theory"]
   },
   {
      "acRate": 48.37100841739595,
      "frontEndId": "376",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Wiggle Subsequence",
      "titleSlug": "wiggle-subsequence",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 53.955488319459896,
      "frontEndId": "377",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Combination Sum IV",
      "titleSlug": "combination-sum-iv",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 62.0375391990063,
      "frontEndId": "378",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Kth Smallest Element in a Sorted Matrix",
      "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
      "topicTags": [
         "Array",
         "Binary Search",
         "Sorting",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 51.40919720669035,
      "frontEndId": "379",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Phone Directory",
      "titleSlug": "design-phone-directory",
      "topicTags": ["Array", "Hash Table", "Linked List", "Design", "Queue"]
   },
   {
      "acRate": 52.80285245911648,
      "frontEndId": "380",
      "status": null,
      "difficulty": "Medium",
      "title": "Insert Delete GetRandom O(1)",
      "titleSlug": "insert-delete-getrandom-o1",
      "topicTags": ["Array", "Hash Table", "Math", "Design", "Randomized"]
   },
   {
      "acRate": 35.39760161800326,
      "frontEndId": "381",
      "status": null,
      "difficulty": "Hard",
      "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
      "titleSlug": "insert-delete-getrandom-o1-duplicates-allowed",
      "topicTags": ["Array", "Hash Table", "Math", "Design", "Randomized"]
   },
   {
      "acRate": 62.90356277522581,
      "frontEndId": "382",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Linked List Random Node",
      "titleSlug": "linked-list-random-node",
      "topicTags": ["Linked List", "Math", "Reservoir Sampling", "Randomized"]
   },
   {
      "acRate": 59.6556802475356,
      "frontEndId": "383",
      "status": null,
      "difficulty": "Easy",
      "title": "Ransom Note",
      "titleSlug": "ransom-note",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 57.97883790933138,
      "frontEndId": "384",
      "status": null,
      "difficulty": "Medium",
      "title": "Shuffle an Array",
      "titleSlug": "shuffle-an-array",
      "topicTags": ["Array", "Math", "Randomized"]
   },
   {
      "acRate": 37.39111151151428,
      "frontEndId": "385",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Mini Parser",
      "titleSlug": "mini-parser",
      "topicTags": ["String", "Stack", "Depth-First Search"]
   },
   {
      "acRate": 62.62724520917138,
      "frontEndId": "386",
      "status": null,
      "difficulty": "Medium",
      "title": "Lexicographical Numbers",
      "titleSlug": "lexicographical-numbers",
      "topicTags": ["Depth-First Search", "Trie"]
   },
   {
      "acRate": 60.188688725284955,
      "frontEndId": "387",
      "status": null,
      "difficulty": "Easy",
      "title": "First Unique Character in a String",
      "titleSlug": "first-unique-character-in-a-string",
      "topicTags": ["Hash Table", "String", "Queue", "Counting"]
   },
   {
      "acRate": 46.87874035907447,
      "frontEndId": "388",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Absolute File Path",
      "titleSlug": "longest-absolute-file-path",
      "topicTags": ["String", "Stack", "Depth-First Search"]
   },
   {
      "acRate": 60.34806103576975,
      "frontEndId": "389",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find the Difference",
      "titleSlug": "find-the-difference",
      "topicTags": ["Hash Table", "String", "Bit Manipulation", "Sorting"]
   },
   {
      "acRate": 45.9058945340025,
      "frontEndId": "390",
      "status": null,
      "difficulty": "Medium",
      "title": "Elimination Game",
      "titleSlug": "elimination-game",
      "topicTags": ["Math", "Recursion"]
   },
   {
      "acRate": 33.175519259211626,
      "frontEndId": "391",
      "status": null,
      "difficulty": "Hard",
      "title": "Perfect Rectangle",
      "titleSlug": "perfect-rectangle",
      "topicTags": ["Array", "Line Sweep"]
   },
   {
      "acRate": 47.99049308597751,
      "frontEndId": "392",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Is Subsequence",
      "titleSlug": "is-subsequence",
      "topicTags": ["Two Pointers", "String", "Dynamic Programming"]
   },
   {
      "acRate": 44.995408631772264,
      "frontEndId": "393",
      "status": null,
      "difficulty": "Medium",
      "title": "UTF-8 Validation",
      "titleSlug": "utf-8-validation",
      "topicTags": ["Array", "Bit Manipulation"]
   },
   {
      "acRate": 58.489739657018944,
      "frontEndId": "394",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Decode String",
      "titleSlug": "decode-string",
      "topicTags": ["String", "Stack", "Recursion"]
   },
   {
      "acRate": 44.868137434408595,
      "frontEndId": "395",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Substring with At Least K Repeating Characters",
      "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
      "topicTags": [
         "Hash Table",
         "String",
         "Divide and Conquer",
         "Sliding Window"
      ]
   },
   {
      "acRate": 41.799037081371395,
      "frontEndId": "396",
      "status": null,
      "difficulty": "Medium",
      "title": "Rotate Function",
      "titleSlug": "rotate-function",
      "topicTags": ["Array", "Math", "Dynamic Programming"]
   },
   {
      "acRate": 35.4213413730045,
      "frontEndId": "397",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Integer Replacement",
      "titleSlug": "integer-replacement",
      "topicTags": [
         "Dynamic Programming",
         "Greedy",
         "Bit Manipulation",
         "Memoization"
      ]
   },
   {
      "acRate": 62.53529196441361,
      "frontEndId": "398",
      "status": null,
      "difficulty": "Medium",
      "title": "Random Pick Index",
      "titleSlug": "random-pick-index",
      "topicTags": ["Hash Table", "Math", "Reservoir Sampling", "Randomized"]
   },
   {
      "acRate": 61.41537690107046,
      "frontEndId": "399",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Evaluate Division",
      "titleSlug": "evaluate-division",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph",
         "Shortest Path"
      ]
   },
   {
      "acRate": 34.307231230308155,
      "frontEndId": "400",
      "status": null,
      "difficulty": "Medium",
      "title": "Nth Digit",
      "titleSlug": "nth-digit",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 53.18089410438598,
      "frontEndId": "401",
      "status": null,
      "difficulty": "Easy",
      "title": "Binary Watch",
      "titleSlug": "binary-watch",
      "topicTags": ["Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 30.783510808463966,
      "frontEndId": "402",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Remove K Digits",
      "titleSlug": "remove-k-digits",
      "topicTags": ["String", "Stack", "Greedy", "Monotonic Stack"]
   },
   {
      "acRate": 45.866826790800054,
      "frontEndId": "403",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Frog Jump",
      "titleSlug": "frog-jump",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 57.28450723530909,
      "frontEndId": "404",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of Left Leaves",
      "titleSlug": "sum-of-left-leaves",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 47.51746073146699,
      "frontEndId": "405",
      "status": null,
      "difficulty": "Easy",
      "title": "Convert a Number to Hexadecimal",
      "titleSlug": "convert-a-number-to-hexadecimal",
      "topicTags": ["Math", "Bit Manipulation"]
   },
   {
      "acRate": 73.18608648316255,
      "frontEndId": "406",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Queue Reconstruction by Height",
      "titleSlug": "queue-reconstruction-by-height",
      "topicTags": [
         "Array",
         "Greedy",
         "Binary Indexed Tree",
         "Segment Tree",
         "Sorting"
      ]
   },
   {
      "acRate": 47.626178559292256,
      "frontEndId": "407",
      "status": "notac",
      "difficulty": "Hard",
      "title": "Trapping Rain Water II",
      "titleSlug": "trapping-rain-water-ii",
      "topicTags": [
         "Array",
         "Breadth-First Search",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 35.01098263722926,
      "frontEndId": "408",
      "status": null,
      "difficulty": "Easy",
      "title": "Valid Word Abbreviation",
      "titleSlug": "valid-word-abbreviation",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 53.90194093083983,
      "frontEndId": "409",
      "status": null,
      "difficulty": "Easy",
      "title": "Longest Palindrome",
      "titleSlug": "longest-palindrome",
      "topicTags": ["Hash Table", "String", "Greedy"]
   },
   {
      "acRate": 54.39046682308638,
      "frontEndId": "410",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Split Array Largest Sum",
      "titleSlug": "split-array-largest-sum",
      "topicTags": [
         "Array",
         "Binary Search",
         "Dynamic Programming",
         "Greedy",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 39.59953982688726,
      "frontEndId": "411",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Unique Word Abbreviation",
      "titleSlug": "minimum-unique-word-abbreviation",
      "topicTags": ["String", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 70.9965899081578,
      "frontEndId": "412",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Fizz Buzz",
      "titleSlug": "fizz-buzz",
      "topicTags": ["Math", "String", "Simulation"]
   },
   {
      "acRate": 65.01984167686673,
      "frontEndId": "413",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Arithmetic Slices",
      "titleSlug": "arithmetic-slices",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 33.94190353412635,
      "frontEndId": "414",
      "status": null,
      "difficulty": "Easy",
      "title": "Third Maximum Number",
      "titleSlug": "third-maximum-number",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 51.882342019258374,
      "frontEndId": "415",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Add Strings",
      "titleSlug": "add-strings",
      "topicTags": ["Math", "String", "Simulation"]
   },
   {
      "acRate": 46.181659698794206,
      "frontEndId": "416",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Partition Equal Subset Sum",
      "titleSlug": "partition-equal-subset-sum",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 54.792432359123886,
      "frontEndId": "417",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Pacific Atlantic Water Flow",
      "titleSlug": "pacific-atlantic-water-flow",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 35.7272169606655,
      "frontEndId": "418",
      "status": null,
      "difficulty": "Medium",
      "title": "Sentence Screen Fitting",
      "titleSlug": "sentence-screen-fitting",
      "topicTags": ["String", "Dynamic Programming", "Simulation"]
   },
   {
      "acRate": 75.03388579218537,
      "frontEndId": "419",
      "status": null,
      "difficulty": "Medium",
      "title": "Battleships in a Board",
      "titleSlug": "battleships-in-a-board",
      "topicTags": ["Array", "Depth-First Search", "Matrix"]
   },
   {
      "acRate": 13.54566399687292,
      "frontEndId": "420",
      "status": null,
      "difficulty": "Hard",
      "title": "Strong Password Checker",
      "titleSlug": "strong-password-checker",
      "topicTags": ["String", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 53.618598044350065,
      "frontEndId": "421",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum XOR of Two Numbers in an Array",
      "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
      "topicTags": ["Array", "Hash Table", "Bit Manipulation", "Trie"]
   },
   {
      "acRate": 40.46613088404133,
      "frontEndId": "422",
      "status": null,
      "difficulty": "Easy",
      "title": "Valid Word Square",
      "titleSlug": "valid-word-square",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 51.12803253589807,
      "frontEndId": "423",
      "status": null,
      "difficulty": "Medium",
      "title": "Reconstruct Original Digits from English",
      "titleSlug": "reconstruct-original-digits-from-english",
      "topicTags": ["Hash Table", "Math", "String"]
   },
   {
      "acRate": 52.72939838279248,
      "frontEndId": "424",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Repeating Character Replacement",
      "titleSlug": "longest-repeating-character-replacement",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 53.12213243347246,
      "frontEndId": "425",
      "status": null,
      "difficulty": "Hard",
      "title": "Word Squares",
      "titleSlug": "word-squares",
      "topicTags": ["Array", "String", "Backtracking", "Trie"]
   },
   {
      "acRate": 64.69432597297175,
      "frontEndId": "426",
      "status": null,
      "difficulty": "Medium",
      "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
      "titleSlug": "convert-binary-search-tree-to-sorted-doubly-linked-list",
      "topicTags": [
         "Linked List",
         "Stack",
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree",
         "Doubly-Linked List"
      ]
   },
   {
      "acRate": 74.94465425185571,
      "frontEndId": "427",
      "status": null,
      "difficulty": "Medium",
      "title": "Construct Quad Tree",
      "titleSlug": "construct-quad-tree",
      "topicTags": ["Array", "Divide and Conquer", "Tree", "Matrix"]
   },
   {
      "acRate": 66.32292015656537,
      "frontEndId": "428",
      "status": null,
      "difficulty": "Hard",
      "title": "Serialize and Deserialize N-ary Tree",
      "titleSlug": "serialize-and-deserialize-n-ary-tree",
      "topicTags": [
         "String",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 70.72617652802187,
      "frontEndId": "429",
      "status": "ac",
      "difficulty": "Medium",
      "title": "N-ary Tree Level Order Traversal",
      "titleSlug": "n-ary-tree-level-order-traversal",
      "topicTags": ["Tree", "Breadth-First Search"]
   },
   {
      "acRate": 59.79704480513974,
      "frontEndId": "430",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Flatten a Multilevel Doubly Linked List",
      "titleSlug": "flatten-a-multilevel-doubly-linked-list",
      "topicTags": ["Linked List", "Depth-First Search", "Doubly-Linked List"]
   },
   {
      "acRate": 79.14811229428848,
      "frontEndId": "431",
      "status": null,
      "difficulty": "Hard",
      "title": "Encode N-ary Tree to Binary Tree",
      "titleSlug": "encode-n-ary-tree-to-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Design",
         "Binary Tree"
      ]
   },
   {
      "acRate": 36.51754540202457,
      "frontEndId": "432",
      "status": "ac",
      "difficulty": "Hard",
      "title": "All O`one Data Structure",
      "titleSlug": "all-oone-data-structure",
      "topicTags": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"]
   },
   {
      "acRate": 53.00485431187485,
      "frontEndId": "433",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Genetic Mutation",
      "titleSlug": "minimum-genetic-mutation",
      "topicTags": ["Hash Table", "String", "Breadth-First Search"]
   },
   {
      "acRate": 36.62161790206711,
      "frontEndId": "434",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Segments in a String",
      "titleSlug": "number-of-segments-in-a-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 52.31120106066327,
      "frontEndId": "435",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Non-overlapping Intervals",
      "titleSlug": "non-overlapping-intervals",
      "topicTags": ["Array", "Dynamic Programming", "Greedy", "Sorting"]
   },
   {
      "acRate": 51.49261212133362,
      "frontEndId": "436",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Right Interval",
      "titleSlug": "find-right-interval",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 47.078726955494915,
      "frontEndId": "437",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Path Sum III",
      "titleSlug": "path-sum-iii",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 50.47054751211515,
      "frontEndId": "438",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find All Anagrams in a String",
      "titleSlug": "find-all-anagrams-in-a-string",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 60.37455526449544,
      "frontEndId": "439",
      "status": null,
      "difficulty": "Medium",
      "title": "Ternary Expression Parser",
      "titleSlug": "ternary-expression-parser",
      "topicTags": ["String", "Stack", "Recursion"]
   },
   {
      "acRate": 31.6153390583358,
      "frontEndId": "440",
      "status": null,
      "difficulty": "Hard",
      "title": "K-th Smallest in Lexicographical Order",
      "titleSlug": "k-th-smallest-in-lexicographical-order",
      "topicTags": ["Trie"]
   },
   {
      "acRate": 46.37767529856923,
      "frontEndId": "441",
      "status": null,
      "difficulty": "Easy",
      "title": "Arranging Coins",
      "titleSlug": "arranging-coins",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 73.60811186557837,
      "frontEndId": "442",
      "status": null,
      "difficulty": "Medium",
      "title": "Find All Duplicates in an Array",
      "titleSlug": "find-all-duplicates-in-an-array",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 53.05541346573498,
      "frontEndId": "443",
      "status": null,
      "difficulty": "Medium",
      "title": "String Compression",
      "titleSlug": "string-compression",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 27.382836657896668,
      "frontEndId": "444",
      "status": null,
      "difficulty": "Medium",
      "title": "Sequence Reconstruction",
      "titleSlug": "sequence-reconstruction",
      "topicTags": ["Array", "Graph", "Topological Sort"]
   },
   {
      "acRate": 61.02988129796931,
      "frontEndId": "445",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Add Two Numbers II",
      "titleSlug": "add-two-numbers-ii",
      "topicTags": ["Linked List", "Math", "Stack"]
   },
   {
      "acRate": 46.58255935203822,
      "frontEndId": "446",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Arithmetic Slices II - Subsequence",
      "titleSlug": "arithmetic-slices-ii-subsequence",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 55.13282874108445,
      "frontEndId": "447",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Boomerangs",
      "titleSlug": "number-of-boomerangs",
      "topicTags": ["Array", "Hash Table", "Math"]
   },
   {
      "acRate": 60.4249592088848,
      "frontEndId": "448",
      "status": null,
      "difficulty": "Easy",
      "title": "Find All Numbers Disappeared in an Array",
      "titleSlug": "find-all-numbers-disappeared-in-an-array",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 57.339366699987536,
      "frontEndId": "449",
      "status": null,
      "difficulty": "Medium",
      "title": "Serialize and Deserialize BST",
      "titleSlug": "serialize-and-deserialize-bst",
      "topicTags": [
         "String",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Design",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 50.67822049573194,
      "frontEndId": "450",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Delete Node in a BST",
      "titleSlug": "delete-node-in-a-bst",
      "topicTags": ["Tree", "Binary Search Tree", "Binary Tree"]
   },
   {
      "acRate": 70.4097506708853,
      "frontEndId": "451",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sort Characters By Frequency",
      "titleSlug": "sort-characters-by-frequency",
      "topicTags": [
         "Hash Table",
         "String",
         "Sorting",
         "Heap (Priority Queue)",
         "Bucket Sort",
         "Counting"
      ]
   },
   {
      "acRate": 55.658049459107275,
      "frontEndId": "452",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Arrows to Burst Balloons",
      "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 56.39674842130971,
      "frontEndId": "453",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Moves to Equal Array Elements",
      "titleSlug": "minimum-moves-to-equal-array-elements",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 57.13070393297994,
      "frontEndId": "454",
      "status": null,
      "difficulty": "Medium",
      "title": "4Sum II",
      "titleSlug": "4sum-ii",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 49.69918784609936,
      "frontEndId": "455",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Assign Cookies",
      "titleSlug": "assign-cookies",
      "topicTags": ["Array", "Two Pointers", "Greedy", "Sorting"]
   },
   {
      "acRate": 33.69938414712199,
      "frontEndId": "456",
      "status": "ac",
      "difficulty": "Medium",
      "title": "132 Pattern",
      "titleSlug": "132-pattern",
      "topicTags": [
         "Array",
         "Binary Search",
         "Stack",
         "Monotonic Stack",
         "Ordered Set"
      ]
   },
   {
      "acRate": 33.18136448245164,
      "frontEndId": "457",
      "status": null,
      "difficulty": "Medium",
      "title": "Circular Array Loop",
      "titleSlug": "circular-array-loop",
      "topicTags": ["Array", "Hash Table", "Two Pointers"]
   },
   {
      "acRate": 61.47127708021599,
      "frontEndId": "458",
      "status": null,
      "difficulty": "Hard",
      "title": "Poor Pigs",
      "titleSlug": "poor-pigs",
      "topicTags": ["Math", "Dynamic Programming", "Combinatorics"]
   },
   {
      "acRate": 46.055099408724715,
      "frontEndId": "459",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Repeated Substring Pattern",
      "titleSlug": "repeated-substring-pattern",
      "topicTags": ["String", "String Matching"]
   },
   {
      "acRate": 43.62284084587005,
      "frontEndId": "460",
      "status": "ac",
      "difficulty": "Hard",
      "title": "LFU Cache",
      "titleSlug": "lfu-cache",
      "topicTags": ["Hash Table", "Linked List", "Design", "Doubly-Linked List"]
   },
   {
      "acRate": 75.1690177378942,
      "frontEndId": "461",
      "status": null,
      "difficulty": "Easy",
      "title": "Hamming Distance",
      "titleSlug": "hamming-distance",
      "topicTags": ["Bit Manipulation"]
   },
   {
      "acRate": 59.95802839255797,
      "frontEndId": "462",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Moves to Equal Array Elements II",
      "titleSlug": "minimum-moves-to-equal-array-elements-ii",
      "topicTags": ["Array", "Math", "Sorting"]
   },
   {
      "acRate": 69.946001945496,
      "frontEndId": "463",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Island Perimeter",
      "titleSlug": "island-perimeter",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 29.524328609652166,
      "frontEndId": "464",
      "status": null,
      "difficulty": "Medium",
      "title": "Can I Win",
      "titleSlug": "can-i-win",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Bit Manipulation",
         "Memoization",
         "Game Theory",
         "Bitmask"
      ]
   },
   {
      "acRate": 49.36164886515354,
      "frontEndId": "465",
      "status": null,
      "difficulty": "Hard",
      "title": "Optimal Account Balancing",
      "titleSlug": "optimal-account-balancing",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 29.653052261747913,
      "frontEndId": "466",
      "status": null,
      "difficulty": "Hard",
      "title": "Count The Repetitions",
      "titleSlug": "count-the-repetitions",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 39.09305603524722,
      "frontEndId": "467",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Unique Substrings in Wraparound String",
      "titleSlug": "unique-substrings-in-wraparound-string",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 26.733377903340592,
      "frontEndId": "468",
      "status": null,
      "difficulty": "Medium",
      "title": "Validate IP Address",
      "titleSlug": "validate-ip-address",
      "topicTags": ["String"]
   },
   {
      "acRate": 39.298969072164944,
      "frontEndId": "469",
      "status": null,
      "difficulty": "Medium",
      "title": "Convex Polygon",
      "titleSlug": "convex-polygon",
      "topicTags": ["Math", "Geometry"]
   },
   {
      "acRate": 46.00652195074467,
      "frontEndId": "470",
      "status": null,
      "difficulty": "Medium",
      "title": "Implement Rand10() Using Rand7()",
      "titleSlug": "implement-rand10-using-rand7",
      "topicTags": [
         "Math",
         "Rejection Sampling",
         "Randomized",
         "Probability and Statistics"
      ]
   },
   {
      "acRate": 50.49005693676847,
      "frontEndId": "471",
      "status": null,
      "difficulty": "Hard",
      "title": "Encode String with Shortest Length",
      "titleSlug": "encode-string-with-shortest-length",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 49.74187162818362,
      "frontEndId": "472",
      "status": null,
      "difficulty": "Hard",
      "title": "Concatenated Words",
      "titleSlug": "concatenated-words",
      "topicTags": [
         "Array",
         "String",
         "Dynamic Programming",
         "Depth-First Search",
         "Trie"
      ]
   },
   {
      "acRate": 40.17015161999295,
      "frontEndId": "473",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Matchsticks to Square",
      "titleSlug": "matchsticks-to-square",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 47.15390127852239,
      "frontEndId": "474",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Ones and Zeroes",
      "titleSlug": "ones-and-zeroes",
      "topicTags": ["Array", "String", "Dynamic Programming"]
   },
   {
      "acRate": 37.00514811144147,
      "frontEndId": "475",
      "status": null,
      "difficulty": "Medium",
      "title": "Heaters",
      "titleSlug": "heaters",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 67.48799530175839,
      "frontEndId": "476",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Number Complement",
      "titleSlug": "number-complement",
      "topicTags": ["Bit Manipulation"]
   },
   {
      "acRate": 52.27206502568822,
      "frontEndId": "477",
      "status": null,
      "difficulty": "Medium",
      "title": "Total Hamming Distance",
      "titleSlug": "total-hamming-distance",
      "topicTags": ["Array", "Math", "Bit Manipulation"]
   },
   {
      "acRate": 39.55177188573773,
      "frontEndId": "478",
      "status": null,
      "difficulty": "Medium",
      "title": "Generate Random Point in a Circle",
      "titleSlug": "generate-random-point-in-a-circle",
      "topicTags": ["Math", "Geometry", "Rejection Sampling", "Randomized"]
   },
   {
      "acRate": 32.477846040599076,
      "frontEndId": "479",
      "status": null,
      "difficulty": "Hard",
      "title": "Largest Palindrome Product",
      "titleSlug": "largest-palindrome-product",
      "topicTags": ["Math"]
   },
   {
      "acRate": 39.85090305714388,
      "frontEndId": "480",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Sliding Window Median",
      "titleSlug": "sliding-window-median",
      "topicTags": [
         "Array",
         "Hash Table",
         "Sliding Window",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 50.91955933688966,
      "frontEndId": "481",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Magical String",
      "titleSlug": "magical-string",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 43.410756530514334,
      "frontEndId": "482",
      "status": null,
      "difficulty": "Easy",
      "title": "License Key Formatting",
      "titleSlug": "license-key-formatting",
      "topicTags": ["String"]
   },
   {
      "acRate": 39.41455572111992,
      "frontEndId": "483",
      "status": null,
      "difficulty": "Hard",
      "title": "Smallest Good Base",
      "titleSlug": "smallest-good-base",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 66.8792995622264,
      "frontEndId": "484",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Permutation",
      "titleSlug": "find-permutation",
      "topicTags": ["Array", "String", "Stack", "Greedy"]
   },
   {
      "acRate": 57.79127690998107,
      "frontEndId": "485",
      "status": null,
      "difficulty": "Easy",
      "title": "Max Consecutive Ones",
      "titleSlug": "max-consecutive-ones",
      "topicTags": ["Array"]
   },
   {
      "acRate": 55.434898772550376,
      "frontEndId": "486",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Predict the Winner",
      "titleSlug": "predict-the-winner",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Recursion",
         "Game Theory"
      ]
   },
   {
      "acRate": 49.87675269137728,
      "frontEndId": "487",
      "status": null,
      "difficulty": "Medium",
      "title": "Max Consecutive Ones II",
      "titleSlug": "max-consecutive-ones-ii",
      "topicTags": ["Array", "Dynamic Programming", "Sliding Window"]
   },
   {
      "acRate": 33.22315285671553,
      "frontEndId": "488",
      "status": null,
      "difficulty": "Hard",
      "title": "Zuma Game",
      "titleSlug": "zuma-game",
      "topicTags": [
         "String",
         "Dynamic Programming",
         "Stack",
         "Breadth-First Search",
         "Memoization"
      ]
   },
   {
      "acRate": 76.57038548265865,
      "frontEndId": "489",
      "status": null,
      "difficulty": "Hard",
      "title": "Robot Room Cleaner",
      "titleSlug": "robot-room-cleaner",
      "topicTags": ["Backtracking", "Interactive"]
   },
   {
      "acRate": 57.001287701543426,
      "frontEndId": "490",
      "status": null,
      "difficulty": "Medium",
      "title": "The Maze",
      "titleSlug": "the-maze",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 60.395615818518124,
      "frontEndId": "491",
      "status": null,
      "difficulty": "Medium",
      "title": "Non-decreasing Subsequences",
      "titleSlug": "non-decreasing-subsequences",
      "topicTags": ["Array", "Hash Table", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 56.12781693344251,
      "frontEndId": "492",
      "status": null,
      "difficulty": "Easy",
      "title": "Construct the Rectangle",
      "titleSlug": "construct-the-rectangle",
      "topicTags": ["Math"]
   },
   {
      "acRate": 30.4533257840579,
      "frontEndId": "493",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Reverse Pairs",
      "titleSlug": "reverse-pairs",
      "topicTags": [
         "Array",
         "Binary Search",
         "Divide and Conquer",
         "Binary Indexed Tree",
         "Segment Tree",
         "Merge Sort",
         "Ordered Set"
      ]
   },
   {
      "acRate": 46.10112266512098,
      "frontEndId": "494",
      "status": null,
      "difficulty": "Medium",
      "title": "Target Sum",
      "titleSlug": "target-sum",
      "topicTags": ["Array", "Dynamic Programming", "Backtracking"]
   },
   {
      "acRate": 56.50413250572576,
      "frontEndId": "495",
      "status": null,
      "difficulty": "Easy",
      "title": "Teemo Attacking",
      "titleSlug": "teemo-attacking",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 71.70297543515429,
      "frontEndId": "496",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Next Greater Element I",
      "titleSlug": "next-greater-element-i",
      "topicTags": ["Array", "Hash Table", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 39.5234743727747,
      "frontEndId": "497",
      "status": null,
      "difficulty": "Medium",
      "title": "Random Point in Non-overlapping Rectangles",
      "titleSlug": "random-point-in-non-overlapping-rectangles",
      "topicTags": [
         "Array",
         "Math",
         "Binary Search",
         "Reservoir Sampling",
         "Prefix Sum",
         "Ordered Set",
         "Randomized"
      ]
   },
   {
      "acRate": 58.72057525086648,
      "frontEndId": "498",
      "status": null,
      "difficulty": "Medium",
      "title": "Diagonal Traverse",
      "titleSlug": "diagonal-traverse",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 48.16185582340598,
      "frontEndId": "499",
      "status": null,
      "difficulty": "Hard",
      "title": "The Maze III",
      "titleSlug": "the-maze-iii",
      "topicTags": [
         "Array",
         "String",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Heap (Priority Queue)",
         "Matrix",
         "Shortest Path"
      ]
   },
   {
      "acRate": 70.06352200385571,
      "frontEndId": "500",
      "status": null,
      "difficulty": "Easy",
      "title": "Keyboard Row",
      "titleSlug": "keyboard-row",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 50.19890960812972,
      "frontEndId": "501",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Mode in Binary Search Tree",
      "titleSlug": "find-mode-in-binary-search-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 49.586378376334224,
      "frontEndId": "502",
      "status": "ac",
      "difficulty": "Hard",
      "title": "IPO",
      "titleSlug": "ipo",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 63.43503263623084,
      "frontEndId": "503",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Next Greater Element II",
      "titleSlug": "next-greater-element-ii",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 49.22272849102117,
      "frontEndId": "504",
      "status": null,
      "difficulty": "Easy",
      "title": "Base 7",
      "titleSlug": "base-7",
      "topicTags": ["Math"]
   },
   {
      "acRate": 53.154201948275684,
      "frontEndId": "505",
      "status": null,
      "difficulty": "Medium",
      "title": "The Maze II",
      "titleSlug": "the-maze-ii",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Heap (Priority Queue)",
         "Matrix",
         "Shortest Path"
      ]
   },
   {
      "acRate": 62.2913129598189,
      "frontEndId": "506",
      "status": null,
      "difficulty": "Easy",
      "title": "Relative Ranks",
      "titleSlug": "relative-ranks",
      "topicTags": ["Array", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 38.50972168515819,
      "frontEndId": "507",
      "status": null,
      "difficulty": "Easy",
      "title": "Perfect Number",
      "titleSlug": "perfect-number",
      "topicTags": ["Math"]
   },
   {
      "acRate": 65.64447473161289,
      "frontEndId": "508",
      "status": null,
      "difficulty": "Medium",
      "title": "Most Frequent Subtree Sum",
      "titleSlug": "most-frequent-subtree-sum",
      "topicTags": ["Hash Table", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 70.38245632781496,
      "frontEndId": "509",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Fibonacci Number",
      "titleSlug": "fibonacci-number",
      "topicTags": ["Math", "Dynamic Programming", "Recursion", "Memoization"]
   },
   {
      "acRate": 60.98085379616298,
      "frontEndId": "510",
      "status": null,
      "difficulty": "Medium",
      "title": "Inorder Successor in BST II",
      "titleSlug": "inorder-successor-in-bst-ii",
      "topicTags": ["Tree", "Binary Search Tree", "Binary Tree"]
   },
   {
      "acRate": 74.4280971706125,
      "frontEndId": "511",
      "status": null,
      "difficulty": "Easy",
      "title": "Game Play Analysis I",
      "titleSlug": "game-play-analysis-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 52.437987431410846,
      "frontEndId": "512",
      "status": null,
      "difficulty": "Easy",
      "title": "Game Play Analysis II",
      "titleSlug": "game-play-analysis-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 67.50543985536905,
      "frontEndId": "513",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Bottom Left Tree Value",
      "titleSlug": "find-bottom-left-tree-value",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 47.24622851532792,
      "frontEndId": "514",
      "status": null,
      "difficulty": "Hard",
      "title": "Freedom Trail",
      "titleSlug": "freedom-trail",
      "topicTags": [
         "String",
         "Dynamic Programming",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 64.47683260132081,
      "frontEndId": "515",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Largest Value in Each Tree Row",
      "titleSlug": "find-largest-value-in-each-tree-row",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 62.22593326170164,
      "frontEndId": "516",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Palindromic Subsequence",
      "titleSlug": "longest-palindromic-subsequence",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 40.79673196767749,
      "frontEndId": "517",
      "status": null,
      "difficulty": "Hard",
      "title": "Super Washing Machines",
      "titleSlug": "super-washing-machines",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 63.16622406940362,
      "frontEndId": "518",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Coin Change II",
      "titleSlug": "coin-change-ii",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 40.49390605742457,
      "frontEndId": "519",
      "status": null,
      "difficulty": "Medium",
      "title": "Random Flip Matrix",
      "titleSlug": "random-flip-matrix",
      "topicTags": ["Hash Table", "Math", "Reservoir Sampling", "Randomized"]
   },
   {
      "acRate": 56.691580306361,
      "frontEndId": "520",
      "status": null,
      "difficulty": "Easy",
      "title": "Detect Capital",
      "titleSlug": "detect-capital",
      "topicTags": ["String"]
   },
   {
      "acRate": 60.4730966865513,
      "frontEndId": "521",
      "status": null,
      "difficulty": "Easy",
      "title": "Longest Uncommon Subsequence I",
      "titleSlug": "longest-uncommon-subsequence-i",
      "topicTags": ["String"]
   },
   {
      "acRate": 40.861085157501336,
      "frontEndId": "522",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Uncommon Subsequence II",
      "titleSlug": "longest-uncommon-subsequence-ii",
      "topicTags": ["Array", "Hash Table", "Two Pointers", "String", "Sorting"]
   },
   {
      "acRate": 28.570632215866233,
      "frontEndId": "523",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Continuous Subarray Sum",
      "titleSlug": "continuous-subarray-sum",
      "topicTags": ["Array", "Hash Table", "Math", "Prefix Sum"]
   },
   {
      "acRate": 51.07136520350546,
      "frontEndId": "524",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Word in Dictionary through Deleting",
      "titleSlug": "longest-word-in-dictionary-through-deleting",
      "topicTags": ["Array", "Two Pointers", "String", "Sorting"]
   },
   {
      "acRate": 46.860211166839875,
      "frontEndId": "525",
      "status": null,
      "difficulty": "Medium",
      "title": "Contiguous Array",
      "titleSlug": "contiguous-array",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 64.2832427186783,
      "frontEndId": "526",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Beautiful Arrangement",
      "titleSlug": "beautiful-arrangement",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 60.77810657674397,
      "frontEndId": "527",
      "status": null,
      "difficulty": "Hard",
      "title": "Word Abbreviation",
      "titleSlug": "word-abbreviation",
      "topicTags": ["Array", "String", "Greedy", "Trie", "Sorting"]
   },
   {
      "acRate": 46.23507761203353,
      "frontEndId": "528",
      "status": null,
      "difficulty": "Medium",
      "title": "Random Pick with Weight",
      "titleSlug": "random-pick-with-weight",
      "topicTags": [
         "Array",
         "Math",
         "Binary Search",
         "Prefix Sum",
         "Randomized"
      ]
   },
   {
      "acRate": 66.090633498897,
      "frontEndId": "529",
      "status": null,
      "difficulty": "Medium",
      "title": "Minesweeper",
      "titleSlug": "minesweeper",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 58.63919657860278,
      "frontEndId": "530",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Absolute Difference in BST",
      "titleSlug": "minimum-absolute-difference-in-bst",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 62.15220390896271,
      "frontEndId": "531",
      "status": null,
      "difficulty": "Medium",
      "title": "Lonely Pixel I",
      "titleSlug": "lonely-pixel-i",
      "topicTags": ["Array", "Hash Table", "Matrix"]
   },
   {
      "acRate": 41.959732658949854,
      "frontEndId": "532",
      "status": null,
      "difficulty": "Medium",
      "title": "K-diff Pairs in an Array",
      "titleSlug": "k-diff-pairs-in-an-array",
      "topicTags": [
         "Array",
         "Hash Table",
         "Two Pointers",
         "Binary Search",
         "Sorting"
      ]
   },
   {
      "acRate": 48.49687394706301,
      "frontEndId": "533",
      "status": null,
      "difficulty": "Medium",
      "title": "Lonely Pixel II",
      "titleSlug": "lonely-pixel-ii",
      "topicTags": ["Array", "Hash Table", "Matrix"]
   },
   {
      "acRate": 81.07806254408652,
      "frontEndId": "534",
      "status": null,
      "difficulty": "Medium",
      "title": "Game Play Analysis III",
      "titleSlug": "game-play-analysis-iii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 86.1476927687845,
      "frontEndId": "535",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Encode and Decode TinyURL",
      "titleSlug": "encode-and-decode-tinyurl",
      "topicTags": ["Hash Table", "String", "Design", "Hash Function"]
   },
   {
      "acRate": 56.39319244932488,
      "frontEndId": "536",
      "status": null,
      "difficulty": "Medium",
      "title": "Construct Binary Tree from String",
      "titleSlug": "construct-binary-tree-from-string",
      "topicTags": ["String", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 71.54615209418121,
      "frontEndId": "537",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Complex Number Multiplication",
      "titleSlug": "complex-number-multiplication",
      "topicTags": ["Math", "String", "Simulation"]
   },
   {
      "acRate": 68.47095893494077,
      "frontEndId": "538",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Convert BST to Greater Tree",
      "titleSlug": "convert-bst-to-greater-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 56.536416788385694,
      "frontEndId": "539",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Time Difference",
      "titleSlug": "minimum-time-difference",
      "topicTags": ["Array", "Math", "String", "Sorting"]
   },
   {
      "acRate": 58.99288996791815,
      "frontEndId": "540",
      "status": null,
      "difficulty": "Medium",
      "title": "Single Element in a Sorted Array",
      "titleSlug": "single-element-in-a-sorted-array",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 50.395998139745814,
      "frontEndId": "541",
      "status": null,
      "difficulty": "Easy",
      "title": "Reverse String II",
      "titleSlug": "reverse-string-ii",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 47.73558936728338,
      "frontEndId": "542",
      "status": null,
      "difficulty": "Medium",
      "title": "01 Matrix",
      "titleSlug": "01-matrix",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 58.101266811339116,
      "frontEndId": "543",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Diameter of Binary Tree",
      "titleSlug": "diameter-of-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 77.07945556072592,
      "frontEndId": "544",
      "status": null,
      "difficulty": "Medium",
      "title": "Output Contest Matches",
      "titleSlug": "output-contest-matches",
      "topicTags": ["String", "Recursion", "Simulation"]
   },
   {
      "acRate": 44.76872307068226,
      "frontEndId": "545",
      "status": null,
      "difficulty": "Medium",
      "title": "Boundary of Binary Tree",
      "titleSlug": "boundary-of-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 47.69004315487806,
      "frontEndId": "546",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Remove Boxes",
      "titleSlug": "remove-boxes",
      "topicTags": ["Array", "Dynamic Programming", "Memoization"]
   },
   {
      "acRate": 65.54420318870906,
      "frontEndId": "547",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Provinces",
      "titleSlug": "number-of-provinces",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 50.116961551548144,
      "frontEndId": "548",
      "status": null,
      "difficulty": "Hard",
      "title": "Split Array with Equal Sum",
      "titleSlug": "split-array-with-equal-sum",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 49.43812728156543,
      "frontEndId": "549",
      "status": null,
      "difficulty": "Medium",
      "title": "Binary Tree Longest Consecutive Sequence II",
      "titleSlug": "binary-tree-longest-consecutive-sequence-ii",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 36.13860799728344,
      "frontEndId": "550",
      "status": null,
      "difficulty": "Medium",
      "title": "Game Play Analysis IV",
      "titleSlug": "game-play-analysis-iv",
      "topicTags": ["Database"]
   },
   {
      "acRate": 48.458918314249445,
      "frontEndId": "551",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Student Attendance Record I",
      "titleSlug": "student-attendance-record-i",
      "topicTags": ["String"]
   },
   {
      "acRate": 42.093718977220895,
      "frontEndId": "552",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Student Attendance Record II",
      "titleSlug": "student-attendance-record-ii",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 60.39417281722371,
      "frontEndId": "553",
      "status": null,
      "difficulty": "Medium",
      "title": "Optimal Division",
      "titleSlug": "optimal-division",
      "topicTags": ["Array", "Math", "Dynamic Programming"]
   },
   {
      "acRate": 54.21309638853018,
      "frontEndId": "554",
      "status": null,
      "difficulty": "Medium",
      "title": "Brick Wall",
      "titleSlug": "brick-wall",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 43.56073211314476,
      "frontEndId": "555",
      "status": null,
      "difficulty": "Medium",
      "title": "Split Concatenated Strings",
      "titleSlug": "split-concatenated-strings",
      "topicTags": ["Array", "String", "Greedy"]
   },
   {
      "acRate": 33.92243495336279,
      "frontEndId": "556",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Next Greater Element III",
      "titleSlug": "next-greater-element-iii",
      "topicTags": ["Math", "Two Pointers", "String"]
   },
   {
      "acRate": 82.88014973467945,
      "frontEndId": "557",
      "status": null,
      "difficulty": "Easy",
      "title": "Reverse Words in a String III",
      "titleSlug": "reverse-words-in-a-string-iii",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 48.99526338452706,
      "frontEndId": "558",
      "status": null,
      "difficulty": "Medium",
      "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
      "titleSlug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
      "topicTags": ["Divide and Conquer", "Tree"]
   },
   {
      "acRate": 71.84668096087641,
      "frontEndId": "559",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Depth of N-ary Tree",
      "titleSlug": "maximum-depth-of-n-ary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Breadth-First Search"]
   },
   {
      "acRate": 43.242652589155206,
      "frontEndId": "560",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Subarray Sum Equals K",
      "titleSlug": "subarray-sum-equals-k",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 77.9228390037441,
      "frontEndId": "561",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Array Partition",
      "titleSlug": "array-partition",
      "topicTags": ["Array", "Greedy", "Sorting", "Counting Sort"]
   },
   {
      "acRate": 50.31658669996539,
      "frontEndId": "562",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Line of Consecutive One in Matrix",
      "titleSlug": "longest-line-of-consecutive-one-in-matrix",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 60.912110959721986,
      "frontEndId": "563",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Binary Tree Tilt",
      "titleSlug": "binary-tree-tilt",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 21.795115797258276,
      "frontEndId": "564",
      "status": null,
      "difficulty": "Hard",
      "title": "Find the Closest Palindrome",
      "titleSlug": "find-the-closest-palindrome",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 56.3313742204675,
      "frontEndId": "565",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Array Nesting",
      "titleSlug": "array-nesting",
      "topicTags": ["Array", "Depth-First Search"]
   },
   {
      "acRate": 62.989939518278206,
      "frontEndId": "566",
      "status": null,
      "difficulty": "Easy",
      "title": "Reshape the Matrix",
      "titleSlug": "reshape-the-matrix",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 44.17814032327859,
      "frontEndId": "567",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Permutation in String",
      "titleSlug": "permutation-in-string",
      "topicTags": ["Hash Table", "Two Pointers", "String", "Sliding Window"]
   },
   {
      "acRate": 45.34689483648242,
      "frontEndId": "568",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Vacation Days",
      "titleSlug": "maximum-vacation-days",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 66.43624914045819,
      "frontEndId": "569",
      "status": null,
      "difficulty": "Hard",
      "title": "Median Employee Salary",
      "titleSlug": "median-employee-salary",
      "topicTags": ["Database"]
   },
   {
      "acRate": 55.19361407509978,
      "frontEndId": "570",
      "status": null,
      "difficulty": "Medium",
      "title": "Managers with at Least 5 Direct Reports",
      "titleSlug": "managers-with-at-least-5-direct-reports",
      "topicTags": ["Database"]
   },
   {
      "acRate": 42.705509650870376,
      "frontEndId": "571",
      "status": null,
      "difficulty": "Hard",
      "title": "Find Median Given Frequency of Numbers",
      "titleSlug": "find-median-given-frequency-of-numbers",
      "topicTags": ["Database"]
   },
   {
      "acRate": 47.07231568207796,
      "frontEndId": "572",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Subtree of Another Tree",
      "titleSlug": "subtree-of-another-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "String Matching",
         "Binary Tree",
         "Hash Function"
      ]
   },
   {
      "acRate": 55.32464412277014,
      "frontEndId": "573",
      "status": null,
      "difficulty": "Medium",
      "title": "Squirrel Simulation",
      "titleSlug": "squirrel-simulation",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 60.08267887645673,
      "frontEndId": "574",
      "status": null,
      "difficulty": "Medium",
      "title": "Winning Candidate",
      "titleSlug": "winning-candidate",
      "topicTags": ["Database"]
   },
   {
      "acRate": 66.97485446208515,
      "frontEndId": "575",
      "status": null,
      "difficulty": "Easy",
      "title": "Distribute Candies",
      "titleSlug": "distribute-candies",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 44.239739061512665,
      "frontEndId": "576",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Out of Boundary Paths",
      "titleSlug": "out-of-boundary-paths",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 73.79579194702552,
      "frontEndId": "577",
      "status": null,
      "difficulty": "Easy",
      "title": "Employee Bonus",
      "titleSlug": "employee-bonus",
      "topicTags": ["Database"]
   },
   {
      "acRate": 40.594796127571655,
      "frontEndId": "578",
      "status": null,
      "difficulty": "Medium",
      "title": "Get Highest Answer Rate Question",
      "titleSlug": "get-highest-answer-rate-question",
      "topicTags": ["Database"]
   },
   {
      "acRate": 45.87543529143118,
      "frontEndId": "579",
      "status": null,
      "difficulty": "Hard",
      "title": "Find Cumulative Salary of an Employee",
      "titleSlug": "find-cumulative-salary-of-an-employee",
      "topicTags": ["Database"]
   },
   {
      "acRate": 58.672384859220585,
      "frontEndId": "580",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Student Number in Departments",
      "titleSlug": "count-student-number-in-departments",
      "topicTags": ["Database"]
   },
   {
      "acRate": 36.61303724375852,
      "frontEndId": "581",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Shortest Unsorted Continuous Subarray",
      "titleSlug": "shortest-unsorted-continuous-subarray",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Stack",
         "Greedy",
         "Sorting",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 69.01238860011362,
      "frontEndId": "582",
      "status": null,
      "difficulty": "Medium",
      "title": "Kill Process",
      "titleSlug": "kill-process",
      "topicTags": [
         "Array",
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 60.944500135719494,
      "frontEndId": "583",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Delete Operation for Two Strings",
      "titleSlug": "delete-operation-for-two-strings",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 68.92215081753844,
      "frontEndId": "584",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Customer Referee",
      "titleSlug": "find-customer-referee",
      "topicTags": ["Database"]
   },
   {
      "acRate": 47.57128560546087,
      "frontEndId": "585",
      "status": null,
      "difficulty": "Medium",
      "title": "Investments in 2016",
      "titleSlug": "investments-in-2016",
      "topicTags": ["Database"]
   },
   {
      "acRate": 65.60354367442336,
      "frontEndId": "586",
      "status": null,
      "difficulty": "Easy",
      "title": "Customer Placing the Largest Number of Orders",
      "titleSlug": "customer-placing-the-largest-number-of-orders",
      "topicTags": ["Database"]
   },
   {
      "acRate": 51.899733172986586,
      "frontEndId": "587",
      "status": null,
      "difficulty": "Hard",
      "title": "Erect the Fence",
      "titleSlug": "erect-the-fence",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 48.39875950058651,
      "frontEndId": "588",
      "status": null,
      "difficulty": "Hard",
      "title": "Design In-Memory File System",
      "titleSlug": "design-in-memory-file-system",
      "topicTags": ["Hash Table", "String", "Design", "Trie"]
   },
   {
      "acRate": 75.65176831198254,
      "frontEndId": "589",
      "status": null,
      "difficulty": "Easy",
      "title": "N-ary Tree Preorder Traversal",
      "titleSlug": "n-ary-tree-preorder-traversal",
      "topicTags": ["Stack", "Tree", "Depth-First Search"]
   },
   {
      "acRate": 77.58436551661262,
      "frontEndId": "590",
      "status": null,
      "difficulty": "Easy",
      "title": "N-ary Tree Postorder Traversal",
      "titleSlug": "n-ary-tree-postorder-traversal",
      "topicTags": ["Stack", "Tree", "Depth-First Search"]
   },
   {
      "acRate": 37.640894080401736,
      "frontEndId": "591",
      "status": null,
      "difficulty": "Hard",
      "title": "Tag Validator",
      "titleSlug": "tag-validator",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 52.77249633762429,
      "frontEndId": "592",
      "status": null,
      "difficulty": "Medium",
      "title": "Fraction Addition and Subtraction",
      "titleSlug": "fraction-addition-and-subtraction",
      "topicTags": ["Math", "String", "Simulation"]
   },
   {
      "acRate": 43.88173048613637,
      "frontEndId": "593",
      "status": null,
      "difficulty": "Medium",
      "title": "Valid Square",
      "titleSlug": "valid-square",
      "topicTags": ["Math", "Geometry"]
   },
   {
      "acRate": 54.01652331371661,
      "frontEndId": "594",
      "status": null,
      "difficulty": "Easy",
      "title": "Longest Harmonious Subsequence",
      "titleSlug": "longest-harmonious-subsequence",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 68.59850530545481,
      "frontEndId": "595",
      "status": null,
      "difficulty": "Easy",
      "title": "Big Countries",
      "titleSlug": "big-countries",
      "topicTags": ["Database"]
   },
   {
      "acRate": 51.19737672933072,
      "frontEndId": "596",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Classes More Than 5 Students",
      "titleSlug": "classes-more-than-5-students",
      "topicTags": ["Database"]
   },
   {
      "acRate": 42.13451354844859,
      "frontEndId": "597",
      "status": null,
      "difficulty": "Easy",
      "title": "Friend Requests I: Overall Acceptance Rate",
      "titleSlug": "friend-requests-i-overall-acceptance-rate",
      "topicTags": ["Database"]
   },
   {
      "acRate": 55.67420324643616,
      "frontEndId": "598",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Range Addition II",
      "titleSlug": "range-addition-ii",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 54.325633087243,
      "frontEndId": "599",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Index Sum of Two Lists",
      "titleSlug": "minimum-index-sum-of-two-lists",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 39.617351323478864,
      "frontEndId": "600",
      "status": null,
      "difficulty": "Hard",
      "title": "Non-negative Integers without Consecutive Ones",
      "titleSlug": "non-negative-integers-without-consecutive-ones",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 48.5897308570861,
      "frontEndId": "601",
      "status": null,
      "difficulty": "Hard",
      "title": "Human Traffic of Stadium",
      "titleSlug": "human-traffic-of-stadium",
      "topicTags": ["Database"]
   },
   {
      "acRate": 57.150707036982936,
      "frontEndId": "602",
      "status": null,
      "difficulty": "Medium",
      "title": "Friend Requests II: Who Has the Most Friends",
      "titleSlug": "friend-requests-ii-who-has-the-most-friends",
      "topicTags": ["Database"]
   },
   {
      "acRate": 66.60955580125419,
      "frontEndId": "603",
      "status": null,
      "difficulty": "Easy",
      "title": "Consecutive Available Seats",
      "titleSlug": "consecutive-available-seats",
      "topicTags": ["Database"]
   },
   {
      "acRate": 39.61736477467743,
      "frontEndId": "604",
      "status": null,
      "difficulty": "Easy",
      "title": "Design Compressed String Iterator",
      "titleSlug": "design-compressed-string-iterator",
      "topicTags": ["Array", "Hash Table", "String", "Design", "Iterator"]
   },
   {
      "acRate": 30.04634789038984,
      "frontEndId": "605",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Can Place Flowers",
      "titleSlug": "can-place-flowers",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 64.74182499950587,
      "frontEndId": "606",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Construct String from Binary Tree",
      "titleSlug": "construct-string-from-binary-tree",
      "topicTags": ["String", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 66.34561162114001,
      "frontEndId": "607",
      "status": null,
      "difficulty": "Easy",
      "title": "Sales Person",
      "titleSlug": "sales-person",
      "topicTags": ["Database"]
   },
   {
      "acRate": 71.53810528482478,
      "frontEndId": "608",
      "status": null,
      "difficulty": "Medium",
      "title": "Tree Node",
      "titleSlug": "tree-node",
      "topicTags": ["Database"]
   },
   {
      "acRate": 67.61871104542826,
      "frontEndId": "609",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Duplicate File in System",
      "titleSlug": "find-duplicate-file-in-system",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 70.58578250050441,
      "frontEndId": "610",
      "status": null,
      "difficulty": "Easy",
      "title": "Triangle Judgement",
      "titleSlug": "triangle-judgement",
      "topicTags": ["Database"]
   },
   {
      "acRate": 50.76301310933502,
      "frontEndId": "611",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Valid Triangle Number",
      "titleSlug": "valid-triangle-number",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Greedy",
         "Sorting"
      ]
   },
   {
      "acRate": 62.16282013828026,
      "frontEndId": "612",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest Distance in a Plane",
      "titleSlug": "shortest-distance-in-a-plane",
      "topicTags": ["Database"]
   },
   {
      "acRate": 80.47680412371135,
      "frontEndId": "613",
      "status": null,
      "difficulty": "Easy",
      "title": "Shortest Distance in a Line",
      "titleSlug": "shortest-distance-in-a-line",
      "topicTags": ["Database"]
   },
   {
      "acRate": 37.889262771489754,
      "frontEndId": "614",
      "status": null,
      "difficulty": "Medium",
      "title": "Second Degree Follower",
      "titleSlug": "second-degree-follower",
      "topicTags": ["Database"]
   },
   {
      "acRate": 55.981277164827816,
      "frontEndId": "615",
      "status": null,
      "difficulty": "Hard",
      "title": "Average Salary: Departments VS Company",
      "titleSlug": "average-salary-departments-vs-company",
      "topicTags": ["Database"]
   },
   {
      "acRate": 49.22479729884925,
      "frontEndId": "616",
      "status": null,
      "difficulty": "Medium",
      "title": "Add Bold Tag in String",
      "titleSlug": "add-bold-tag-in-string",
      "topicTags": ["Array", "Hash Table", "String", "Trie", "String Matching"]
   },
   {
      "acRate": 78.76700554579247,
      "frontEndId": "617",
      "status": null,
      "difficulty": "Easy",
      "title": "Merge Two Binary Trees",
      "titleSlug": "merge-two-binary-trees",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 63.712408463341916,
      "frontEndId": "618",
      "status": null,
      "difficulty": "Hard",
      "title": "Students Report By Geography",
      "titleSlug": "students-report-by-geography",
      "topicTags": ["Database"]
   },
   {
      "acRate": 56.55640356196098,
      "frontEndId": "619",
      "status": null,
      "difficulty": "Easy",
      "title": "Biggest Single Number",
      "titleSlug": "biggest-single-number",
      "topicTags": ["Database"]
   },
   {
      "acRate": 72.64596169935426,
      "frontEndId": "620",
      "status": null,
      "difficulty": "Easy",
      "title": "Not Boring Movies",
      "titleSlug": "not-boring-movies",
      "topicTags": ["Database"]
   },
   {
      "acRate": 57.464327923844394,
      "frontEndId": "621",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Task Scheduler",
      "titleSlug": "task-scheduler",
      "topicTags": [
         "Array",
         "Hash Table",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)",
         "Counting"
      ]
   },
   {
      "acRate": 51.33007298063552,
      "frontEndId": "622",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Circular Queue",
      "titleSlug": "design-circular-queue",
      "topicTags": ["Array", "Linked List", "Design", "Queue"]
   },
   {
      "acRate": 59.5170789163722,
      "frontEndId": "623",
      "status": null,
      "difficulty": "Medium",
      "title": "Add One Row to Tree",
      "titleSlug": "add-one-row-to-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 41.507125878924704,
      "frontEndId": "624",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Distance in Arrays",
      "titleSlug": "maximum-distance-in-arrays",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 33.51871657754011,
      "frontEndId": "625",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Factorization",
      "titleSlug": "minimum-factorization",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 68.50092604078,
      "frontEndId": "626",
      "status": null,
      "difficulty": "Medium",
      "title": "Exchange Seats",
      "titleSlug": "exchange-seats",
      "topicTags": ["Database"]
   },
   {
      "acRate": 82.97201116128763,
      "frontEndId": "627",
      "status": null,
      "difficulty": "Easy",
      "title": "Swap Salary",
      "titleSlug": "swap-salary",
      "topicTags": ["Database"]
   },
   {
      "acRate": 45.30893856246678,
      "frontEndId": "628",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Maximum Product of Three Numbers",
      "titleSlug": "maximum-product-of-three-numbers",
      "topicTags": ["Array", "Math", "Sorting"]
   },
   {
      "acRate": 42.58507381745788,
      "frontEndId": "629",
      "status": "ac",
      "difficulty": "Hard",
      "title": "K Inverse Pairs Array",
      "titleSlug": "k-inverse-pairs-array",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 40.097800435677115,
      "frontEndId": "630",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Course Schedule III",
      "titleSlug": "course-schedule-iii",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 43.56051634296542,
      "frontEndId": "631",
      "status": null,
      "difficulty": "Hard",
      "title": "Design Excel Sum Formula",
      "titleSlug": "design-excel-sum-formula",
      "topicTags": ["Graph", "Design", "Topological Sort"]
   },
   {
      "acRate": 61.9387788724505,
      "frontEndId": "632",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Smallest Range Covering Elements from K Lists",
      "titleSlug": "smallest-range-covering-elements-from-k-lists",
      "topicTags": [
         "Array",
         "Hash Table",
         "Greedy",
         "Sliding Window",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 34.07236898239002,
      "frontEndId": "633",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sum of Square Numbers",
      "titleSlug": "sum-of-square-numbers",
      "topicTags": ["Math", "Two Pointers", "Binary Search"]
   },
   {
      "acRate": 42.041150978018976,
      "frontEndId": "634",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Derangement of An Array",
      "titleSlug": "find-the-derangement-of-an-array",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 61.951726400991724,
      "frontEndId": "635",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Log Storage System",
      "titleSlug": "design-log-storage-system",
      "topicTags": ["Hash Table", "String", "Design", "Ordered Set"]
   },
   {
      "acRate": 61.43988152873497,
      "frontEndId": "636",
      "status": null,
      "difficulty": "Medium",
      "title": "Exclusive Time of Functions",
      "titleSlug": "exclusive-time-of-functions",
      "topicTags": ["Array", "Stack"]
   },
   {
      "acRate": 71.96385897576126,
      "frontEndId": "637",
      "status": null,
      "difficulty": "Easy",
      "title": "Average of Levels in Binary Tree",
      "titleSlug": "average-of-levels-in-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 52.40513418903151,
      "frontEndId": "638",
      "status": null,
      "difficulty": "Medium",
      "title": "Shopping Offers",
      "titleSlug": "shopping-offers",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Memoization",
         "Bitmask"
      ]
   },
   {
      "acRate": 30.492816260289608,
      "frontEndId": "639",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Decode Ways II",
      "titleSlug": "decode-ways-ii",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 43.579362486582355,
      "frontEndId": "640",
      "status": null,
      "difficulty": "Medium",
      "title": "Solve the Equation",
      "titleSlug": "solve-the-equation",
      "topicTags": ["Math", "String", "Simulation"]
   },
   {
      "acRate": 56.80980135601285,
      "frontEndId": "641",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Circular Deque",
      "titleSlug": "design-circular-deque",
      "topicTags": ["Array", "Linked List", "Design", "Queue"]
   },
   {
      "acRate": 48.66778460965158,
      "frontEndId": "642",
      "status": null,
      "difficulty": "Hard",
      "title": "Design Search Autocomplete System",
      "titleSlug": "design-search-autocomplete-system",
      "topicTags": ["String", "Design", "Trie", "Data Stream"]
   },
   {
      "acRate": 43.08816371774781,
      "frontEndId": "643",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Maximum Average Subarray I",
      "titleSlug": "maximum-average-subarray-i",
      "topicTags": ["Array", "Sliding Window"]
   },
   {
      "acRate": 36.344475117511,
      "frontEndId": "644",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Average Subarray II",
      "titleSlug": "maximum-average-subarray-ii",
      "topicTags": ["Array", "Binary Search", "Prefix Sum"]
   },
   {
      "acRate": 42.50002207563997,
      "frontEndId": "645",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Set Mismatch",
      "titleSlug": "set-mismatch",
      "topicTags": ["Array", "Hash Table", "Bit Manipulation", "Sorting"]
   },
   {
      "acRate": 59.50498577481335,
      "frontEndId": "646",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Length of Pair Chain",
      "titleSlug": "maximum-length-of-pair-chain",
      "topicTags": ["Array", "Dynamic Programming", "Greedy", "Sorting"]
   },
   {
      "acRate": 67.84812472989881,
      "frontEndId": "647",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Palindromic Substrings",
      "titleSlug": "palindromic-substrings",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 62.71668185512672,
      "frontEndId": "648",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Replace Words",
      "titleSlug": "replace-words",
      "topicTags": ["Array", "Hash Table", "String", "Trie"]
   },
   {
      "acRate": 47.38904401916048,
      "frontEndId": "649",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Dota2 Senate",
      "titleSlug": "dota2-senate",
      "topicTags": ["String", "Greedy", "Queue"]
   },
   {
      "acRate": 53.78793420220387,
      "frontEndId": "650",
      "status": "ac",
      "difficulty": "Medium",
      "title": "2 Keys Keyboard",
      "titleSlug": "2-keys-keyboard",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 56.0645434217683,
      "frontEndId": "651",
      "status": null,
      "difficulty": "Medium",
      "title": "4 Keys Keyboard",
      "titleSlug": "4-keys-keyboard",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 59.18674005297968,
      "frontEndId": "652",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Duplicate Subtrees",
      "titleSlug": "find-duplicate-subtrees",
      "topicTags": ["Hash Table", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 61.11096656693118,
      "frontEndId": "653",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Two Sum IV - Input is a BST",
      "titleSlug": "two-sum-iv-input-is-a-bst",
      "topicTags": [
         "Hash Table",
         "Two Pointers",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 85.08173146363059,
      "frontEndId": "654",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Binary Tree",
      "titleSlug": "maximum-binary-tree",
      "topicTags": [
         "Array",
         "Divide and Conquer",
         "Stack",
         "Tree",
         "Monotonic Stack",
         "Binary Tree"
      ]
   },
   {
      "acRate": 62.61653231863015,
      "frontEndId": "655",
      "status": null,
      "difficulty": "Medium",
      "title": "Print Binary Tree",
      "titleSlug": "print-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 31.965477935189707,
      "frontEndId": "656",
      "status": null,
      "difficulty": "Hard",
      "title": "Coin Path",
      "titleSlug": "coin-path",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 75.45003633268081,
      "frontEndId": "657",
      "status": null,
      "difficulty": "Easy",
      "title": "Robot Return to Origin",
      "titleSlug": "robot-return-to-origin",
      "topicTags": ["String", "Simulation"]
   },
   {
      "acRate": 46.94956262056353,
      "frontEndId": "658",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find K Closest Elements",
      "titleSlug": "find-k-closest-elements",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Sliding Window",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 50.89833152605504,
      "frontEndId": "659",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Split Array into Consecutive Subsequences",
      "titleSlug": "split-array-into-consecutive-subsequences",
      "topicTags": ["Array", "Hash Table", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 57.33318772523752,
      "frontEndId": "660",
      "status": null,
      "difficulty": "Hard",
      "title": "Remove 9",
      "titleSlug": "remove-9",
      "topicTags": ["Math"]
   },
   {
      "acRate": 55.894705099256406,
      "frontEndId": "661",
      "status": null,
      "difficulty": "Easy",
      "title": "Image Smoother",
      "titleSlug": "image-smoother",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 42.66159193127242,
      "frontEndId": "662",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Width of Binary Tree",
      "titleSlug": "maximum-width-of-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 41.43183130343937,
      "frontEndId": "663",
      "status": null,
      "difficulty": "Medium",
      "title": "Equal Tree Partition",
      "titleSlug": "equal-tree-partition",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 55.049209056343976,
      "frontEndId": "664",
      "status": null,
      "difficulty": "Hard",
      "title": "Strange Printer",
      "titleSlug": "strange-printer",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 24.466861236091557,
      "frontEndId": "665",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Non-decreasing Array",
      "titleSlug": "non-decreasing-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 60.202398246866764,
      "frontEndId": "666",
      "status": null,
      "difficulty": "Medium",
      "title": "Path Sum IV",
      "titleSlug": "path-sum-iv",
      "topicTags": [
         "Array",
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 59.99861435070783,
      "frontEndId": "667",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Beautiful Arrangement II",
      "titleSlug": "beautiful-arrangement-ii",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 51.53844823411394,
      "frontEndId": "668",
      "status": null,
      "difficulty": "Hard",
      "title": "Kth Smallest Number in Multiplication Table",
      "titleSlug": "kth-smallest-number-in-multiplication-table",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 66.29588644278041,
      "frontEndId": "669",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Trim a Binary Search Tree",
      "titleSlug": "trim-a-binary-search-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 47.97463660464013,
      "frontEndId": "670",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Swap",
      "titleSlug": "maximum-swap",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 44.26211213395762,
      "frontEndId": "671",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Second Minimum Node In a Binary Tree",
      "titleSlug": "second-minimum-node-in-a-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 50.35696377832431,
      "frontEndId": "672",
      "status": null,
      "difficulty": "Medium",
      "title": "Bulb Switcher II",
      "titleSlug": "bulb-switcher-ii",
      "topicTags": [
         "Math",
         "Bit Manipulation",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 47.58733095858897,
      "frontEndId": "673",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Longest Increasing Subsequence",
      "titleSlug": "number-of-longest-increasing-subsequence",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Binary Indexed Tree",
         "Segment Tree"
      ]
   },
   {
      "acRate": 49.61562311353491,
      "frontEndId": "674",
      "status": null,
      "difficulty": "Easy",
      "title": "Longest Continuous Increasing Subsequence",
      "titleSlug": "longest-continuous-increasing-subsequence",
      "topicTags": ["Array"]
   },
   {
      "acRate": 34.114560006744405,
      "frontEndId": "675",
      "status": null,
      "difficulty": "Hard",
      "title": "Cut Off Trees for Golf Event",
      "titleSlug": "cut-off-trees-for-golf-event",
      "topicTags": [
         "Array",
         "Breadth-First Search",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 56.965516193486145,
      "frontEndId": "676",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Implement Magic Dictionary",
      "titleSlug": "implement-magic-dictionary",
      "topicTags": [
         "Hash Table",
         "String",
         "Depth-First Search",
         "Design",
         "Trie"
      ]
   },
   {
      "acRate": 56.664476634441904,
      "frontEndId": "677",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Map Sum Pairs",
      "titleSlug": "map-sum-pairs",
      "topicTags": ["Hash Table", "String", "Design", "Trie"]
   },
   {
      "acRate": 34.47691528820398,
      "frontEndId": "678",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Valid Parenthesis String",
      "titleSlug": "valid-parenthesis-string",
      "topicTags": ["String", "Dynamic Programming", "Stack", "Greedy"]
   },
   {
      "acRate": 49.23945470842419,
      "frontEndId": "679",
      "status": null,
      "difficulty": "Hard",
      "title": "24 Game",
      "titleSlug": "24-game",
      "topicTags": ["Array", "Math", "Backtracking"]
   },
   {
      "acRate": 39.69485385999068,
      "frontEndId": "680",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Valid Palindrome II",
      "titleSlug": "valid-palindrome-ii",
      "topicTags": ["Two Pointers", "String", "Greedy"]
   },
   {
      "acRate": 46.425442908986895,
      "frontEndId": "681",
      "status": null,
      "difficulty": "Medium",
      "title": "Next Closest Time",
      "titleSlug": "next-closest-time",
      "topicTags": ["String", "Enumeration"]
   },
   {
      "acRate": 75.17665600423041,
      "frontEndId": "682",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Baseball Game",
      "titleSlug": "baseball-game",
      "topicTags": ["Array", "Stack", "Simulation"]
   },
   {
      "acRate": 36.99537179882752,
      "frontEndId": "683",
      "status": null,
      "difficulty": "Hard",
      "title": "K Empty Slots",
      "titleSlug": "k-empty-slots",
      "topicTags": [
         "Array",
         "Binary Indexed Tree",
         "Sliding Window",
         "Ordered Set"
      ]
   },
   {
      "acRate": 62.504008373719586,
      "frontEndId": "684",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Redundant Connection",
      "titleSlug": "redundant-connection",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 34.14165993643868,
      "frontEndId": "685",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Redundant Connection II",
      "titleSlug": "redundant-connection-ii",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 34.48374351406674,
      "frontEndId": "686",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Repeated String Match",
      "titleSlug": "repeated-string-match",
      "topicTags": ["String", "String Matching"]
   },
   {
      "acRate": 40.82760010846533,
      "frontEndId": "687",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Univalue Path",
      "titleSlug": "longest-univalue-path",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 56.194285051875035,
      "frontEndId": "688",
      "status": null,
      "difficulty": "Medium",
      "title": "Knight Probability in Chessboard",
      "titleSlug": "knight-probability-in-chessboard",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 49.15232623219106,
      "frontEndId": "689",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
      "titleSlug": "maximum-sum-of-3-non-overlapping-subarrays",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 66.14347034468173,
      "frontEndId": "690",
      "status": null,
      "difficulty": "Medium",
      "title": "Employee Importance",
      "titleSlug": "employee-importance",
      "topicTags": ["Hash Table", "Depth-First Search", "Breadth-First Search"]
   },
   {
      "acRate": 46.702075882937976,
      "frontEndId": "691",
      "status": null,
      "difficulty": "Hard",
      "title": "Stickers to Spell Word",
      "titleSlug": "stickers-to-spell-word",
      "topicTags": [
         "Array",
         "String",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 57.52855700948416,
      "frontEndId": "692",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Top K Frequent Words",
      "titleSlug": "top-k-frequent-words",
      "topicTags": [
         "Hash Table",
         "String",
         "Trie",
         "Sorting",
         "Heap (Priority Queue)",
         "Bucket Sort",
         "Counting"
      ]
   },
   {
      "acRate": 61.87993242732155,
      "frontEndId": "693",
      "status": null,
      "difficulty": "Easy",
      "title": "Binary Number with Alternating Bits",
      "titleSlug": "binary-number-with-alternating-bits",
      "topicTags": ["Bit Manipulation"]
   },
   {
      "acRate": 60.96021861203472,
      "frontEndId": "694",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Distinct Islands",
      "titleSlug": "number-of-distinct-islands",
      "topicTags": [
         "Hash Table",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Hash Function"
      ]
   },
   {
      "acRate": 71.85292732695025,
      "frontEndId": "695",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Max Area of Island",
      "titleSlug": "max-area-of-island",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 65.45424720635792,
      "frontEndId": "696",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Count Binary Substrings",
      "titleSlug": "count-binary-substrings",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 56.119419365645996,
      "frontEndId": "697",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Degree of an Array",
      "titleSlug": "degree-of-an-array",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 38.87643864892236,
      "frontEndId": "698",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Partition to K Equal Sum Subsets",
      "titleSlug": "partition-to-k-equal-sum-subsets",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Memoization",
         "Bitmask"
      ]
   },
   {
      "acRate": 44.77448946161407,
      "frontEndId": "699",
      "status": null,
      "difficulty": "Hard",
      "title": "Falling Squares",
      "titleSlug": "falling-squares",
      "topicTags": ["Array", "Segment Tree", "Ordered Set"]
   },
   {
      "acRate": 78.73799593213357,
      "frontEndId": "700",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Search in a Binary Search Tree",
      "titleSlug": "search-in-a-binary-search-tree",
      "topicTags": ["Tree", "Binary Search Tree", "Binary Tree"]
   },
   {
      "acRate": 73.89401118264614,
      "frontEndId": "701",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Insert into a Binary Search Tree",
      "titleSlug": "insert-into-a-binary-search-tree",
      "topicTags": ["Tree", "Binary Search Tree", "Binary Tree"]
   },
   {
      "acRate": 71.67875769577664,
      "frontEndId": "702",
      "status": null,
      "difficulty": "Medium",
      "title": "Search in a Sorted Array of Unknown Size",
      "titleSlug": "search-in-a-sorted-array-of-unknown-size",
      "topicTags": ["Array", "Binary Search", "Interactive"]
   },
   {
      "acRate": 56.60765546744321,
      "frontEndId": "703",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Kth Largest Element in a Stream",
      "titleSlug": "kth-largest-element-in-a-stream",
      "topicTags": [
         "Tree",
         "Design",
         "Binary Search Tree",
         "Heap (Priority Queue)",
         "Binary Tree",
         "Data Stream"
      ]
   },
   {
      "acRate": 56.712349125334526,
      "frontEndId": "704",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Binary Search",
      "titleSlug": "binary-search",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 67.16622972929115,
      "frontEndId": "705",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Design HashSet",
      "titleSlug": "design-hashset",
      "topicTags": [
         "Array",
         "Hash Table",
         "Linked List",
         "Design",
         "Hash Function"
      ]
   },
   {
      "acRate": 65.95328635200197,
      "frontEndId": "706",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Design HashMap",
      "titleSlug": "design-hashmap",
      "topicTags": [
         "Array",
         "Hash Table",
         "Linked List",
         "Design",
         "Hash Function"
      ]
   },
   {
      "acRate": 27.973382798356944,
      "frontEndId": "707",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Linked List",
      "titleSlug": "design-linked-list",
      "topicTags": ["Linked List", "Design"]
   },
   {
      "acRate": 34.88011496861054,
      "frontEndId": "708",
      "status": null,
      "difficulty": "Medium",
      "title": "Insert into a Sorted Circular Linked List",
      "titleSlug": "insert-into-a-sorted-circular-linked-list",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 82.80392572601136,
      "frontEndId": "709",
      "status": null,
      "difficulty": "Easy",
      "title": "To Lower Case",
      "titleSlug": "to-lower-case",
      "topicTags": ["String"]
   },
   {
      "acRate": 33.430337990708274,
      "frontEndId": "710",
      "status": "notac",
      "difficulty": "Hard",
      "title": "Random Pick with Blacklist",
      "titleSlug": "random-pick-with-blacklist",
      "topicTags": [
         "Array",
         "Hash Table",
         "Math",
         "Binary Search",
         "Sorting",
         "Randomized"
      ]
   },
   {
      "acRate": 52.36970474967908,
      "frontEndId": "711",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Distinct Islands II",
      "titleSlug": "number-of-distinct-islands-ii",
      "topicTags": [
         "Hash Table",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Hash Function"
      ]
   },
   {
      "acRate": 64.89232334488021,
      "frontEndId": "712",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum ASCII Delete Sum for Two Strings",
      "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 46.536572998728644,
      "frontEndId": "713",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Subarray Product Less Than K",
      "titleSlug": "subarray-product-less-than-k",
      "topicTags": ["Array", "Sliding Window"]
   },
   {
      "acRate": 68.07012712046752,
      "frontEndId": "714",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Best Time to Buy and Sell Stock with Transaction Fee",
      "titleSlug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 44.428342291133184,
      "frontEndId": "715",
      "status": null,
      "difficulty": "Hard",
      "title": "Range Module",
      "titleSlug": "range-module",
      "topicTags": ["Design", "Segment Tree", "Ordered Set"]
   },
   {
      "acRate": 45.09412158924718,
      "frontEndId": "716",
      "status": null,
      "difficulty": "Hard",
      "title": "Max Stack",
      "titleSlug": "max-stack",
      "topicTags": [
         "Linked List",
         "Stack",
         "Design",
         "Doubly-Linked List",
         "Ordered Set"
      ]
   },
   {
      "acRate": 45.258995449072174,
      "frontEndId": "717",
      "status": null,
      "difficulty": "Easy",
      "title": "1-bit and 2-bit Characters",
      "titleSlug": "1-bit-and-2-bit-characters",
      "topicTags": ["Array"]
   },
   {
      "acRate": 51.03379243198303,
      "frontEndId": "718",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Length of Repeated Subarray",
      "titleSlug": "maximum-length-of-repeated-subarray",
      "topicTags": [
         "Array",
         "Binary Search",
         "Dynamic Programming",
         "Sliding Window",
         "Rolling Hash",
         "Hash Function"
      ]
   },
   {
      "acRate": 37.19299048316252,
      "frontEndId": "719",
      "status": null,
      "difficulty": "Hard",
      "title": "Find K-th Smallest Pair Distance",
      "titleSlug": "find-k-th-smallest-pair-distance",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 52.137429216911656,
      "frontEndId": "720",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Word in Dictionary",
      "titleSlug": "longest-word-in-dictionary",
      "topicTags": ["Array", "Hash Table", "String", "Trie", "Sorting"]
   },
   {
      "acRate": 56.623113125559875,
      "frontEndId": "721",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Accounts Merge",
      "titleSlug": "accounts-merge",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Sorting"
      ]
   },
   {
      "acRate": 38.41898897696944,
      "frontEndId": "722",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove Comments",
      "titleSlug": "remove-comments",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 76.95154027907806,
      "frontEndId": "723",
      "status": null,
      "difficulty": "Medium",
      "title": "Candy Crush",
      "titleSlug": "candy-crush",
      "topicTags": ["Array", "Two Pointers", "Matrix", "Simulation"]
   },
   {
      "acRate": 56.169160609522216,
      "frontEndId": "724",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find Pivot Index",
      "titleSlug": "find-pivot-index",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 63.77237381494806,
      "frontEndId": "725",
      "status": null,
      "difficulty": "Medium",
      "title": "Split Linked List in Parts",
      "titleSlug": "split-linked-list-in-parts",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 52.508245258976096,
      "frontEndId": "726",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Atoms",
      "titleSlug": "number-of-atoms",
      "topicTags": ["Hash Table", "String", "Stack", "Sorting"]
   },
   {
      "acRate": 43.215064420218035,
      "frontEndId": "727",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Window Subsequence",
      "titleSlug": "minimum-window-subsequence",
      "topicTags": ["String", "Dynamic Programming", "Sliding Window"]
   },
   {
      "acRate": 78.10756464357529,
      "frontEndId": "728",
      "status": null,
      "difficulty": "Easy",
      "title": "Self Dividing Numbers",
      "titleSlug": "self-dividing-numbers",
      "topicTags": ["Math"]
   },
   {
      "acRate": 56.64456163060893,
      "frontEndId": "729",
      "status": "ac",
      "difficulty": "Medium",
      "title": "My Calendar I",
      "titleSlug": "my-calendar-i",
      "topicTags": ["Binary Search", "Design", "Segment Tree", "Ordered Set"]
   },
   {
      "acRate": 44.813943264978924,
      "frontEndId": "730",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Different Palindromic Subsequences",
      "titleSlug": "count-different-palindromic-subsequences",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 55.222631794511734,
      "frontEndId": "731",
      "status": "ac",
      "difficulty": "Medium",
      "title": "My Calendar II",
      "titleSlug": "my-calendar-ii",
      "topicTags": ["Binary Search", "Design", "Segment Tree", "Ordered Set"]
   },
   {
      "acRate": 71.56505914467698,
      "frontEndId": "732",
      "status": "ac",
      "difficulty": "Hard",
      "title": "My Calendar III",
      "titleSlug": "my-calendar-iii",
      "topicTags": ["Binary Search", "Design", "Segment Tree", "Ordered Set"]
   },
   {
      "acRate": 63.1172483693099,
      "frontEndId": "733",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Flood Fill",
      "titleSlug": "flood-fill",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 44.079703132288536,
      "frontEndId": "734",
      "status": null,
      "difficulty": "Easy",
      "title": "Sentence Similarity",
      "titleSlug": "sentence-similarity",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 45.13871717521389,
      "frontEndId": "735",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Asteroid Collision",
      "titleSlug": "asteroid-collision",
      "topicTags": ["Array", "Stack", "Simulation"]
   },
   {
      "acRate": 51.50964701261721,
      "frontEndId": "736",
      "status": null,
      "difficulty": "Hard",
      "title": "Parse Lisp Expression",
      "titleSlug": "parse-lisp-expression",
      "topicTags": ["Hash Table", "String", "Stack", "Recursion"]
   },
   {
      "acRate": 49.36258697840511,
      "frontEndId": "737",
      "status": null,
      "difficulty": "Medium",
      "title": "Sentence Similarity II",
      "titleSlug": "sentence-similarity-ii",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find"
      ]
   },
   {
      "acRate": 47.531606582382445,
      "frontEndId": "738",
      "status": null,
      "difficulty": "Medium",
      "title": "Monotone Increasing Digits",
      "titleSlug": "monotone-increasing-digits",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 65.88803037361495,
      "frontEndId": "739",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Daily Temperatures",
      "titleSlug": "daily-temperatures",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 56.6288096767367,
      "frontEndId": "740",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Delete and Earn",
      "titleSlug": "delete-and-earn",
      "topicTags": ["Array", "Hash Table", "Dynamic Programming"]
   },
   {
      "acRate": 36.54071157504909,
      "frontEndId": "741",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Cherry Pickup",
      "titleSlug": "cherry-pickup",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 46.02873802582258,
      "frontEndId": "742",
      "status": null,
      "difficulty": "Medium",
      "title": "Closest Leaf in a Binary Tree",
      "titleSlug": "closest-leaf-in-a-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 52.82603644117607,
      "frontEndId": "743",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Network Delay Time",
      "titleSlug": "network-delay-time",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Heap (Priority Queue)",
         "Shortest Path"
      ]
   },
   {
      "acRate": 51.23822176357692,
      "frontEndId": "744",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Smallest Letter Greater Than Target",
      "titleSlug": "find-smallest-letter-greater-than-target",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 41.03694551725057,
      "frontEndId": "745",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Prefix and Suffix Search",
      "titleSlug": "prefix-and-suffix-search",
      "topicTags": ["Hash Table", "String", "Design", "Trie"]
   },
   {
      "acRate": 65.0238955363847,
      "frontEndId": "746",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Min Cost Climbing Stairs",
      "titleSlug": "min-cost-climbing-stairs",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 47.94810047837556,
      "frontEndId": "747",
      "status": null,
      "difficulty": "Easy",
      "title": "Largest Number At Least Twice of Others",
      "titleSlug": "largest-number-at-least-twice-of-others",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 59.28793939608482,
      "frontEndId": "748",
      "status": null,
      "difficulty": "Easy",
      "title": "Shortest Completing Word",
      "titleSlug": "shortest-completing-word",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 51.132878656108396,
      "frontEndId": "749",
      "status": null,
      "difficulty": "Hard",
      "title": "Contain Virus",
      "titleSlug": "contain-virus",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix",
         "Simulation"
      ]
   },
   {
      "acRate": 67.6442694819719,
      "frontEndId": "750",
      "status": null,
      "difficulty": "Medium",
      "title": "Number Of Corner Rectangles",
      "titleSlug": "number-of-corner-rectangles",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 54.48277663158445,
      "frontEndId": "751",
      "status": null,
      "difficulty": "Medium",
      "title": "IP to CIDR",
      "titleSlug": "ip-to-cidr",
      "topicTags": ["String", "Bit Manipulation"]
   },
   {
      "acRate": 55.86981992208192,
      "frontEndId": "752",
      "status": null,
      "difficulty": "Medium",
      "title": "Open the Lock",
      "titleSlug": "open-the-lock",
      "topicTags": ["Array", "Hash Table", "String", "Breadth-First Search"]
   },
   {
      "acRate": 56.27828456946437,
      "frontEndId": "753",
      "status": null,
      "difficulty": "Hard",
      "title": "Cracking the Safe",
      "titleSlug": "cracking-the-safe",
      "topicTags": ["Depth-First Search", "Graph", "Eulerian Circuit"]
   },
   {
      "acRate": 42.84384454270421,
      "frontEndId": "754",
      "status": null,
      "difficulty": "Medium",
      "title": "Reach a Number",
      "titleSlug": "reach-a-number",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 46.56518193468215,
      "frontEndId": "755",
      "status": null,
      "difficulty": "Medium",
      "title": "Pour Water",
      "titleSlug": "pour-water",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 52.49749079959852,
      "frontEndId": "756",
      "status": null,
      "difficulty": "Medium",
      "title": "Pyramid Transition Matrix",
      "titleSlug": "pyramid-transition-matrix",
      "topicTags": [
         "Bit Manipulation",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 43.96630425761474,
      "frontEndId": "757",
      "status": null,
      "difficulty": "Hard",
      "title": "Set Intersection Size At Least Two",
      "titleSlug": "set-intersection-size-at-least-two",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 51.09258274810442,
      "frontEndId": "758",
      "status": null,
      "difficulty": "Medium",
      "title": "Bold Words in String",
      "titleSlug": "bold-words-in-string",
      "topicTags": ["Array", "Hash Table", "String", "Trie", "String Matching"]
   },
   {
      "acRate": 71.94303988038997,
      "frontEndId": "759",
      "status": null,
      "difficulty": "Hard",
      "title": "Employee Free Time",
      "titleSlug": "employee-free-time",
      "topicTags": ["Array", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 83.44809185271892,
      "frontEndId": "760",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Anagram Mappings",
      "titleSlug": "find-anagram-mappings",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 60.72286400549011,
      "frontEndId": "761",
      "status": null,
      "difficulty": "Hard",
      "title": "Special Binary String",
      "titleSlug": "special-binary-string",
      "topicTags": ["String", "Recursion"]
   },
   {
      "acRate": 68.68344477464092,
      "frontEndId": "762",
      "status": null,
      "difficulty": "Easy",
      "title": "Prime Number of Set Bits in Binary Representation",
      "titleSlug": "prime-number-of-set-bits-in-binary-representation",
      "topicTags": ["Math", "Bit Manipulation"]
   },
   {
      "acRate": 79.77035669343363,
      "frontEndId": "763",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Partition Labels",
      "titleSlug": "partition-labels",
      "topicTags": ["Hash Table", "Two Pointers", "String", "Greedy"]
   },
   {
      "acRate": 48.202507886024144,
      "frontEndId": "764",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Plus Sign",
      "titleSlug": "largest-plus-sign",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 56.74160707792994,
      "frontEndId": "765",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Couples Holding Hands",
      "titleSlug": "couples-holding-hands",
      "topicTags": [
         "Greedy",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 68.48539176471414,
      "frontEndId": "766",
      "status": null,
      "difficulty": "Easy",
      "title": "Toeplitz Matrix",
      "titleSlug": "toeplitz-matrix",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 54.33369430400866,
      "frontEndId": "767",
      "status": null,
      "difficulty": "Medium",
      "title": "Reorganize String",
      "titleSlug": "reorganize-string",
      "topicTags": [
         "Hash Table",
         "String",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)",
         "Counting"
      ]
   },
   {
      "acRate": 52.87100891651898,
      "frontEndId": "768",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Max Chunks To Make Sorted II",
      "titleSlug": "max-chunks-to-make-sorted-ii",
      "topicTags": ["Array", "Stack", "Greedy", "Sorting", "Monotonic Stack"]
   },
   {
      "acRate": 58.21776459475233,
      "frontEndId": "769",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Max Chunks To Make Sorted",
      "titleSlug": "max-chunks-to-make-sorted",
      "topicTags": ["Array", "Stack", "Greedy", "Sorting", "Monotonic Stack"]
   },
   {
      "acRate": 54.97420781134856,
      "frontEndId": "770",
      "status": null,
      "difficulty": "Hard",
      "title": "Basic Calculator IV",
      "titleSlug": "basic-calculator-iv",
      "topicTags": ["Hash Table", "Math", "String", "Stack", "Recursion"]
   },
   {
      "acRate": 88.32585490247995,
      "frontEndId": "771",
      "status": null,
      "difficulty": "Easy",
      "title": "Jewels and Stones",
      "titleSlug": "jewels-and-stones",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 49.49300133455704,
      "frontEndId": "772",
      "status": null,
      "difficulty": "Hard",
      "title": "Basic Calculator III",
      "titleSlug": "basic-calculator-iii",
      "topicTags": ["Math", "String", "Stack", "Recursion"]
   },
   {
      "acRate": 64.41835892833882,
      "frontEndId": "773",
      "status": null,
      "difficulty": "Hard",
      "title": "Sliding Puzzle",
      "titleSlug": "sliding-puzzle",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 51.94143516035611,
      "frontEndId": "774",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimize Max Distance to Gas Station",
      "titleSlug": "minimize-max-distance-to-gas-station",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 42.68146297248965,
      "frontEndId": "775",
      "status": null,
      "difficulty": "Medium",
      "title": "Global and Local Inversions",
      "titleSlug": "global-and-local-inversions",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 83.060380347385,
      "frontEndId": "776",
      "status": null,
      "difficulty": "Medium",
      "title": "Split BST",
      "titleSlug": "split-bst",
      "topicTags": ["Tree", "Binary Search Tree", "Recursion", "Binary Tree"]
   },
   {
      "acRate": 36.78374411660509,
      "frontEndId": "777",
      "status": null,
      "difficulty": "Medium",
      "title": "Swap Adjacent in LR String",
      "titleSlug": "swap-adjacent-in-lr-string",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 60.220783657749834,
      "frontEndId": "778",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Swim in Rising Water",
      "titleSlug": "swim-in-rising-water",
      "topicTags": [
         "Array",
         "Binary Search",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 41.93873968755486,
      "frontEndId": "779",
      "status": null,
      "difficulty": "Medium",
      "title": "K-th Symbol in Grammar",
      "titleSlug": "k-th-symbol-in-grammar",
      "topicTags": ["Math", "Bit Manipulation", "Recursion"]
   },
   {
      "acRate": 32.81379998890676,
      "frontEndId": "780",
      "status": "notac",
      "difficulty": "Hard",
      "title": "Reaching Points",
      "titleSlug": "reaching-points",
      "topicTags": ["Math"]
   },
   {
      "acRate": 54.012313030232505,
      "frontEndId": "781",
      "status": null,
      "difficulty": "Medium",
      "title": "Rabbits in Forest",
      "titleSlug": "rabbits-in-forest",
      "topicTags": ["Array", "Hash Table", "Math", "Greedy"]
   },
   {
      "acRate": 51.36523046092184,
      "frontEndId": "782",
      "status": null,
      "difficulty": "Hard",
      "title": "Transform to Chessboard",
      "titleSlug": "transform-to-chessboard",
      "topicTags": ["Array", "Math", "Bit Manipulation", "Matrix"]
   },
   {
      "acRate": 59.454397163667984,
      "frontEndId": "783",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Distance Between BST Nodes",
      "titleSlug": "minimum-distance-between-bst-nodes",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 73.98866294997,
      "frontEndId": "784",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Letter Case Permutation",
      "titleSlug": "letter-case-permutation",
      "topicTags": ["String", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 55.05201333380491,
      "frontEndId": "785",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Is Graph Bipartite?",
      "titleSlug": "is-graph-bipartite",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 52.90732477144101,
      "frontEndId": "786",
      "status": null,
      "difficulty": "Medium",
      "title": "K-th Smallest Prime Fraction",
      "titleSlug": "k-th-smallest-prime-fraction",
      "topicTags": [
         "Array",
         "Binary Search",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 37.31634220530956,
      "frontEndId": "787",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Cheapest Flights Within K Stops",
      "titleSlug": "cheapest-flights-within-k-stops",
      "topicTags": [
         "Dynamic Programming",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Heap (Priority Queue)",
         "Shortest Path"
      ]
   },
   {
      "acRate": 56.478891399036925,
      "frontEndId": "788",
      "status": null,
      "difficulty": "Medium",
      "title": "Rotated Digits",
      "titleSlug": "rotated-digits",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 61.33534687900421,
      "frontEndId": "789",
      "status": null,
      "difficulty": "Medium",
      "title": "Escape The Ghosts",
      "titleSlug": "escape-the-ghosts",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 51.61228639653758,
      "frontEndId": "790",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Domino and Tromino Tiling",
      "titleSlug": "domino-and-tromino-tiling",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 69.02693413845364,
      "frontEndId": "791",
      "status": null,
      "difficulty": "Medium",
      "title": "Custom Sort String",
      "titleSlug": "custom-sort-string",
      "topicTags": ["Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 51.28103081778086,
      "frontEndId": "792",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Matching Subsequences",
      "titleSlug": "number-of-matching-subsequences",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Binary Search",
         "Dynamic Programming",
         "Trie",
         "Sorting"
      ]
   },
   {
      "acRate": 43.657417066555396,
      "frontEndId": "793",
      "status": null,
      "difficulty": "Hard",
      "title": "Preimage Size of Factorial Zeroes Function",
      "titleSlug": "preimage-size-of-factorial-zeroes-function",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 34.92150008144445,
      "frontEndId": "794",
      "status": null,
      "difficulty": "Medium",
      "title": "Valid Tic-Tac-Toe State",
      "titleSlug": "valid-tic-tac-toe-state",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 52.854302522521046,
      "frontEndId": "795",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Subarrays with Bounded Maximum",
      "titleSlug": "number-of-subarrays-with-bounded-maximum",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 56.58133792447274,
      "frontEndId": "796",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Rotate String",
      "titleSlug": "rotate-string",
      "topicTags": ["String", "String Matching"]
   },
   {
      "acRate": 82.4207724338373,
      "frontEndId": "797",
      "status": "ac",
      "difficulty": "Medium",
      "title": "All Paths From Source to Target",
      "titleSlug": "all-paths-from-source-to-target",
      "topicTags": [
         "Backtracking",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph"
      ]
   },
   {
      "acRate": 50.54962561733311,
      "frontEndId": "798",
      "status": null,
      "difficulty": "Hard",
      "title": "Smallest Rotation with Highest Score",
      "titleSlug": "smallest-rotation-with-highest-score",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 57.873830554539275,
      "frontEndId": "799",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Champagne Tower",
      "titleSlug": "champagne-tower",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 67.08022163334137,
      "frontEndId": "800",
      "status": null,
      "difficulty": "Easy",
      "title": "Similar RGB Color",
      "titleSlug": "similar-rgb-color",
      "topicTags": ["Math", "String", "Enumeration"]
   },
   {
      "acRate": 39.56565616701715,
      "frontEndId": "801",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Swaps To Make Sequences Increasing",
      "titleSlug": "minimum-swaps-to-make-sequences-increasing",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 61.710034983480845,
      "frontEndId": "802",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Eventual Safe States",
      "titleSlug": "find-eventual-safe-states",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 34.50950950950951,
      "frontEndId": "803",
      "status": null,
      "difficulty": "Hard",
      "title": "Bricks Falling When Hit",
      "titleSlug": "bricks-falling-when-hit",
      "topicTags": ["Array", "Union Find", "Matrix"]
   },
   {
      "acRate": 82.66511524545997,
      "frontEndId": "804",
      "status": null,
      "difficulty": "Easy",
      "title": "Unique Morse Code Words",
      "titleSlug": "unique-morse-code-words",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 25.34905295709316,
      "frontEndId": "805",
      "status": null,
      "difficulty": "Hard",
      "title": "Split Array With Same Average",
      "titleSlug": "split-array-with-same-average",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 67.32457600517449,
      "frontEndId": "806",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Lines To Write String",
      "titleSlug": "number-of-lines-to-write-string",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 85.99686326164975,
      "frontEndId": "807",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Max Increase to Keep City Skyline",
      "titleSlug": "max-increase-to-keep-city-skyline",
      "topicTags": ["Array", "Greedy", "Matrix"]
   },
   {
      "acRate": 54.86125385405961,
      "frontEndId": "808",
      "status": null,
      "difficulty": "Medium",
      "title": "Soup Servings",
      "titleSlug": "soup-servings",
      "topicTags": ["Math", "Dynamic Programming", "Probability and Statistics"]
   },
   {
      "acRate": 46.14301626935324,
      "frontEndId": "809",
      "status": null,
      "difficulty": "Medium",
      "title": "Expressive Words",
      "titleSlug": "expressive-words",
      "topicTags": ["Array", "Two Pointers", "String"]
   },
   {
      "acRate": 57.56307692307693,
      "frontEndId": "810",
      "status": null,
      "difficulty": "Hard",
      "title": "Chalkboard XOR Game",
      "titleSlug": "chalkboard-xor-game",
      "topicTags": [
         "Array",
         "Math",
         "Bit Manipulation",
         "Brainteaser",
         "Game Theory"
      ]
   },
   {
      "acRate": 75.80101327438257,
      "frontEndId": "811",
      "status": null,
      "difficulty": "Medium",
      "title": "Subdomain Visit Count",
      "titleSlug": "subdomain-visit-count",
      "topicTags": ["Array", "Hash Table", "String", "Counting"]
   },
   {
      "acRate": 60.10889678767789,
      "frontEndId": "812",
      "status": null,
      "difficulty": "Easy",
      "title": "Largest Triangle Area",
      "titleSlug": "largest-triangle-area",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 53.14401405433199,
      "frontEndId": "813",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Largest Sum of Averages",
      "titleSlug": "largest-sum-of-averages",
      "topicTags": ["Array", "Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 72.29451174373477,
      "frontEndId": "814",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Binary Tree Pruning",
      "titleSlug": "binary-tree-pruning",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 45.52718038145694,
      "frontEndId": "815",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Bus Routes",
      "titleSlug": "bus-routes",
      "topicTags": ["Array", "Hash Table", "Breadth-First Search"]
   },
   {
      "acRate": 56.37988650070196,
      "frontEndId": "816",
      "status": null,
      "difficulty": "Medium",
      "title": "Ambiguous Coordinates",
      "titleSlug": "ambiguous-coordinates",
      "topicTags": ["String", "Backtracking"]
   },
   {
      "acRate": 57.187735528149986,
      "frontEndId": "817",
      "status": null,
      "difficulty": "Medium",
      "title": "Linked List Components",
      "titleSlug": "linked-list-components",
      "topicTags": ["Array", "Hash Table", "Linked List"]
   },
   {
      "acRate": 43.47693296897605,
      "frontEndId": "818",
      "status": null,
      "difficulty": "Hard",
      "title": "Race Car",
      "titleSlug": "race-car",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 44.467384351746034,
      "frontEndId": "819",
      "status": null,
      "difficulty": "Easy",
      "title": "Most Common Word",
      "titleSlug": "most-common-word",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 60.51211717365146,
      "frontEndId": "820",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Short Encoding of Words",
      "titleSlug": "short-encoding-of-words",
      "topicTags": ["Array", "Hash Table", "String", "Trie"]
   },
   {
      "acRate": 71.28560691152005,
      "frontEndId": "821",
      "status": null,
      "difficulty": "Easy",
      "title": "Shortest Distance to a Character",
      "titleSlug": "shortest-distance-to-a-character",
      "topicTags": ["Array", "Two Pointers", "String"]
   },
   {
      "acRate": 46.576035054210436,
      "frontEndId": "822",
      "status": null,
      "difficulty": "Medium",
      "title": "Card Flipping Game",
      "titleSlug": "card-flipping-game",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 49.58954155114923,
      "frontEndId": "823",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Binary Trees With Factors",
      "titleSlug": "binary-trees-with-factors",
      "topicTags": ["Array", "Hash Table", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 67.92023687431767,
      "frontEndId": "824",
      "status": null,
      "difficulty": "Easy",
      "title": "Goat Latin",
      "titleSlug": "goat-latin",
      "topicTags": ["String"]
   },
   {
      "acRate": 46.37933090260999,
      "frontEndId": "825",
      "status": null,
      "difficulty": "Medium",
      "title": "Friends Of Appropriate Ages",
      "titleSlug": "friends-of-appropriate-ages",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 45.42652980122519,
      "frontEndId": "826",
      "status": null,
      "difficulty": "Medium",
      "title": "Most Profit Assigning Work",
      "titleSlug": "most-profit-assigning-work",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Greedy",
         "Sorting"
      ]
   },
   {
      "acRate": 45.79489318021428,
      "frontEndId": "827",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Making A Large Island",
      "titleSlug": "making-a-large-island",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 51.92066320601224,
      "frontEndId": "828",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Unique Characters of All Substrings of a Given String",
      "titleSlug": "count-unique-characters-of-all-substrings-of-a-given-string",
      "topicTags": ["Hash Table", "String", "Dynamic Programming"]
   },
   {
      "acRate": 41.65432374305077,
      "frontEndId": "829",
      "status": null,
      "difficulty": "Hard",
      "title": "Consecutive Numbers Sum",
      "titleSlug": "consecutive-numbers-sum",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 51.98697528719727,
      "frontEndId": "830",
      "status": null,
      "difficulty": "Easy",
      "title": "Positions of Large Groups",
      "titleSlug": "positions-of-large-groups",
      "topicTags": ["String"]
   },
   {
      "acRate": 48.03857999675799,
      "frontEndId": "831",
      "status": null,
      "difficulty": "Medium",
      "title": "Masking Personal Information",
      "titleSlug": "masking-personal-information",
      "topicTags": ["String"]
   },
   {
      "acRate": 81.28822438339684,
      "frontEndId": "832",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Flipping an Image",
      "titleSlug": "flipping-an-image",
      "topicTags": ["Array", "Two Pointers", "Matrix", "Simulation"]
   },
   {
      "acRate": 53.59719265949491,
      "frontEndId": "833",
      "status": null,
      "difficulty": "Medium",
      "title": "Find And Replace in String",
      "titleSlug": "find-and-replace-in-string",
      "topicTags": ["Array", "String", "Sorting"]
   },
   {
      "acRate": 59.27704614714846,
      "frontEndId": "834",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Sum of Distances in Tree",
      "titleSlug": "sum-of-distances-in-tree",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Graph"
      ]
   },
   {
      "acRate": 63.73744870951027,
      "frontEndId": "835",
      "status": null,
      "difficulty": "Medium",
      "title": "Image Overlap",
      "titleSlug": "image-overlap",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 44.271490253391796,
      "frontEndId": "836",
      "status": null,
      "difficulty": "Easy",
      "title": "Rectangle Overlap",
      "titleSlug": "rectangle-overlap",
      "topicTags": ["Math", "Geometry"]
   },
   {
      "acRate": 45.19370324885564,
      "frontEndId": "837",
      "status": null,
      "difficulty": "Medium",
      "title": "New 21 Game",
      "titleSlug": "new-21-game",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Sliding Window",
         "Probability and Statistics"
      ]
   },
   {
      "acRate": 57.06398087095138,
      "frontEndId": "838",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Push Dominoes",
      "titleSlug": "push-dominoes",
      "topicTags": ["Two Pointers", "String", "Dynamic Programming"]
   },
   {
      "acRate": 54.5553802643477,
      "frontEndId": "839",
      "status": null,
      "difficulty": "Hard",
      "title": "Similar String Groups",
      "titleSlug": "similar-string-groups",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find"
      ]
   },
   {
      "acRate": 38.776433932274394,
      "frontEndId": "840",
      "status": null,
      "difficulty": "Medium",
      "title": "Magic Squares In Grid",
      "titleSlug": "magic-squares-in-grid",
      "topicTags": ["Array", "Math", "Matrix"]
   },
   {
      "acRate": 72.23864944567977,
      "frontEndId": "841",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Keys and Rooms",
      "titleSlug": "keys-and-rooms",
      "topicTags": ["Depth-First Search", "Breadth-First Search", "Graph"]
   },
   {
      "acRate": 38.72376523815508,
      "frontEndId": "842",
      "status": null,
      "difficulty": "Medium",
      "title": "Split Array into Fibonacci Sequence",
      "titleSlug": "split-array-into-fibonacci-sequence",
      "topicTags": ["String", "Backtracking"]
   },
   {
      "acRate": 40.191634766679975,
      "frontEndId": "843",
      "status": null,
      "difficulty": "Hard",
      "title": "Guess the Word",
      "titleSlug": "guess-the-word",
      "topicTags": ["Array", "Math", "String", "Interactive", "Game Theory"]
   },
   {
      "acRate": 48.098446232136,
      "frontEndId": "844",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Backspace String Compare",
      "titleSlug": "backspace-string-compare",
      "topicTags": ["Two Pointers", "String", "Stack", "Simulation"]
   },
   {
      "acRate": 40.218632341547625,
      "frontEndId": "845",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Mountain in Array",
      "titleSlug": "longest-mountain-in-array",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Dynamic Programming",
         "Enumeration"
      ]
   },
   {
      "acRate": 55.989959259615695,
      "frontEndId": "846",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Hand of Straights",
      "titleSlug": "hand-of-straights",
      "topicTags": ["Array", "Hash Table", "Greedy", "Sorting"]
   },
   {
      "acRate": 65.96507173180244,
      "frontEndId": "847",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Shortest Path Visiting All Nodes",
      "titleSlug": "shortest-path-visiting-all-nodes",
      "topicTags": [
         "Dynamic Programming",
         "Bit Manipulation",
         "Breadth-First Search",
         "Graph",
         "Bitmask"
      ]
   },
   {
      "acRate": 44.87335269594768,
      "frontEndId": "848",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Shifting Letters",
      "titleSlug": "shifting-letters",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 47.808144444016854,
      "frontEndId": "849",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximize Distance to Closest Person",
      "titleSlug": "maximize-distance-to-closest-person",
      "topicTags": ["Array"]
   },
   {
      "acRate": 54.05227287340063,
      "frontEndId": "850",
      "status": null,
      "difficulty": "Hard",
      "title": "Rectangle Area II",
      "titleSlug": "rectangle-area-ii",
      "topicTags": ["Array", "Segment Tree", "Line Sweep", "Ordered Set"]
   },
   {
      "acRate": 58.857470847682926,
      "frontEndId": "851",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Loud and Rich",
      "titleSlug": "loud-and-rich",
      "topicTags": ["Array", "Depth-First Search", "Graph", "Topological Sort"]
   },
   {
      "acRate": 68.80926520771227,
      "frontEndId": "852",
      "status": null,
      "difficulty": "Medium",
      "title": "Peak Index in a Mountain Array",
      "titleSlug": "peak-index-in-a-mountain-array",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 50.32571178558117,
      "frontEndId": "853",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Car Fleet",
      "titleSlug": "car-fleet",
      "topicTags": ["Array", "Stack", "Sorting", "Monotonic Stack"]
   },
   {
      "acRate": 39.85692339015677,
      "frontEndId": "854",
      "status": null,
      "difficulty": "Hard",
      "title": "K-Similar Strings",
      "titleSlug": "k-similar-strings",
      "topicTags": ["String", "Breadth-First Search"]
   },
   {
      "acRate": 43.30622114750495,
      "frontEndId": "855",
      "status": null,
      "difficulty": "Medium",
      "title": "Exam Room",
      "titleSlug": "exam-room",
      "topicTags": ["Design", "Heap (Priority Queue)", "Ordered Set"]
   },
   {
      "acRate": 64.32453401385123,
      "frontEndId": "856",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Score of Parentheses",
      "titleSlug": "score-of-parentheses",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 52.69315691964097,
      "frontEndId": "857",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Cost to Hire K Workers",
      "titleSlug": "minimum-cost-to-hire-k-workers",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 62.73880943271821,
      "frontEndId": "858",
      "status": null,
      "difficulty": "Medium",
      "title": "Mirror Reflection",
      "titleSlug": "mirror-reflection",
      "topicTags": ["Math", "Geometry", "Number Theory"]
   },
   {
      "acRate": 32.866692686247866,
      "frontEndId": "859",
      "status": null,
      "difficulty": "Easy",
      "title": "Buddy Strings",
      "titleSlug": "buddy-strings",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 53.023102539198,
      "frontEndId": "860",
      "status": null,
      "difficulty": "Easy",
      "title": "Lemonade Change",
      "titleSlug": "lemonade-change",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 74.9412685982772,
      "frontEndId": "861",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Score After Flipping Matrix",
      "titleSlug": "score-after-flipping-matrix",
      "topicTags": ["Array", "Greedy", "Bit Manipulation", "Matrix"]
   },
   {
      "acRate": 25.924211678976317,
      "frontEndId": "862",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Shortest Subarray with Sum at Least K",
      "titleSlug": "shortest-subarray-with-sum-at-least-k",
      "topicTags": [
         "Array",
         "Binary Search",
         "Queue",
         "Sliding Window",
         "Heap (Priority Queue)",
         "Prefix Sum",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 64.0724715615305,
      "frontEndId": "863",
      "status": null,
      "difficulty": "Medium",
      "title": "All Nodes Distance K in Binary Tree",
      "titleSlug": "all-nodes-distance-k-in-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 54.091200729729515,
      "frontEndId": "864",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Shortest Path to Get All Keys",
      "titleSlug": "shortest-path-to-get-all-keys",
      "topicTags": [
         "Array",
         "Bit Manipulation",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 69.56397242122758,
      "frontEndId": "865",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest Subtree with all the Deepest Nodes",
      "titleSlug": "smallest-subtree-with-all-the-deepest-nodes",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 25.82400191618406,
      "frontEndId": "866",
      "status": null,
      "difficulty": "Medium",
      "title": "Prime Palindrome",
      "titleSlug": "prime-palindrome",
      "topicTags": ["Math"]
   },
   {
      "acRate": 65.89630856544349,
      "frontEndId": "867",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Transpose Matrix",
      "titleSlug": "transpose-matrix",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 62.68788682581786,
      "frontEndId": "868",
      "status": null,
      "difficulty": "Easy",
      "title": "Binary Gap",
      "titleSlug": "binary-gap",
      "topicTags": ["Bit Manipulation"]
   },
   {
      "acRate": 63.03231704161948,
      "frontEndId": "869",
      "status": null,
      "difficulty": "Medium",
      "title": "Reordered Power of 2",
      "titleSlug": "reordered-power-of-2",
      "topicTags": ["Math", "Sorting", "Counting", "Enumeration"]
   },
   {
      "acRate": 52.156923910455845,
      "frontEndId": "870",
      "status": null,
      "difficulty": "Medium",
      "title": "Advantage Shuffle",
      "titleSlug": "advantage-shuffle",
      "topicTags": ["Array", "Two Pointers", "Greedy", "Sorting"]
   },
   {
      "acRate": 39.81813385472433,
      "frontEndId": "871",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Number of Refueling Stops",
      "titleSlug": "minimum-number-of-refueling-stops",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Greedy",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 67.84567385216958,
      "frontEndId": "872",
      "status": null,
      "difficulty": "Easy",
      "title": "Leaf-Similar Trees",
      "titleSlug": "leaf-similar-trees",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 48.12541162887135,
      "frontEndId": "873",
      "status": null,
      "difficulty": "Medium",
      "title": "Length of Longest Fibonacci Subsequence",
      "titleSlug": "length-of-longest-fibonacci-subsequence",
      "topicTags": ["Array", "Hash Table", "Dynamic Programming"]
   },
   {
      "acRate": 39.41712428785916,
      "frontEndId": "874",
      "status": null,
      "difficulty": "Medium",
      "title": "Walking Robot Simulation",
      "titleSlug": "walking-robot-simulation",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 49.69204315179645,
      "frontEndId": "875",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Koko Eating Bananas",
      "titleSlug": "koko-eating-bananas",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 76.68516820358047,
      "frontEndId": "876",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Middle of the Linked List",
      "titleSlug": "middle-of-the-linked-list",
      "topicTags": ["Linked List", "Two Pointers"]
   },
   {
      "acRate": 70.22399861786674,
      "frontEndId": "877",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Stone Game",
      "titleSlug": "stone-game",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Game Theory"]
   },
   {
      "acRate": 35.28426744139128,
      "frontEndId": "878",
      "status": null,
      "difficulty": "Hard",
      "title": "Nth Magical Number",
      "titleSlug": "nth-magical-number",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 48.73696578058452,
      "frontEndId": "879",
      "status": null,
      "difficulty": "Hard",
      "title": "Profitable Schemes",
      "titleSlug": "profitable-schemes",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 36.54836920301856,
      "frontEndId": "880",
      "status": null,
      "difficulty": "Medium",
      "title": "Decoded String at Index",
      "titleSlug": "decoded-string-at-index",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 56.18962770417575,
      "frontEndId": "881",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Boats to Save People",
      "titleSlug": "boats-to-save-people",
      "topicTags": ["Array", "Two Pointers", "Greedy", "Sorting"]
   },
   {
      "acRate": 49.998030410462455,
      "frontEndId": "882",
      "status": null,
      "difficulty": "Hard",
      "title": "Reachable Nodes In Subdivided Graph",
      "titleSlug": "reachable-nodes-in-subdivided-graph",
      "topicTags": ["Graph", "Heap (Priority Queue)", "Shortest Path"]
   },
   {
      "acRate": 71.84436102862905,
      "frontEndId": "883",
      "status": null,
      "difficulty": "Easy",
      "title": "Projection Area of 3D Shapes",
      "titleSlug": "projection-area-of-3d-shapes",
      "topicTags": ["Array", "Math", "Geometry", "Matrix"]
   },
   {
      "acRate": 66.66684142645933,
      "frontEndId": "884",
      "status": null,
      "difficulty": "Easy",
      "title": "Uncommon Words from Two Sentences",
      "titleSlug": "uncommon-words-from-two-sentences",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 74.08004166463226,
      "frontEndId": "885",
      "status": null,
      "difficulty": "Medium",
      "title": "Spiral Matrix III",
      "titleSlug": "spiral-matrix-iii",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 50.30395372660203,
      "frontEndId": "886",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Possible Bipartition",
      "titleSlug": "possible-bipartition",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 27.37375585175823,
      "frontEndId": "887",
      "status": null,
      "difficulty": "Hard",
      "title": "Super Egg Drop",
      "titleSlug": "super-egg-drop",
      "topicTags": ["Math", "Binary Search", "Dynamic Programming"]
   },
   {
      "acRate": 61.11429222652753,
      "frontEndId": "888",
      "status": null,
      "difficulty": "Easy",
      "title": "Fair Candy Swap",
      "titleSlug": "fair-candy-swap",
      "topicTags": ["Array", "Hash Table", "Binary Search", "Sorting"]
   },
   {
      "acRate": 71.26090678360642,
      "frontEndId": "889",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Construct Binary Tree from Preorder and Postorder Traversal",
      "titleSlug": "construct-binary-tree-from-preorder-and-postorder-traversal",
      "topicTags": [
         "Array",
         "Hash Table",
         "Divide and Conquer",
         "Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 77.14353169554438,
      "frontEndId": "890",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find and Replace Pattern",
      "titleSlug": "find-and-replace-pattern",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 37.21399984897682,
      "frontEndId": "891",
      "status": null,
      "difficulty": "Hard",
      "title": "Sum of Subsequence Widths",
      "titleSlug": "sum-of-subsequence-widths",
      "topicTags": ["Array", "Math", "Sorting"]
   },
   {
      "acRate": 64.86457855150253,
      "frontEndId": "892",
      "status": null,
      "difficulty": "Easy",
      "title": "Surface Area of 3D Shapes",
      "titleSlug": "surface-area-of-3d-shapes",
      "topicTags": ["Array", "Math", "Geometry", "Matrix"]
   },
   {
      "acRate": 71.34341623377618,
      "frontEndId": "893",
      "status": null,
      "difficulty": "Medium",
      "title": "Groups of Special-Equivalent Strings",
      "titleSlug": "groups-of-special-equivalent-strings",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 82.76019736511542,
      "frontEndId": "894",
      "status": "ac",
      "difficulty": "Medium",
      "title": "All Possible Full Binary Trees",
      "titleSlug": "all-possible-full-binary-trees",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Recursion",
         "Memoization",
         "Binary Tree"
      ]
   },
   {
      "acRate": 66.48679891831637,
      "frontEndId": "895",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Maximum Frequency Stack",
      "titleSlug": "maximum-frequency-stack",
      "topicTags": ["Hash Table", "Stack", "Design", "Ordered Set"]
   },
   {
      "acRate": 61.05811311692456,
      "frontEndId": "896",
      "status": null,
      "difficulty": "Easy",
      "title": "Monotonic Array",
      "titleSlug": "monotonic-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 78.29427207070228,
      "frontEndId": "897",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Increasing Order Search Tree",
      "titleSlug": "increasing-order-search-tree",
      "topicTags": [
         "Stack",
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 38.09791783905459,
      "frontEndId": "898",
      "status": null,
      "difficulty": "Medium",
      "title": "Bitwise ORs of Subarrays",
      "titleSlug": "bitwise-ors-of-subarrays",
      "topicTags": ["Array", "Dynamic Programming", "Bit Manipulation"]
   },
   {
      "acRate": 65.9857781629799,
      "frontEndId": "899",
      "status": null,
      "difficulty": "Hard",
      "title": "Orderly Queue",
      "titleSlug": "orderly-queue",
      "topicTags": ["Math", "String", "Sorting"]
   },
   {
      "acRate": 59.402920614354734,
      "frontEndId": "900",
      "status": null,
      "difficulty": "Medium",
      "title": "RLE Iterator",
      "titleSlug": "rle-iterator",
      "topicTags": ["Array", "Design", "Counting", "Iterator"]
   },
   {
      "acRate": 65.55082747061952,
      "frontEndId": "901",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Online Stock Span",
      "titleSlug": "online-stock-span",
      "topicTags": ["Stack", "Design", "Monotonic Stack", "Data Stream"]
   },
   {
      "acRate": 42.13643386285307,
      "frontEndId": "902",
      "status": null,
      "difficulty": "Hard",
      "title": "Numbers At Most N Given Digit Set",
      "titleSlug": "numbers-at-most-n-given-digit-set",
      "topicTags": [
         "Array",
         "Math",
         "String",
         "Binary Search",
         "Dynamic Programming"
      ]
   },
   {
      "acRate": 57.55358696511904,
      "frontEndId": "903",
      "status": null,
      "difficulty": "Hard",
      "title": "Valid Permutations for DI Sequence",
      "titleSlug": "valid-permutations-for-di-sequence",
      "topicTags": ["String", "Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 43.79002909664668,
      "frontEndId": "904",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Fruit Into Baskets",
      "titleSlug": "fruit-into-baskets",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 76.24156740762437,
      "frontEndId": "905",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Sort Array By Parity",
      "titleSlug": "sort-array-by-parity",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 38.8591443582687,
      "frontEndId": "906",
      "status": null,
      "difficulty": "Hard",
      "title": "Super Palindromes",
      "titleSlug": "super-palindromes",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 35.22155246865178,
      "frontEndId": "907",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sum of Subarray Minimums",
      "titleSlug": "sum-of-subarray-minimums",
      "topicTags": ["Array", "Dynamic Programming", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 69.14728548523352,
      "frontEndId": "908",
      "status": null,
      "difficulty": "Easy",
      "title": "Smallest Range I",
      "titleSlug": "smallest-range-i",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 44.31935509490906,
      "frontEndId": "909",
      "status": null,
      "difficulty": "Medium",
      "title": "Snakes and Ladders",
      "titleSlug": "snakes-and-ladders",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 35.82486251113342,
      "frontEndId": "910",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest Range II",
      "titleSlug": "smallest-range-ii",
      "topicTags": ["Array", "Math", "Greedy", "Sorting"]
   },
   {
      "acRate": 51.95955857017691,
      "frontEndId": "911",
      "status": null,
      "difficulty": "Medium",
      "title": "Online Election",
      "titleSlug": "online-election",
      "topicTags": ["Array", "Hash Table", "Binary Search", "Design"]
   },
   {
      "acRate": 57.869039241312294,
      "frontEndId": "912",
      "status": null,
      "difficulty": "Medium",
      "title": "Sort an Array",
      "titleSlug": "sort-an-array",
      "topicTags": [
         "Array",
         "Divide and Conquer",
         "Sorting",
         "Heap (Priority Queue)",
         "Merge Sort",
         "Bucket Sort",
         "Radix Sort",
         "Counting Sort"
      ]
   },
   {
      "acRate": 34.254931771683836,
      "frontEndId": "913",
      "status": null,
      "difficulty": "Hard",
      "title": "Cat and Mouse",
      "titleSlug": "cat-and-mouse",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Graph",
         "Topological Sort",
         "Memoization",
         "Game Theory"
      ]
   },
   {
      "acRate": 30.307412733619866,
      "frontEndId": "914",
      "status": null,
      "difficulty": "Easy",
      "title": "X of a Kind in a Deck of Cards",
      "titleSlug": "x-of-a-kind-in-a-deck-of-cards",
      "topicTags": ["Array", "Hash Table", "Math", "Counting", "Number Theory"]
   },
   {
      "acRate": 48.72168744671123,
      "frontEndId": "915",
      "status": null,
      "difficulty": "Medium",
      "title": "Partition Array into Disjoint Intervals",
      "titleSlug": "partition-array-into-disjoint-intervals",
      "topicTags": ["Array"]
   },
   {
      "acRate": 52.892648635767905,
      "frontEndId": "916",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Word Subsets",
      "titleSlug": "word-subsets",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 63.19608137015792,
      "frontEndId": "917",
      "status": null,
      "difficulty": "Easy",
      "title": "Reverse Only Letters",
      "titleSlug": "reverse-only-letters",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 43.85770095258482,
      "frontEndId": "918",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Sum Circular Subarray",
      "titleSlug": "maximum-sum-circular-subarray",
      "topicTags": [
         "Array",
         "Divide and Conquer",
         "Dynamic Programming",
         "Queue",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 64.7366571135024,
      "frontEndId": "919",
      "status": null,
      "difficulty": "Medium",
      "title": "Complete Binary Tree Inserter",
      "titleSlug": "complete-binary-tree-inserter",
      "topicTags": ["Tree", "Breadth-First Search", "Design", "Binary Tree"]
   },
   {
      "acRate": 60.95069186572817,
      "frontEndId": "920",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Music Playlists",
      "titleSlug": "number-of-music-playlists",
      "topicTags": ["Math", "Dynamic Programming", "Combinatorics"]
   },
   {
      "acRate": 75.07944893947399,
      "frontEndId": "921",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Add to Make Parentheses Valid",
      "titleSlug": "minimum-add-to-make-parentheses-valid",
      "topicTags": ["String", "Stack", "Greedy"]
   },
   {
      "acRate": 70.59642664696943,
      "frontEndId": "922",
      "status": null,
      "difficulty": "Easy",
      "title": "Sort Array By Parity II",
      "titleSlug": "sort-array-by-parity-ii",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 45.278099785107834,
      "frontEndId": "923",
      "status": "ac",
      "difficulty": "Medium",
      "title": "3Sum With Multiplicity",
      "titleSlug": "3sum-with-multiplicity",
      "topicTags": [
         "Array",
         "Hash Table",
         "Two Pointers",
         "Sorting",
         "Counting"
      ]
   },
   {
      "acRate": 41.99034662725025,
      "frontEndId": "924",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimize Malware Spread",
      "titleSlug": "minimize-malware-spread",
      "topicTags": [
         "Hash Table",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 32.58965502320124,
      "frontEndId": "925",
      "status": null,
      "difficulty": "Easy",
      "title": "Long Pressed Name",
      "titleSlug": "long-pressed-name",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 61.418595759238514,
      "frontEndId": "926",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Flip String to Monotone Increasing",
      "titleSlug": "flip-string-to-monotone-increasing",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 39.62641577110379,
      "frontEndId": "927",
      "status": null,
      "difficulty": "Hard",
      "title": "Three Equal Parts",
      "titleSlug": "three-equal-parts",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 42.83324643726104,
      "frontEndId": "928",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimize Malware Spread II",
      "titleSlug": "minimize-malware-spread-ii",
      "topicTags": [
         "Hash Table",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 67.02104358165545,
      "frontEndId": "929",
      "status": null,
      "difficulty": "Easy",
      "title": "Unique Email Addresses",
      "titleSlug": "unique-email-addresses",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 54.97525196830201,
      "frontEndId": "930",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Binary Subarrays With Sum",
      "titleSlug": "binary-subarrays-with-sum",
      "topicTags": ["Array", "Hash Table", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 65.49514603242409,
      "frontEndId": "931",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Falling Path Sum",
      "titleSlug": "minimum-falling-path-sum",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 65.45016353933552,
      "frontEndId": "932",
      "status": null,
      "difficulty": "Medium",
      "title": "Beautiful Array",
      "titleSlug": "beautiful-array",
      "topicTags": ["Array", "Math", "Divide and Conquer"]
   },
   {
      "acRate": 73.76507725798359,
      "frontEndId": "933",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Recent Calls",
      "titleSlug": "number-of-recent-calls",
      "topicTags": ["Design", "Queue", "Data Stream"]
   },
   {
      "acRate": 57.72855694114072,
      "frontEndId": "934",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest Bridge",
      "titleSlug": "shortest-bridge",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 51.39045644560484,
      "frontEndId": "935",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Knight Dialer",
      "titleSlug": "knight-dialer",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 62.57634586859785,
      "frontEndId": "936",
      "status": null,
      "difficulty": "Hard",
      "title": "Stamping The Sequence",
      "titleSlug": "stamping-the-sequence",
      "topicTags": ["String", "Stack", "Greedy", "Queue"]
   },
   {
      "acRate": 56.35080482735285,
      "frontEndId": "937",
      "status": null,
      "difficulty": "Medium",
      "title": "Reorder Data in Log Files",
      "titleSlug": "reorder-data-in-log-files",
      "topicTags": ["Array", "String", "Sorting"]
   },
   {
      "acRate": 85.91550170474659,
      "frontEndId": "938",
      "status": null,
      "difficulty": "Easy",
      "title": "Range Sum of BST",
      "titleSlug": "range-sum-of-bst",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 53.14833548105457,
      "frontEndId": "939",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Area Rectangle",
      "titleSlug": "minimum-area-rectangle",
      "topicTags": ["Array", "Hash Table", "Math", "Geometry", "Sorting"]
   },
   {
      "acRate": 43.240026659049796,
      "frontEndId": "940",
      "status": null,
      "difficulty": "Hard",
      "title": "Distinct Subsequences II",
      "titleSlug": "distinct-subsequences-ii",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 33.34892434867461,
      "frontEndId": "941",
      "status": null,
      "difficulty": "Easy",
      "title": "Valid Mountain Array",
      "titleSlug": "valid-mountain-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 77.96714162845608,
      "frontEndId": "942",
      "status": "ac",
      "difficulty": "Easy",
      "title": "DI String Match",
      "titleSlug": "di-string-match",
      "topicTags": ["Array", "Two Pointers", "String", "Greedy"]
   },
   {
      "acRate": 43.81565189415266,
      "frontEndId": "943",
      "status": null,
      "difficulty": "Hard",
      "title": "Find the Shortest Superstring",
      "titleSlug": "find-the-shortest-superstring",
      "topicTags": [
         "Array",
         "String",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 74.61979483504304,
      "frontEndId": "944",
      "status": null,
      "difficulty": "Easy",
      "title": "Delete Columns to Make Sorted",
      "titleSlug": "delete-columns-to-make-sorted",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 51.95435524895703,
      "frontEndId": "945",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Increment to Make Array Unique",
      "titleSlug": "minimum-increment-to-make-array-unique",
      "topicTags": ["Array", "Greedy", "Sorting", "Counting"]
   },
   {
      "acRate": 69.40206005162281,
      "frontEndId": "946",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Validate Stack Sequences",
      "titleSlug": "validate-stack-sequences",
      "topicTags": ["Array", "Stack", "Simulation"]
   },
   {
      "acRate": 58.87830922153331,
      "frontEndId": "947",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Most Stones Removed with Same Row or Column",
      "titleSlug": "most-stones-removed-with-same-row-or-column",
      "topicTags": ["Hash Table", "Depth-First Search", "Union Find", "Graph"]
   },
   {
      "acRate": 52.1882526959633,
      "frontEndId": "948",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Bag of Tokens",
      "titleSlug": "bag-of-tokens",
      "topicTags": ["Array", "Two Pointers", "Greedy", "Sorting"]
   },
   {
      "acRate": 35.12551070018168,
      "frontEndId": "949",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Time for Given Digits",
      "titleSlug": "largest-time-for-given-digits",
      "topicTags": ["String", "Enumeration"]
   },
   {
      "acRate": 77.94271857386289,
      "frontEndId": "950",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Reveal Cards In Increasing Order",
      "titleSlug": "reveal-cards-in-increasing-order",
      "topicTags": ["Array", "Queue", "Sorting", "Simulation"]
   },
   {
      "acRate": 66.9164585067999,
      "frontEndId": "951",
      "status": null,
      "difficulty": "Medium",
      "title": "Flip Equivalent Binary Trees",
      "titleSlug": "flip-equivalent-binary-trees",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 40.32496423970854,
      "frontEndId": "952",
      "status": null,
      "difficulty": "Hard",
      "title": "Largest Component Size by Common Factor",
      "titleSlug": "largest-component-size-by-common-factor",
      "topicTags": [
         "Array",
         "Hash Table",
         "Math",
         "Union Find",
         "Number Theory"
      ]
   },
   {
      "acRate": 54.645674894578214,
      "frontEndId": "953",
      "status": null,
      "difficulty": "Easy",
      "title": "Verifying an Alien Dictionary",
      "titleSlug": "verifying-an-alien-dictionary",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 39.05536205401244,
      "frontEndId": "954",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Array of Doubled Pairs",
      "titleSlug": "array-of-doubled-pairs",
      "topicTags": ["Array", "Hash Table", "Greedy", "Sorting"]
   },
   {
      "acRate": 34.936257105539106,
      "frontEndId": "955",
      "status": null,
      "difficulty": "Medium",
      "title": "Delete Columns to Make Sorted II",
      "titleSlug": "delete-columns-to-make-sorted-ii",
      "topicTags": ["Array", "String", "Greedy"]
   },
   {
      "acRate": 52.56254302337643,
      "frontEndId": "956",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Tallest Billboard",
      "titleSlug": "tallest-billboard",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 38.99516791919617,
      "frontEndId": "957",
      "status": null,
      "difficulty": "Medium",
      "title": "Prison Cells After N Days",
      "titleSlug": "prison-cells-after-n-days",
      "topicTags": ["Array", "Hash Table", "Math", "Bit Manipulation"]
   },
   {
      "acRate": 56.34976305855265,
      "frontEndId": "958",
      "status": null,
      "difficulty": "Medium",
      "title": "Check Completeness of a Binary Tree",
      "titleSlug": "check-completeness-of-a-binary-tree",
      "topicTags": ["Tree", "Breadth-First Search", "Binary Tree"]
   },
   {
      "acRate": 69.32548407688488,
      "frontEndId": "959",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Regions Cut By Slashes",
      "titleSlug": "regions-cut-by-slashes",
      "topicTags": [
         "Array",
         "Hash Table",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 57.53012048192772,
      "frontEndId": "960",
      "status": null,
      "difficulty": "Hard",
      "title": "Delete Columns to Make Sorted III",
      "titleSlug": "delete-columns-to-make-sorted-iii",
      "topicTags": ["Array", "String", "Dynamic Programming"]
   },
   {
      "acRate": 76.28702924797864,
      "frontEndId": "961",
      "status": null,
      "difficulty": "Easy",
      "title": "N-Repeated Element in Size 2N Array",
      "titleSlug": "n-repeated-element-in-size-2n-array",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 49.327436677962204,
      "frontEndId": "962",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Width Ramp",
      "titleSlug": "maximum-width-ramp",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 54.64449782947697,
      "frontEndId": "963",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Area Rectangle II",
      "titleSlug": "minimum-area-rectangle-ii",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 48.047923982648214,
      "frontEndId": "964",
      "status": null,
      "difficulty": "Hard",
      "title": "Least Operators to Express Number",
      "titleSlug": "least-operators-to-express-number",
      "topicTags": ["Math", "Dynamic Programming", "Memoization"]
   },
   {
      "acRate": 70.26228194964297,
      "frontEndId": "965",
      "status": null,
      "difficulty": "Easy",
      "title": "Univalued Binary Tree",
      "titleSlug": "univalued-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 51.25287401114532,
      "frontEndId": "966",
      "status": null,
      "difficulty": "Medium",
      "title": "Vowel Spellchecker",
      "titleSlug": "vowel-spellchecker",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 57.66408263984303,
      "frontEndId": "967",
      "status": null,
      "difficulty": "Medium",
      "title": "Numbers With Same Consecutive Differences",
      "titleSlug": "numbers-with-same-consecutive-differences",
      "topicTags": ["Backtracking", "Breadth-First Search"]
   },
   {
      "acRate": 46.47779062895431,
      "frontEndId": "968",
      "status": null,
      "difficulty": "Hard",
      "title": "Binary Tree Cameras",
      "titleSlug": "binary-tree-cameras",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 70.341542936598,
      "frontEndId": "969",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Pancake Sorting",
      "titleSlug": "pancake-sorting",
      "topicTags": ["Array", "Two Pointers", "Greedy", "Sorting"]
   },
   {
      "acRate": 43.66044651782739,
      "frontEndId": "970",
      "status": null,
      "difficulty": "Medium",
      "title": "Powerful Integers",
      "titleSlug": "powerful-integers",
      "topicTags": ["Hash Table", "Math"]
   },
   {
      "acRate": 50.256506506506504,
      "frontEndId": "971",
      "status": null,
      "difficulty": "Medium",
      "title": "Flip Binary Tree To Match Preorder Traversal",
      "titleSlug": "flip-binary-tree-to-match-preorder-traversal",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 43.4890558640967,
      "frontEndId": "972",
      "status": null,
      "difficulty": "Hard",
      "title": "Equal Rational Numbers",
      "titleSlug": "equal-rational-numbers",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 65.89836341750922,
      "frontEndId": "973",
      "status": "ac",
      "difficulty": "Medium",
      "title": "K Closest Points to Origin",
      "titleSlug": "k-closest-points-to-origin",
      "topicTags": [
         "Array",
         "Math",
         "Divide and Conquer",
         "Geometry",
         "Sorting",
         "Heap (Priority Queue)",
         "Quickselect"
      ]
   },
   {
      "acRate": 53.964791370878686,
      "frontEndId": "974",
      "status": null,
      "difficulty": "Medium",
      "title": "Subarray Sums Divisible by K",
      "titleSlug": "subarray-sums-divisible-by-k",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 39.28479025147501,
      "frontEndId": "975",
      "status": null,
      "difficulty": "Hard",
      "title": "Odd Even Jump",
      "titleSlug": "odd-even-jump",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Stack",
         "Monotonic Stack",
         "Ordered Set"
      ]
   },
   {
      "acRate": 55.057731366451804,
      "frontEndId": "976",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Largest Perimeter Triangle",
      "titleSlug": "largest-perimeter-triangle",
      "topicTags": ["Array", "Math", "Greedy", "Sorting"]
   },
   {
      "acRate": 71.7807252716241,
      "frontEndId": "977",
      "status": null,
      "difficulty": "Easy",
      "title": "Squares of a Sorted Array",
      "titleSlug": "squares-of-a-sorted-array",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 47.237396597471516,
      "frontEndId": "978",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Turbulent Subarray",
      "titleSlug": "longest-turbulent-subarray",
      "topicTags": ["Array", "Dynamic Programming", "Sliding Window"]
   },
   {
      "acRate": 72.40434941372175,
      "frontEndId": "979",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Distribute Coins in Binary Tree",
      "titleSlug": "distribute-coins-in-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 81.74661681849297,
      "frontEndId": "980",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Unique Paths III",
      "titleSlug": "unique-paths-iii",
      "topicTags": ["Array", "Backtracking", "Bit Manipulation", "Matrix"]
   },
   {
      "acRate": 50.39248994188645,
      "frontEndId": "981",
      "status": null,
      "difficulty": "Medium",
      "title": "Time Based Key-Value Store",
      "titleSlug": "time-based-key-value-store",
      "topicTags": ["Hash Table", "String", "Binary Search", "Design"]
   },
   {
      "acRate": 57.85227232158795,
      "frontEndId": "982",
      "status": null,
      "difficulty": "Hard",
      "title": "Triples with Bitwise AND Equal To Zero",
      "titleSlug": "triples-with-bitwise-and-equal-to-zero",
      "topicTags": ["Array", "Hash Table", "Bit Manipulation"]
   },
   {
      "acRate": 65.54304801133344,
      "frontEndId": "983",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Cost For Tickets",
      "titleSlug": "minimum-cost-for-tickets",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 43.5785820525533,
      "frontEndId": "984",
      "status": null,
      "difficulty": "Medium",
      "title": "String Without AAA or BBB",
      "titleSlug": "string-without-aaa-or-bbb",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 68.01659692391561,
      "frontEndId": "985",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum of Even Numbers After Queries",
      "titleSlug": "sum-of-even-numbers-after-queries",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 71.28552322345229,
      "frontEndId": "986",
      "status": null,
      "difficulty": "Medium",
      "title": "Interval List Intersections",
      "titleSlug": "interval-list-intersections",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 46.30033733396062,
      "frontEndId": "987",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Vertical Order Traversal of a Binary Tree",
      "titleSlug": "vertical-order-traversal-of-a-binary-tree",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 50.76499191935013,
      "frontEndId": "988",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest String Starting From Leaf",
      "titleSlug": "smallest-string-starting-from-leaf",
      "topicTags": ["String", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 46.077414978240334,
      "frontEndId": "989",
      "status": null,
      "difficulty": "Easy",
      "title": "Add to Array-Form of Integer",
      "titleSlug": "add-to-array-form-of-integer",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 50.45504700156529,
      "frontEndId": "990",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Satisfiability of Equality Equations",
      "titleSlug": "satisfiability-of-equality-equations",
      "topicTags": ["Array", "String", "Union Find", "Graph"]
   },
   {
      "acRate": 54.241951911227645,
      "frontEndId": "991",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Broken Calculator",
      "titleSlug": "broken-calculator",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 55.87938120042929,
      "frontEndId": "992",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Subarrays with K Different Integers",
      "titleSlug": "subarrays-with-k-different-integers",
      "topicTags": ["Array", "Hash Table", "Sliding Window", "Counting"]
   },
   {
      "acRate": 55.27375453627834,
      "frontEndId": "993",
      "status": null,
      "difficulty": "Easy",
      "title": "Cousins in Binary Tree",
      "titleSlug": "cousins-in-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 53.55607426731963,
      "frontEndId": "994",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Rotting Oranges",
      "titleSlug": "rotting-oranges",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 51.39717722837928,
      "frontEndId": "995",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Number of K Consecutive Bit Flips",
      "titleSlug": "minimum-number-of-k-consecutive-bit-flips",
      "topicTags": [
         "Array",
         "Bit Manipulation",
         "Queue",
         "Sliding Window",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 49.18208990385323,
      "frontEndId": "996",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Squareful Arrays",
      "titleSlug": "number-of-squareful-arrays",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 49.25380783501773,
      "frontEndId": "997",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find the Town Judge",
      "titleSlug": "find-the-town-judge",
      "topicTags": ["Array", "Hash Table", "Graph"]
   },
   {
      "acRate": 68.13067891781522,
      "frontEndId": "998",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Binary Tree II",
      "titleSlug": "maximum-binary-tree-ii",
      "topicTags": ["Tree", "Binary Tree"]
   },
   {
      "acRate": 68.48501695669094,
      "frontEndId": "999",
      "status": null,
      "difficulty": "Easy",
      "title": "Available Captures for Rook",
      "titleSlug": "available-captures-for-rook",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 42.82177061434244,
      "frontEndId": "1000",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Cost to Merge Stones",
      "titleSlug": "minimum-cost-to-merge-stones",
      "topicTags": ["Array", "Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 36.30697460997247,
      "frontEndId": "1001",
      "status": null,
      "difficulty": "Hard",
      "title": "Grid Illumination",
      "titleSlug": "grid-illumination",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 68.64732882690289,
      "frontEndId": "1002",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Common Characters",
      "titleSlug": "find-common-characters",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 58.837354052197796,
      "frontEndId": "1003",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Check If Word Is Valid After Substitutions",
      "titleSlug": "check-if-word-is-valid-after-substitutions",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 62.77210085189363,
      "frontEndId": "1004",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Max Consecutive Ones III",
      "titleSlug": "max-consecutive-ones-iii",
      "topicTags": ["Array", "Binary Search", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 50.7930003393542,
      "frontEndId": "1005",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximize Sum Of Array After K Negations",
      "titleSlug": "maximize-sum-of-array-after-k-negations",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 56.36558563387831,
      "frontEndId": "1006",
      "status": null,
      "difficulty": "Medium",
      "title": "Clumsy Factorial",
      "titleSlug": "clumsy-factorial",
      "topicTags": ["Math", "Stack", "Simulation"]
   },
   {
      "acRate": 52.24393717188464,
      "frontEndId": "1007",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Domino Rotations For Equal Row",
      "titleSlug": "minimum-domino-rotations-for-equal-row",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 81.67574317005656,
      "frontEndId": "1008",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Construct Binary Search Tree from Preorder Traversal",
      "titleSlug": "construct-binary-search-tree-from-preorder-traversal",
      "topicTags": [
         "Array",
         "Stack",
         "Tree",
         "Binary Search Tree",
         "Monotonic Stack",
         "Binary Tree"
      ]
   },
   {
      "acRate": 60.848291403968744,
      "frontEndId": "1009",
      "status": null,
      "difficulty": "Easy",
      "title": "Complement of Base 10 Integer",
      "titleSlug": "complement-of-base-10-integer",
      "topicTags": ["Bit Manipulation"]
   },
   {
      "acRate": 52.667533217793185,
      "frontEndId": "1010",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Pairs of Songs With Total Durations Divisible by 60",
      "titleSlug": "pairs-of-songs-with-total-durations-divisible-by-60",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 68.48711708375218,
      "frontEndId": "1011",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Capacity To Ship Packages Within D Days",
      "titleSlug": "capacity-to-ship-packages-within-d-days",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 41.34851781727753,
      "frontEndId": "1012",
      "status": null,
      "difficulty": "Hard",
      "title": "Numbers With Repeated Digits",
      "titleSlug": "numbers-with-repeated-digits",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 42.17877924237026,
      "frontEndId": "1013",
      "status": null,
      "difficulty": "Easy",
      "title": "Partition Array Into Three Parts With Equal Sum",
      "titleSlug": "partition-array-into-three-parts-with-equal-sum",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 59.37728913112144,
      "frontEndId": "1014",
      "status": null,
      "difficulty": "Medium",
      "title": "Best Sightseeing Pair",
      "titleSlug": "best-sightseeing-pair",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 46.81067344345616,
      "frontEndId": "1015",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest Integer Divisible by K",
      "titleSlug": "smallest-integer-divisible-by-k",
      "topicTags": ["Hash Table", "Math"]
   },
   {
      "acRate": 57.34764689592259,
      "frontEndId": "1016",
      "status": null,
      "difficulty": "Medium",
      "title": "Binary String With Substrings Representing 1 To N",
      "titleSlug": "binary-string-with-substrings-representing-1-to-n",
      "topicTags": ["String"]
   },
   {
      "acRate": 60.48698406413936,
      "frontEndId": "1017",
      "status": null,
      "difficulty": "Medium",
      "title": "Convert to Base -2",
      "titleSlug": "convert-to-base-2",
      "topicTags": ["Math"]
   },
   {
      "acRate": 46.73530283935058,
      "frontEndId": "1018",
      "status": null,
      "difficulty": "Easy",
      "title": "Binary Prefix Divisible By 5",
      "titleSlug": "binary-prefix-divisible-by-5",
      "topicTags": ["Array"]
   },
   {
      "acRate": 60.14654033087808,
      "frontEndId": "1019",
      "status": null,
      "difficulty": "Medium",
      "title": "Next Greater Node In Linked List",
      "titleSlug": "next-greater-node-in-linked-list",
      "topicTags": ["Array", "Linked List", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 68.77862483183486,
      "frontEndId": "1020",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Enclaves",
      "titleSlug": "number-of-enclaves",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 81.62824873525258,
      "frontEndId": "1021",
      "status": null,
      "difficulty": "Easy",
      "title": "Remove Outermost Parentheses",
      "titleSlug": "remove-outermost-parentheses",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 73.35693067112011,
      "frontEndId": "1022",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of Root To Leaf Binary Numbers",
      "titleSlug": "sum-of-root-to-leaf-binary-numbers",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 61.406361432035375,
      "frontEndId": "1023",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Camelcase Matching",
      "titleSlug": "camelcase-matching",
      "topicTags": ["Two Pointers", "String", "Trie", "String Matching"]
   },
   {
      "acRate": 50.85631373444085,
      "frontEndId": "1024",
      "status": null,
      "difficulty": "Medium",
      "title": "Video Stitching",
      "titleSlug": "video-stitching",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 68.10182863839839,
      "frontEndId": "1025",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Divisor Game",
      "titleSlug": "divisor-game",
      "topicTags": ["Math", "Dynamic Programming", "Brainteaser", "Game Theory"]
   },
   {
      "acRate": 75.59051535567416,
      "frontEndId": "1026",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Difference Between Node and Ancestor",
      "titleSlug": "maximum-difference-between-node-and-ancestor",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 49.0222731539615,
      "frontEndId": "1027",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Arithmetic Subsequence",
      "titleSlug": "longest-arithmetic-subsequence",
      "topicTags": [
         "Array",
         "Hash Table",
         "Binary Search",
         "Dynamic Programming"
      ]
   },
   {
      "acRate": 73.6186130504184,
      "frontEndId": "1028",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Recover a Tree From Preorder Traversal",
      "titleSlug": "recover-a-tree-from-preorder-traversal",
      "topicTags": ["String", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 66.14542248619554,
      "frontEndId": "1029",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Two City Scheduling",
      "titleSlug": "two-city-scheduling",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 70.15257677951674,
      "frontEndId": "1030",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Matrix Cells in Distance Order",
      "titleSlug": "matrix-cells-in-distance-order",
      "topicTags": ["Array", "Math", "Geometry", "Sorting", "Matrix"]
   },
   {
      "acRate": 59.698576611777845,
      "frontEndId": "1031",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Sum of Two Non-Overlapping Subarrays",
      "titleSlug": "maximum-sum-of-two-non-overlapping-subarrays",
      "topicTags": ["Array", "Dynamic Programming", "Sliding Window"]
   },
   {
      "acRate": 51.73618947124445,
      "frontEndId": "1032",
      "status": null,
      "difficulty": "Hard",
      "title": "Stream of Characters",
      "titleSlug": "stream-of-characters",
      "topicTags": ["Array", "String", "Design", "Trie", "Data Stream"]
   },
   {
      "acRate": 47.0763951962862,
      "frontEndId": "1033",
      "status": null,
      "difficulty": "Medium",
      "title": "Moving Stones Until Consecutive",
      "titleSlug": "moving-stones-until-consecutive",
      "topicTags": ["Math", "Brainteaser"]
   },
   {
      "acRate": 49.092032118591725,
      "frontEndId": "1034",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Coloring A Border",
      "titleSlug": "coloring-a-border",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 62.47276362673138,
      "frontEndId": "1035",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Uncrossed Lines",
      "titleSlug": "uncrossed-lines",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 34.386610460131465,
      "frontEndId": "1036",
      "status": null,
      "difficulty": "Hard",
      "title": "Escape a Large Maze",
      "titleSlug": "escape-a-large-maze",
      "topicTags": [
         "Array",
         "Hash Table",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 36.834939170410955,
      "frontEndId": "1037",
      "status": null,
      "difficulty": "Easy",
      "title": "Valid Boomerang",
      "titleSlug": "valid-boomerang",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 85.63873922130846,
      "frontEndId": "1038",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Binary Search Tree to Greater Sum Tree",
      "titleSlug": "binary-search-tree-to-greater-sum-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 57.86624855136683,
      "frontEndId": "1039",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Score Triangulation of Polygon",
      "titleSlug": "minimum-score-triangulation-of-polygon",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 56.58324265505985,
      "frontEndId": "1040",
      "status": null,
      "difficulty": "Medium",
      "title": "Moving Stones Until Consecutive II",
      "titleSlug": "moving-stones-until-consecutive-ii",
      "topicTags": ["Array", "Math", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 55.46158838322381,
      "frontEndId": "1041",
      "status": null,
      "difficulty": "Medium",
      "title": "Robot Bounded In Circle",
      "titleSlug": "robot-bounded-in-circle",
      "topicTags": ["Math", "String", "Simulation"]
   },
   {
      "acRate": 50.895111880192175,
      "frontEndId": "1042",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Flower Planting With No Adjacent",
      "titleSlug": "flower-planting-with-no-adjacent",
      "topicTags": ["Depth-First Search", "Breadth-First Search", "Graph"]
   },
   {
      "acRate": 72.2054684358665,
      "frontEndId": "1043",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Partition Array for Maximum Sum",
      "titleSlug": "partition-array-for-maximum-sum",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 30.428345694478054,
      "frontEndId": "1044",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Longest Duplicate Substring",
      "titleSlug": "longest-duplicate-substring",
      "topicTags": [
         "String",
         "Binary Search",
         "Sliding Window",
         "Rolling Hash",
         "Suffix Array",
         "Hash Function"
      ]
   },
   {
      "acRate": 61.811971439741555,
      "frontEndId": "1045",
      "status": null,
      "difficulty": "Medium",
      "title": "Customers Who Bought All Products",
      "titleSlug": "customers-who-bought-all-products",
      "topicTags": ["Database"]
   },
   {
      "acRate": 65.15994419727387,
      "frontEndId": "1046",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Last Stone Weight",
      "titleSlug": "last-stone-weight",
      "topicTags": ["Array", "Heap (Priority Queue)"]
   },
   {
      "acRate": 69.06334794843634,
      "frontEndId": "1047",
      "status": null,
      "difficulty": "Easy",
      "title": "Remove All Adjacent Duplicates In String",
      "titleSlug": "remove-all-adjacent-duplicates-in-string",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 60.850662139002075,
      "frontEndId": "1048",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest String Chain",
      "titleSlug": "longest-string-chain",
      "topicTags": [
         "Array",
         "Hash Table",
         "Two Pointers",
         "String",
         "Dynamic Programming"
      ]
   },
   {
      "acRate": 54.46585552076547,
      "frontEndId": "1049",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Last Stone Weight II",
      "titleSlug": "last-stone-weight-ii",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 69.64163962805182,
      "frontEndId": "1050",
      "status": null,
      "difficulty": "Easy",
      "title": "Actors and Directors Who Cooperated At Least Three Times",
      "titleSlug": "actors-and-directors-who-cooperated-at-least-three-times",
      "topicTags": ["Database"]
   },
   {
      "acRate": 76.07347795309983,
      "frontEndId": "1051",
      "status": null,
      "difficulty": "Easy",
      "title": "Height Checker",
      "titleSlug": "height-checker",
      "topicTags": ["Array", "Sorting", "Counting Sort"]
   },
   {
      "acRate": 57.11331679073615,
      "frontEndId": "1052",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Grumpy Bookstore Owner",
      "titleSlug": "grumpy-bookstore-owner",
      "topicTags": ["Array", "Sliding Window"]
   },
   {
      "acRate": 50.06088360642719,
      "frontEndId": "1053",
      "status": null,
      "difficulty": "Medium",
      "title": "Previous Permutation With One Swap",
      "titleSlug": "previous-permutation-with-one-swap",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 46.11251912498102,
      "frontEndId": "1054",
      "status": null,
      "difficulty": "Medium",
      "title": "Distant Barcodes",
      "titleSlug": "distant-barcodes",
      "topicTags": [
         "Array",
         "Hash Table",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)",
         "Counting"
      ]
   },
   {
      "acRate": 59.846813769516515,
      "frontEndId": "1055",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest Way to Form String",
      "titleSlug": "shortest-way-to-form-string",
      "topicTags": ["Two Pointers", "String", "Greedy"]
   },
   {
      "acRate": 48.47986561302229,
      "frontEndId": "1056",
      "status": null,
      "difficulty": "Easy",
      "title": "Confusing Number",
      "titleSlug": "confusing-number",
      "topicTags": ["Math"]
   },
   {
      "acRate": 57.680872150644205,
      "frontEndId": "1057",
      "status": null,
      "difficulty": "Medium",
      "title": "Campus Bikes",
      "titleSlug": "campus-bikes",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 45.017270711965764,
      "frontEndId": "1058",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimize Rounding Error to Meet Target",
      "titleSlug": "minimize-rounding-error-to-meet-target",
      "topicTags": ["Array", "Math", "String", "Greedy"]
   },
   {
      "acRate": 38.36131435227487,
      "frontEndId": "1059",
      "status": null,
      "difficulty": "Medium",
      "title": "All Paths from Source Lead to Destination",
      "titleSlug": "all-paths-from-source-lead-to-destination",
      "topicTags": ["Depth-First Search", "Graph"]
   },
   {
      "acRate": 55.51640964625164,
      "frontEndId": "1060",
      "status": null,
      "difficulty": "Medium",
      "title": "Missing Element in Sorted Array",
      "titleSlug": "missing-element-in-sorted-array",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 76.54095450416976,
      "frontEndId": "1061",
      "status": null,
      "difficulty": "Medium",
      "title": "Lexicographically Smallest Equivalent String",
      "titleSlug": "lexicographically-smallest-equivalent-string",
      "topicTags": ["String", "Union Find"]
   },
   {
      "acRate": 59.74930596449903,
      "frontEndId": "1062",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Repeating Substring",
      "titleSlug": "longest-repeating-substring",
      "topicTags": [
         "String",
         "Binary Search",
         "Dynamic Programming",
         "Rolling Hash",
         "Suffix Array",
         "Hash Function"
      ]
   },
   {
      "acRate": 77.90135047302665,
      "frontEndId": "1063",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Valid Subarrays",
      "titleSlug": "number-of-valid-subarrays",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 64.13180472249638,
      "frontEndId": "1064",
      "status": null,
      "difficulty": "Easy",
      "title": "Fixed Point",
      "titleSlug": "fixed-point",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 66.97548098888268,
      "frontEndId": "1065",
      "status": null,
      "difficulty": "Easy",
      "title": "Index Pairs of a String",
      "titleSlug": "index-pairs-of-a-string",
      "topicTags": ["Array", "String", "Trie", "Sorting"]
   },
   {
      "acRate": 54.90080770015482,
      "frontEndId": "1066",
      "status": null,
      "difficulty": "Medium",
      "title": "Campus Bikes II",
      "titleSlug": "campus-bikes-ii",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 46.0238326848249,
      "frontEndId": "1067",
      "status": null,
      "difficulty": "Hard",
      "title": "Digit Count in Range",
      "titleSlug": "digit-count-in-range",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 80.39383809890688,
      "frontEndId": "1068",
      "status": null,
      "difficulty": "Easy",
      "title": "Product Sales Analysis I",
      "titleSlug": "product-sales-analysis-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 81.83448545715405,
      "frontEndId": "1069",
      "status": null,
      "difficulty": "Easy",
      "title": "Product Sales Analysis II",
      "titleSlug": "product-sales-analysis-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 43.40047519415582,
      "frontEndId": "1070",
      "status": null,
      "difficulty": "Medium",
      "title": "Product Sales Analysis III",
      "titleSlug": "product-sales-analysis-iii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 52.16222121380192,
      "frontEndId": "1071",
      "status": null,
      "difficulty": "Easy",
      "title": "Greatest Common Divisor of Strings",
      "titleSlug": "greatest-common-divisor-of-strings",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 63.77985710442139,
      "frontEndId": "1072",
      "status": null,
      "difficulty": "Medium",
      "title": "Flip Columns For Maximum Number of Equal Rows",
      "titleSlug": "flip-columns-for-maximum-number-of-equal-rows",
      "topicTags": ["Array", "Hash Table", "Matrix"]
   },
   {
      "acRate": 36.536792683740906,
      "frontEndId": "1073",
      "status": null,
      "difficulty": "Medium",
      "title": "Adding Two Negabinary Numbers",
      "titleSlug": "adding-two-negabinary-numbers",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 69.5990694067468,
      "frontEndId": "1074",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Number of Submatrices That Sum to Target",
      "titleSlug": "number-of-submatrices-that-sum-to-target",
      "topicTags": ["Array", "Hash Table", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 64.83167851477587,
      "frontEndId": "1075",
      "status": null,
      "difficulty": "Easy",
      "title": "Project Employees I",
      "titleSlug": "project-employees-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 49.89372758682035,
      "frontEndId": "1076",
      "status": null,
      "difficulty": "Easy",
      "title": "Project Employees II",
      "titleSlug": "project-employees-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 76.66296451942127,
      "frontEndId": "1077",
      "status": null,
      "difficulty": "Medium",
      "title": "Project Employees III",
      "titleSlug": "project-employees-iii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 63.37170910970112,
      "frontEndId": "1078",
      "status": null,
      "difficulty": "Easy",
      "title": "Occurrences After Bigram",
      "titleSlug": "occurrences-after-bigram",
      "topicTags": ["String"]
   },
   {
      "acRate": 76.12881806108898,
      "frontEndId": "1079",
      "status": null,
      "difficulty": "Medium",
      "title": "Letter Tile Possibilities",
      "titleSlug": "letter-tile-possibilities",
      "topicTags": ["Hash Table", "String", "Backtracking", "Counting"]
   },
   {
      "acRate": 54.39459424590375,
      "frontEndId": "1080",
      "status": null,
      "difficulty": "Medium",
      "title": "Insufficient Nodes in Root to Leaf Paths",
      "titleSlug": "insufficient-nodes-in-root-to-leaf-paths",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 60.35117890190638,
      "frontEndId": "1081",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Smallest Subsequence of Distinct Characters",
      "titleSlug": "smallest-subsequence-of-distinct-characters",
      "topicTags": ["String", "Stack", "Greedy", "Monotonic Stack"]
   },
   {
      "acRate": 74.29052723098451,
      "frontEndId": "1082",
      "status": null,
      "difficulty": "Easy",
      "title": "Sales Analysis I",
      "titleSlug": "sales-analysis-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 49.69286516187329,
      "frontEndId": "1083",
      "status": null,
      "difficulty": "Easy",
      "title": "Sales Analysis II",
      "titleSlug": "sales-analysis-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 47.24759318686744,
      "frontEndId": "1084",
      "status": null,
      "difficulty": "Easy",
      "title": "Sales Analysis III",
      "titleSlug": "sales-analysis-iii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 76.35735439289239,
      "frontEndId": "1085",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of Digits in the Minimum Number",
      "titleSlug": "sum-of-digits-in-the-minimum-number",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 74.81126878583565,
      "frontEndId": "1086",
      "status": null,
      "difficulty": "Easy",
      "title": "High Five",
      "titleSlug": "high-five",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 66.2593120727108,
      "frontEndId": "1087",
      "status": null,
      "difficulty": "Medium",
      "title": "Brace Expansion",
      "titleSlug": "brace-expansion",
      "topicTags": ["String", "Backtracking", "Breadth-First Search"]
   },
   {
      "acRate": 47.163115958041416,
      "frontEndId": "1088",
      "status": null,
      "difficulty": "Hard",
      "title": "Confusing Number II",
      "titleSlug": "confusing-number-ii",
      "topicTags": ["Math", "Backtracking"]
   },
   {
      "acRate": 51.60563846799175,
      "frontEndId": "1089",
      "status": null,
      "difficulty": "Easy",
      "title": "Duplicate Zeros",
      "titleSlug": "duplicate-zeros",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 61.53456792278289,
      "frontEndId": "1090",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Values From Labels",
      "titleSlug": "largest-values-from-labels",
      "topicTags": ["Array", "Hash Table", "Greedy", "Sorting", "Counting"]
   },
   {
      "acRate": 46.680193357670355,
      "frontEndId": "1091",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Shortest Path in Binary Matrix",
      "titleSlug": "shortest-path-in-binary-matrix",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 58.8465566249439,
      "frontEndId": "1092",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Shortest Common Supersequence ",
      "titleSlug": "shortest-common-supersequence",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 42.67552870090635,
      "frontEndId": "1093",
      "status": null,
      "difficulty": "Medium",
      "title": "Statistics from a Large Sample",
      "titleSlug": "statistics-from-a-large-sample",
      "topicTags": ["Array", "Math", "Probability and Statistics"]
   },
   {
      "acRate": 56.335184390189866,
      "frontEndId": "1094",
      "status": null,
      "difficulty": "Medium",
      "title": "Car Pooling",
      "titleSlug": "car-pooling",
      "topicTags": [
         "Array",
         "Sorting",
         "Heap (Priority Queue)",
         "Simulation",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 40.732036355639295,
      "frontEndId": "1095",
      "status": null,
      "difficulty": "Hard",
      "title": "Find in Mountain Array",
      "titleSlug": "find-in-mountain-array",
      "topicTags": ["Array", "Binary Search", "Interactive"]
   },
   {
      "acRate": 63.74080008690692,
      "frontEndId": "1096",
      "status": null,
      "difficulty": "Hard",
      "title": "Brace Expansion II",
      "titleSlug": "brace-expansion-ii",
      "topicTags": ["String", "Backtracking", "Stack", "Breadth-First Search"]
   },
   {
      "acRate": 51.79887938661162,
      "frontEndId": "1097",
      "status": null,
      "difficulty": "Hard",
      "title": "Game Play Analysis V",
      "titleSlug": "game-play-analysis-v",
      "topicTags": ["Database"]
   },
   {
      "acRate": 43.45782280867107,
      "frontEndId": "1098",
      "status": null,
      "difficulty": "Medium",
      "title": "Unpopular Books",
      "titleSlug": "unpopular-books",
      "topicTags": ["Database"]
   },
   {
      "acRate": 61.162386775590996,
      "frontEndId": "1099",
      "status": null,
      "difficulty": "Easy",
      "title": "Two Sum Less Than K",
      "titleSlug": "two-sum-less-than-k",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 74.69824955205073,
      "frontEndId": "1100",
      "status": null,
      "difficulty": "Medium",
      "title": "Find K-Length Substrings With No Repeated Characters",
      "titleSlug": "find-k-length-substrings-with-no-repeated-characters",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 64.38420313231697,
      "frontEndId": "1101",
      "status": null,
      "difficulty": "Medium",
      "title": "The Earliest Moment When Everyone Become Friends",
      "titleSlug": "the-earliest-moment-when-everyone-become-friends",
      "topicTags": ["Array", "Union Find"]
   },
   {
      "acRate": 53.48169418521177,
      "frontEndId": "1102",
      "status": null,
      "difficulty": "Medium",
      "title": "Path With Maximum Minimum Value",
      "titleSlug": "path-with-maximum-minimum-value",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 64.6637712976662,
      "frontEndId": "1103",
      "status": null,
      "difficulty": "Easy",
      "title": "Distribute Candies to People",
      "titleSlug": "distribute-candies-to-people",
      "topicTags": ["Math", "Simulation"]
   },
   {
      "acRate": 75.11520737327189,
      "frontEndId": "1104",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Path In Zigzag Labelled Binary Tree",
      "titleSlug": "path-in-zigzag-labelled-binary-tree",
      "topicTags": ["Math", "Tree", "Binary Tree"]
   },
   {
      "acRate": 59.50390522368453,
      "frontEndId": "1105",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Filling Bookcase Shelves",
      "titleSlug": "filling-bookcase-shelves",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 58.673735245474525,
      "frontEndId": "1106",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Parsing A Boolean Expression",
      "titleSlug": "parsing-a-boolean-expression",
      "topicTags": ["String", "Stack", "Recursion"]
   },
   {
      "acRate": 44.76058957040116,
      "frontEndId": "1107",
      "status": null,
      "difficulty": "Medium",
      "title": "New Users Daily Count",
      "titleSlug": "new-users-daily-count",
      "topicTags": ["Database"]
   },
   {
      "acRate": 88.88269119915974,
      "frontEndId": "1108",
      "status": null,
      "difficulty": "Easy",
      "title": "Defanging an IP Address",
      "titleSlug": "defanging-an-ip-address",
      "topicTags": ["String"]
   },
   {
      "acRate": 60.92044523059666,
      "frontEndId": "1109",
      "status": null,
      "difficulty": "Medium",
      "title": "Corporate Flight Bookings",
      "titleSlug": "corporate-flight-bookings",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 69.18974596947135,
      "frontEndId": "1110",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Delete Nodes And Return Forest",
      "titleSlug": "delete-nodes-and-return-forest",
      "topicTags": [
         "Array",
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 72.648062758249,
      "frontEndId": "1111",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
      "titleSlug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 71.07267074198988,
      "frontEndId": "1112",
      "status": null,
      "difficulty": "Medium",
      "title": "Highest Grade For Each Student",
      "titleSlug": "highest-grade-for-each-student",
      "topicTags": ["Database"]
   },
   {
      "acRate": 64.90945193413057,
      "frontEndId": "1113",
      "status": null,
      "difficulty": "Easy",
      "title": "Reported Posts",
      "titleSlug": "reported-posts",
      "topicTags": ["Database"]
   },
   {
      "acRate": 68.98204177239899,
      "frontEndId": "1114",
      "status": null,
      "difficulty": "Easy",
      "title": "Print in Order",
      "titleSlug": "print-in-order",
      "topicTags": ["Concurrency"]
   },
   {
      "acRate": 64.22605545884545,
      "frontEndId": "1115",
      "status": null,
      "difficulty": "Medium",
      "title": "Print FooBar Alternately",
      "titleSlug": "print-foobar-alternately",
      "topicTags": ["Concurrency"]
   },
   {
      "acRate": 60.63421726788063,
      "frontEndId": "1116",
      "status": null,
      "difficulty": "Medium",
      "title": "Print Zero Even Odd",
      "titleSlug": "print-zero-even-odd",
      "topicTags": ["Concurrency"]
   },
   {
      "acRate": 55.968326606165,
      "frontEndId": "1117",
      "status": null,
      "difficulty": "Medium",
      "title": "Building H2O",
      "titleSlug": "building-h2o",
      "topicTags": ["Concurrency"]
   },
   {
      "acRate": 57.776485130516974,
      "frontEndId": "1118",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Days in a Month",
      "titleSlug": "number-of-days-in-a-month",
      "topicTags": ["Math"]
   },
   {
      "acRate": 90.79582734343322,
      "frontEndId": "1119",
      "status": null,
      "difficulty": "Easy",
      "title": "Remove Vowels from a String",
      "titleSlug": "remove-vowels-from-a-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 65.64543889845095,
      "frontEndId": "1120",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Average Subtree",
      "titleSlug": "maximum-average-subtree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 61.10889509373754,
      "frontEndId": "1121",
      "status": null,
      "difficulty": "Hard",
      "title": "Divide Array Into Increasing Sequences",
      "titleSlug": "divide-array-into-increasing-sequences",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 68.6699107866991,
      "frontEndId": "1122",
      "status": null,
      "difficulty": "Easy",
      "title": "Relative Sort Array",
      "titleSlug": "relative-sort-array",
      "topicTags": ["Array", "Hash Table", "Sorting", "Counting Sort"]
   },
   {
      "acRate": 71.27214782761241,
      "frontEndId": "1123",
      "status": null,
      "difficulty": "Medium",
      "title": "Lowest Common Ancestor of Deepest Leaves",
      "titleSlug": "lowest-common-ancestor-of-deepest-leaves",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 34.69583228571771,
      "frontEndId": "1124",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Well-Performing Interval",
      "titleSlug": "longest-well-performing-interval",
      "topicTags": [
         "Array",
         "Hash Table",
         "Stack",
         "Monotonic Stack",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 56.33649435256929,
      "frontEndId": "1125",
      "status": null,
      "difficulty": "Hard",
      "title": "Smallest Sufficient Team",
      "titleSlug": "smallest-sufficient-team",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 66.01946356515546,
      "frontEndId": "1126",
      "status": null,
      "difficulty": "Medium",
      "title": "Active Businesses",
      "titleSlug": "active-businesses",
      "topicTags": ["Database"]
   },
   {
      "acRate": 48.245015023217704,
      "frontEndId": "1127",
      "status": null,
      "difficulty": "Hard",
      "title": "User Purchase Platform",
      "titleSlug": "user-purchase-platform",
      "topicTags": ["Database"]
   },
   {
      "acRate": 47.695384662361256,
      "frontEndId": "1128",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Equivalent Domino Pairs",
      "titleSlug": "number-of-equivalent-domino-pairs",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 47.579153470662014,
      "frontEndId": "1129",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest Path with Alternating Colors",
      "titleSlug": "shortest-path-with-alternating-colors",
      "topicTags": ["Breadth-First Search", "Graph"]
   },
   {
      "acRate": 67.96189855415975,
      "frontEndId": "1130",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Cost Tree From Leaf Values",
      "titleSlug": "minimum-cost-tree-from-leaf-values",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Stack",
         "Greedy",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 48.54553796742372,
      "frontEndId": "1131",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum of Absolute Value Expression",
      "titleSlug": "maximum-of-absolute-value-expression",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 32.65945732275461,
      "frontEndId": "1132",
      "status": null,
      "difficulty": "Medium",
      "title": "Reported Posts II",
      "titleSlug": "reported-posts-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 68.21750059683467,
      "frontEndId": "1133",
      "status": null,
      "difficulty": "Easy",
      "title": "Largest Unique Number",
      "titleSlug": "largest-unique-number",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 77.82982223643926,
      "frontEndId": "1134",
      "status": null,
      "difficulty": "Easy",
      "title": "Armstrong Number",
      "titleSlug": "armstrong-number",
      "topicTags": ["Math"]
   },
   {
      "acRate": 61.659721606525395,
      "frontEndId": "1135",
      "status": null,
      "difficulty": "Medium",
      "title": "Connecting Cities With Minimum Cost",
      "titleSlug": "connecting-cities-with-minimum-cost",
      "topicTags": [
         "Union Find",
         "Graph",
         "Heap (Priority Queue)",
         "Minimum Spanning Tree"
      ]
   },
   {
      "acRate": 61.38304977502812,
      "frontEndId": "1136",
      "status": null,
      "difficulty": "Medium",
      "title": "Parallel Courses",
      "titleSlug": "parallel-courses",
      "topicTags": ["Graph", "Topological Sort"]
   },
   {
      "acRate": 63.51610806753535,
      "frontEndId": "1137",
      "status": "ac",
      "difficulty": "Easy",
      "title": "N-th Tribonacci Number",
      "titleSlug": "n-th-tribonacci-number",
      "topicTags": ["Math", "Dynamic Programming", "Memoization"]
   },
   {
      "acRate": 51.87134502923977,
      "frontEndId": "1138",
      "status": null,
      "difficulty": "Medium",
      "title": "Alphabet Board Path",
      "titleSlug": "alphabet-board-path",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 50.1953963755046,
      "frontEndId": "1139",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest 1-Bordered Square",
      "titleSlug": "largest-1-bordered-square",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 68.30321618677524,
      "frontEndId": "1140",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Stone Game II",
      "titleSlug": "stone-game-ii",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Prefix Sum",
         "Game Theory"
      ]
   },
   {
      "acRate": 47.86442354235806,
      "frontEndId": "1141",
      "status": null,
      "difficulty": "Easy",
      "title": "User Activity for the Past 30 Days I",
      "titleSlug": "user-activity-for-the-past-30-days-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 35.59633525865035,
      "frontEndId": "1142",
      "status": null,
      "difficulty": "Easy",
      "title": "User Activity for the Past 30 Days II",
      "titleSlug": "user-activity-for-the-past-30-days-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 57.62567502120596,
      "frontEndId": "1143",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Common Subsequence",
      "titleSlug": "longest-common-subsequence",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 47.54056340194294,
      "frontEndId": "1144",
      "status": null,
      "difficulty": "Medium",
      "title": "Decrease Elements To Make Array Zigzag",
      "titleSlug": "decrease-elements-to-make-array-zigzag",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 51.815114142639274,
      "frontEndId": "1145",
      "status": null,
      "difficulty": "Medium",
      "title": "Binary Tree Coloring Game",
      "titleSlug": "binary-tree-coloring-game",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 37.30328863186932,
      "frontEndId": "1146",
      "status": null,
      "difficulty": "Medium",
      "title": "Snapshot Array",
      "titleSlug": "snapshot-array",
      "topicTags": ["Array", "Hash Table", "Binary Search", "Design"]
   },
   {
      "acRate": 58.79336268929224,
      "frontEndId": "1147",
      "status": null,
      "difficulty": "Hard",
      "title": "Longest Chunked Palindrome Decomposition",
      "titleSlug": "longest-chunked-palindrome-decomposition",
      "topicTags": [
         "Two Pointers",
         "String",
         "Dynamic Programming",
         "Greedy",
         "Rolling Hash",
         "Hash Function"
      ]
   },
   {
      "acRate": 74.14033808246295,
      "frontEndId": "1148",
      "status": null,
      "difficulty": "Easy",
      "title": "Article Views I",
      "titleSlug": "article-views-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 46.884696707581625,
      "frontEndId": "1149",
      "status": null,
      "difficulty": "Medium",
      "title": "Article Views II",
      "titleSlug": "article-views-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 58.64238836700554,
      "frontEndId": "1150",
      "status": null,
      "difficulty": "Easy",
      "title": "Check If a Number Is Majority Element in a Sorted Array",
      "titleSlug": "check-if-a-number-is-majority-element-in-a-sorted-array",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 60.657871808276184,
      "frontEndId": "1151",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Swaps to Group All 1's Together",
      "titleSlug": "minimum-swaps-to-group-all-1s-together",
      "topicTags": ["Array", "Sliding Window"]
   },
   {
      "acRate": 42.98343448389075,
      "frontEndId": "1152",
      "status": null,
      "difficulty": "Medium",
      "title": "Analyze User Website Visit Pattern",
      "titleSlug": "analyze-user-website-visit-pattern",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 35.11815344514182,
      "frontEndId": "1153",
      "status": null,
      "difficulty": "Hard",
      "title": "String Transforms Into Another String",
      "titleSlug": "string-transforms-into-another-string",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 48.819431660740406,
      "frontEndId": "1154",
      "status": null,
      "difficulty": "Easy",
      "title": "Day of the Year",
      "titleSlug": "day-of-the-year",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 54.600761956288956,
      "frontEndId": "1155",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Dice Rolls With Target Sum",
      "titleSlug": "number-of-dice-rolls-with-target-sum",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 44.37468182589513,
      "frontEndId": "1156",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Swap For Longest Repeated Character Substring",
      "titleSlug": "swap-for-longest-repeated-character-substring",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 41.55909828866473,
      "frontEndId": "1157",
      "status": null,
      "difficulty": "Hard",
      "title": "Online Majority Element In Subarray",
      "titleSlug": "online-majority-element-in-subarray",
      "topicTags": [
         "Array",
         "Binary Search",
         "Design",
         "Binary Indexed Tree",
         "Segment Tree"
      ]
   },
   {
      "acRate": 57.54219791962113,
      "frontEndId": "1158",
      "status": null,
      "difficulty": "Medium",
      "title": "Market Analysis I",
      "titleSlug": "market-analysis-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 57.13529781393657,
      "frontEndId": "1159",
      "status": null,
      "difficulty": "Hard",
      "title": "Market Analysis II",
      "titleSlug": "market-analysis-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 67.12446351931331,
      "frontEndId": "1160",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Words That Can Be Formed by Characters",
      "titleSlug": "find-words-that-can-be-formed-by-characters",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 67.36422400773274,
      "frontEndId": "1161",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Level Sum of a Binary Tree",
      "titleSlug": "maximum-level-sum-of-a-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 51.69143820755882,
      "frontEndId": "1162",
      "status": null,
      "difficulty": "Medium",
      "title": "As Far from Land as Possible",
      "titleSlug": "as-far-from-land-as-possible",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 34.61453617235837,
      "frontEndId": "1163",
      "status": null,
      "difficulty": "Hard",
      "title": "Last Substring in Lexicographical Order",
      "titleSlug": "last-substring-in-lexicographical-order",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 57.42537855793155,
      "frontEndId": "1164",
      "status": null,
      "difficulty": "Medium",
      "title": "Product Price at a Given Date",
      "titleSlug": "product-price-at-a-given-date",
      "topicTags": ["Database"]
   },
   {
      "acRate": 86.73347567555157,
      "frontEndId": "1165",
      "status": null,
      "difficulty": "Easy",
      "title": "Single-Row Keyboard",
      "titleSlug": "single-row-keyboard",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 62.15143061052358,
      "frontEndId": "1166",
      "status": null,
      "difficulty": "Medium",
      "title": "Design File System",
      "titleSlug": "design-file-system",
      "topicTags": ["Hash Table", "String", "Design", "Trie"]
   },
   {
      "acRate": 68.99440459744012,
      "frontEndId": "1167",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Cost to Connect Sticks",
      "titleSlug": "minimum-cost-to-connect-sticks",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 64.66713214535078,
      "frontEndId": "1168",
      "status": null,
      "difficulty": "Hard",
      "title": "Optimize Water Distribution in a Village",
      "titleSlug": "optimize-water-distribution-in-a-village",
      "topicTags": ["Union Find", "Graph", "Minimum Spanning Tree"]
   },
   {
      "acRate": 31.104802923518665,
      "frontEndId": "1169",
      "status": null,
      "difficulty": "Medium",
      "title": "Invalid Transactions",
      "titleSlug": "invalid-transactions",
      "topicTags": ["Array", "Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 61.788565018776524,
      "frontEndId": "1170",
      "status": null,
      "difficulty": "Medium",
      "title": "Compare Strings by Frequency of the Smallest Character",
      "titleSlug": "compare-strings-by-frequency-of-the-smallest-character",
      "topicTags": ["Array", "Hash Table", "String", "Binary Search", "Sorting"]
   },
   {
      "acRate": 43.32460959841933,
      "frontEndId": "1171",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove Zero Sum Consecutive Nodes from Linked List",
      "titleSlug": "remove-zero-sum-consecutive-nodes-from-linked-list",
      "topicTags": ["Hash Table", "Linked List"]
   },
   {
      "acRate": 32.73959492978653,
      "frontEndId": "1172",
      "status": null,
      "difficulty": "Hard",
      "title": "Dinner Plate Stacks",
      "titleSlug": "dinner-plate-stacks",
      "topicTags": ["Hash Table", "Stack", "Design", "Heap (Priority Queue)"]
   },
   {
      "acRate": 81.09106560022956,
      "frontEndId": "1173",
      "status": null,
      "difficulty": "Easy",
      "title": "Immediate Food Delivery I",
      "titleSlug": "immediate-food-delivery-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 51.72667443989701,
      "frontEndId": "1174",
      "status": null,
      "difficulty": "Medium",
      "title": "Immediate Food Delivery II",
      "titleSlug": "immediate-food-delivery-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 55.67348747281077,
      "frontEndId": "1175",
      "status": null,
      "difficulty": "Easy",
      "title": "Prime Arrangements",
      "titleSlug": "prime-arrangements",
      "topicTags": ["Math"]
   },
   {
      "acRate": 52.99569678914266,
      "frontEndId": "1176",
      "status": null,
      "difficulty": "Easy",
      "title": "Diet Plan Performance",
      "titleSlug": "diet-plan-performance",
      "topicTags": ["Array", "Sliding Window"]
   },
   {
      "acRate": 38.570585654416995,
      "frontEndId": "1177",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Can Make Palindrome from Substring",
      "titleSlug": "can-make-palindrome-from-substring",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Bit Manipulation",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 46.61168877733955,
      "frontEndId": "1178",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Number of Valid Words for Each Puzzle",
      "titleSlug": "number-of-valid-words-for-each-puzzle",
      "topicTags": ["Array", "Hash Table", "String", "Bit Manipulation", "Trie"]
   },
   {
      "acRate": 78.70111785274337,
      "frontEndId": "1179",
      "status": null,
      "difficulty": "Easy",
      "title": "Reformat Department Table",
      "titleSlug": "reformat-department-table",
      "topicTags": ["Database"]
   },
   {
      "acRate": 79.3447248785076,
      "frontEndId": "1180",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Substrings with Only One Distinct Letter",
      "titleSlug": "count-substrings-with-only-one-distinct-letter",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 45.388631090487245,
      "frontEndId": "1181",
      "status": null,
      "difficulty": "Medium",
      "title": "Before and After Puzzle",
      "titleSlug": "before-and-after-puzzle",
      "topicTags": ["Array", "Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 55.34965982058922,
      "frontEndId": "1182",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest Distance to Target Color",
      "titleSlug": "shortest-distance-to-target-color",
      "topicTags": ["Array", "Binary Search", "Dynamic Programming"]
   },
   {
      "acRate": 67.99756171898811,
      "frontEndId": "1183",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Ones",
      "titleSlug": "maximum-number-of-ones",
      "topicTags": ["Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 53.802424218456494,
      "frontEndId": "1184",
      "status": null,
      "difficulty": "Easy",
      "title": "Distance Between Bus Stops",
      "titleSlug": "distance-between-bus-stops",
      "topicTags": ["Array"]
   },
   {
      "acRate": 57.24407382569904,
      "frontEndId": "1185",
      "status": null,
      "difficulty": "Easy",
      "title": "Day of the Week",
      "titleSlug": "day-of-the-week",
      "topicTags": ["Math"]
   },
   {
      "acRate": 42.4632789846461,
      "frontEndId": "1186",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Subarray Sum with One Deletion",
      "titleSlug": "maximum-subarray-sum-with-one-deletion",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 58.7928905117328,
      "frontEndId": "1187",
      "status": null,
      "difficulty": "Hard",
      "title": "Make Array Strictly Increasing",
      "titleSlug": "make-array-strictly-increasing",
      "topicTags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 72.6844033774096,
      "frontEndId": "1188",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Bounded Blocking Queue",
      "titleSlug": "design-bounded-blocking-queue",
      "topicTags": ["Concurrency"]
   },
   {
      "acRate": 60.277664786092004,
      "frontEndId": "1189",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Number of Balloons",
      "titleSlug": "maximum-number-of-balloons",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 65.99572336388552,
      "frontEndId": "1190",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Reverse Substrings Between Each Pair of Parentheses",
      "titleSlug": "reverse-substrings-between-each-pair-of-parentheses",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 23.573407202216064,
      "frontEndId": "1191",
      "status": null,
      "difficulty": "Medium",
      "title": "K-Concatenation Maximum Sum",
      "titleSlug": "k-concatenation-maximum-sum",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 55.30245967637204,
      "frontEndId": "1192",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Critical Connections in a Network",
      "titleSlug": "critical-connections-in-a-network",
      "topicTags": ["Depth-First Search", "Graph", "Biconnected Component"]
   },
   {
      "acRate": 59.732626311662116,
      "frontEndId": "1193",
      "status": null,
      "difficulty": "Medium",
      "title": "Monthly Transactions I",
      "titleSlug": "monthly-transactions-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 49.284427011555174,
      "frontEndId": "1194",
      "status": null,
      "difficulty": "Hard",
      "title": "Tournament Winners",
      "titleSlug": "tournament-winners",
      "topicTags": ["Database"]
   },
   {
      "acRate": 72.852328696103,
      "frontEndId": "1195",
      "status": null,
      "difficulty": "Medium",
      "title": "Fizz Buzz Multithreaded",
      "titleSlug": "fizz-buzz-multithreaded",
      "topicTags": ["Concurrency"]
   },
   {
      "acRate": 66.75035376820195,
      "frontEndId": "1196",
      "status": null,
      "difficulty": "Easy",
      "title": "How Many Apples Can You Put into the Basket",
      "titleSlug": "how-many-apples-can-you-put-into-the-basket",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 39.914834693182556,
      "frontEndId": "1197",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Knight Moves",
      "titleSlug": "minimum-knight-moves",
      "topicTags": ["Breadth-First Search"]
   },
   {
      "acRate": 76.5147047984079,
      "frontEndId": "1198",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Smallest Common Element in All Rows",
      "titleSlug": "find-smallest-common-element-in-all-rows",
      "topicTags": [
         "Array",
         "Hash Table",
         "Binary Search",
         "Matrix",
         "Counting"
      ]
   },
   {
      "acRate": 46.057373504396715,
      "frontEndId": "1199",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time to Build Blocks",
      "titleSlug": "minimum-time-to-build-blocks",
      "topicTags": ["Math", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 69.45099414356135,
      "frontEndId": "1200",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Absolute Difference",
      "titleSlug": "minimum-absolute-difference",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 29.242583037729762,
      "frontEndId": "1201",
      "status": null,
      "difficulty": "Medium",
      "title": "Ugly Number III",
      "titleSlug": "ugly-number-iii",
      "topicTags": ["Math", "Binary Search", "Number Theory"]
   },
   {
      "acRate": 57.9521314261436,
      "frontEndId": "1202",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Smallest String With Swaps",
      "titleSlug": "smallest-string-with-swaps",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Sorting"
      ]
   },
   {
      "acRate": 67.3123868021104,
      "frontEndId": "1203",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Sort Items by Groups Respecting Dependencies",
      "titleSlug": "sort-items-by-groups-respecting-dependencies",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 66.9728718025945,
      "frontEndId": "1204",
      "status": null,
      "difficulty": "Medium",
      "title": "Last Person to Fit in the Bus",
      "titleSlug": "last-person-to-fit-in-the-bus",
      "topicTags": ["Database"]
   },
   {
      "acRate": 42.131827194616356,
      "frontEndId": "1205",
      "status": null,
      "difficulty": "Medium",
      "title": "Monthly Transactions II",
      "titleSlug": "monthly-transactions-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 60.51724137931035,
      "frontEndId": "1206",
      "status": null,
      "difficulty": "Hard",
      "title": "Design Skiplist",
      "titleSlug": "design-skiplist",
      "topicTags": ["Linked List", "Design"]
   },
   {
      "acRate": 74.24353693931126,
      "frontEndId": "1207",
      "status": null,
      "difficulty": "Easy",
      "title": "Unique Number of Occurrences",
      "titleSlug": "unique-number-of-occurrences",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 49.81735720908411,
      "frontEndId": "1208",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Get Equal Substrings Within Budget",
      "titleSlug": "get-equal-substrings-within-budget",
      "topicTags": ["String", "Binary Search", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 56.739989283515,
      "frontEndId": "1209",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Remove All Adjacent Duplicates in String II",
      "titleSlug": "remove-all-adjacent-duplicates-in-string-ii",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 49.28559515205426,
      "frontEndId": "1210",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Moves to Reach Target with Rotations",
      "titleSlug": "minimum-moves-to-reach-target-with-rotations",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 64.13979312442957,
      "frontEndId": "1211",
      "status": null,
      "difficulty": "Easy",
      "title": "Queries Quality and Percentage",
      "titleSlug": "queries-quality-and-percentage",
      "topicTags": ["Database"]
   },
   {
      "acRate": 56.15246398030147,
      "frontEndId": "1212",
      "status": null,
      "difficulty": "Medium",
      "title": "Team Scores in Football Tournament",
      "titleSlug": "team-scores-in-football-tournament",
      "topicTags": ["Database"]
   },
   {
      "acRate": 79.85237807834253,
      "frontEndId": "1213",
      "status": null,
      "difficulty": "Easy",
      "title": "Intersection of Three Sorted Arrays",
      "titleSlug": "intersection-of-three-sorted-arrays",
      "topicTags": ["Array", "Hash Table", "Binary Search", "Counting"]
   },
   {
      "acRate": 67.01292911279536,
      "frontEndId": "1214",
      "status": null,
      "difficulty": "Medium",
      "title": "Two Sum BSTs",
      "titleSlug": "two-sum-bsts",
      "topicTags": [
         "Two Pointers",
         "Binary Search",
         "Stack",
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 46.5228826933193,
      "frontEndId": "1215",
      "status": null,
      "difficulty": "Medium",
      "title": "Stepping Numbers",
      "titleSlug": "stepping-numbers",
      "topicTags": ["Backtracking", "Breadth-First Search"]
   },
   {
      "acRate": 50.17705611815258,
      "frontEndId": "1216",
      "status": null,
      "difficulty": "Hard",
      "title": "Valid Palindrome III",
      "titleSlug": "valid-palindrome-iii",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 71.76411495270101,
      "frontEndId": "1217",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Cost to Move Chips to The Same Position",
      "titleSlug": "minimum-cost-to-move-chips-to-the-same-position",
      "topicTags": ["Array", "Math", "Greedy"]
   },
   {
      "acRate": 55.02825902567247,
      "frontEndId": "1218",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Arithmetic Subsequence of Given Difference",
      "titleSlug": "longest-arithmetic-subsequence-of-given-difference",
      "topicTags": ["Array", "Hash Table", "Dynamic Programming"]
   },
   {
      "acRate": 63.654725836155166,
      "frontEndId": "1219",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Path with Maximum Gold",
      "titleSlug": "path-with-maximum-gold",
      "topicTags": ["Array", "Backtracking", "Matrix"]
   },
   {
      "acRate": 59.762295037031755,
      "frontEndId": "1220",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Count Vowels Permutation",
      "titleSlug": "count-vowels-permutation",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 85.57701401630507,
      "frontEndId": "1221",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Split a String in Balanced Strings",
      "titleSlug": "split-a-string-in-balanced-strings",
      "topicTags": ["String", "Greedy", "Counting"]
   },
   {
      "acRate": 71.76875653459278,
      "frontEndId": "1222",
      "status": null,
      "difficulty": "Medium",
      "title": "Queens That Can Attack the King",
      "titleSlug": "queens-that-can-attack-the-king",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 48.77121593403652,
      "frontEndId": "1223",
      "status": null,
      "difficulty": "Hard",
      "title": "Dice Roll Simulation",
      "titleSlug": "dice-roll-simulation",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 36.95640644887569,
      "frontEndId": "1224",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Equal Frequency",
      "titleSlug": "maximum-equal-frequency",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 59.53854125392423,
      "frontEndId": "1225",
      "status": null,
      "difficulty": "Hard",
      "title": "Report Contiguous Dates",
      "titleSlug": "report-contiguous-dates",
      "topicTags": ["Database"]
   },
   {
      "acRate": 54.91625310173698,
      "frontEndId": "1226",
      "status": null,
      "difficulty": "Medium",
      "title": "The Dining Philosophers",
      "titleSlug": "the-dining-philosophers",
      "topicTags": ["Concurrency"]
   },
   {
      "acRate": 65.85317460317461,
      "frontEndId": "1227",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Airplane Seat Assignment Probability",
      "titleSlug": "airplane-seat-assignment-probability",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Brainteaser",
         "Probability and Statistics"
      ]
   },
   {
      "acRate": 51.62027589584524,
      "frontEndId": "1228",
      "status": null,
      "difficulty": "Easy",
      "title": "Missing Number In Arithmetic Progression",
      "titleSlug": "missing-number-in-arithmetic-progression",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 55.14795253143577,
      "frontEndId": "1229",
      "status": null,
      "difficulty": "Medium",
      "title": "Meeting Scheduler",
      "titleSlug": "meeting-scheduler",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 56.090027928371946,
      "frontEndId": "1230",
      "status": null,
      "difficulty": "Medium",
      "title": "Toss Strange Coins",
      "titleSlug": "toss-strange-coins",
      "topicTags": ["Math", "Dynamic Programming", "Probability and Statistics"]
   },
   {
      "acRate": 58.03282190025275,
      "frontEndId": "1231",
      "status": null,
      "difficulty": "Hard",
      "title": "Divide Chocolate",
      "titleSlug": "divide-chocolate",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 39.74492065846063,
      "frontEndId": "1232",
      "status": null,
      "difficulty": "Easy",
      "title": "Check If It Is a Straight Line",
      "titleSlug": "check-if-it-is-a-straight-line",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 65.72985862715039,
      "frontEndId": "1233",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Remove Sub-Folders from the Filesystem",
      "titleSlug": "remove-sub-folders-from-the-filesystem",
      "topicTags": ["Array", "String", "Depth-First Search", "Trie"]
   },
   {
      "acRate": 37.6864475727916,
      "frontEndId": "1234",
      "status": null,
      "difficulty": "Medium",
      "title": "Replace the Substring for Balanced String",
      "titleSlug": "replace-the-substring-for-balanced-string",
      "topicTags": ["String", "Sliding Window"]
   },
   {
      "acRate": 53.388213821049526,
      "frontEndId": "1235",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Profit in Job Scheduling",
      "titleSlug": "maximum-profit-in-job-scheduling",
      "topicTags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 67.61040601849193,
      "frontEndId": "1236",
      "status": null,
      "difficulty": "Medium",
      "title": "Web Crawler",
      "titleSlug": "web-crawler",
      "topicTags": [
         "String",
         "Depth-First Search",
         "Breadth-First Search",
         "Interactive"
      ]
   },
   {
      "acRate": 69.38681935606526,
      "frontEndId": "1237",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Positive Integer Solution for a Given Equation",
      "titleSlug": "find-positive-integer-solution-for-a-given-equation",
      "topicTags": ["Math", "Two Pointers", "Binary Search", "Interactive"]
   },
   {
      "acRate": 69.33551667672154,
      "frontEndId": "1238",
      "status": null,
      "difficulty": "Medium",
      "title": "Circular Permutation in Binary Representation",
      "titleSlug": "circular-permutation-in-binary-representation",
      "topicTags": ["Math", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 52.16465721346233,
      "frontEndId": "1239",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Length of a Concatenated String with Unique Characters",
      "titleSlug": "maximum-length-of-a-concatenated-string-with-unique-characters",
      "topicTags": ["Array", "String", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 54.108448562947956,
      "frontEndId": "1240",
      "status": null,
      "difficulty": "Hard",
      "title": "Tiling a Rectangle with the Fewest Squares",
      "titleSlug": "tiling-a-rectangle-with-the-fewest-squares",
      "topicTags": ["Backtracking"]
   },
   {
      "acRate": 65.4797190304113,
      "frontEndId": "1241",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Comments per Post",
      "titleSlug": "number-of-comments-per-post",
      "topicTags": ["Database"]
   },
   {
      "acRate": 48.67413264883663,
      "frontEndId": "1242",
      "status": null,
      "difficulty": "Medium",
      "title": "Web Crawler Multithreaded",
      "titleSlug": "web-crawler-multithreaded",
      "topicTags": ["Depth-First Search", "Breadth-First Search", "Concurrency"]
   },
   {
      "acRate": 51.61678635174961,
      "frontEndId": "1243",
      "status": null,
      "difficulty": "Easy",
      "title": "Array Transformation",
      "titleSlug": "array-transformation",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 68.12643348623854,
      "frontEndId": "1244",
      "status": null,
      "difficulty": "Medium",
      "title": "Design A Leaderboard",
      "titleSlug": "design-a-leaderboard",
      "topicTags": ["Hash Table", "Design", "Sorting"]
   },
   {
      "acRate": 61.14572979585595,
      "frontEndId": "1245",
      "status": null,
      "difficulty": "Medium",
      "title": "Tree Diameter",
      "titleSlug": "tree-diameter",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 46.60906349849242,
      "frontEndId": "1246",
      "status": null,
      "difficulty": "Hard",
      "title": "Palindrome Removal",
      "titleSlug": "palindrome-removal",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 64.33721179241915,
      "frontEndId": "1247",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Swaps to Make Strings Equal",
      "titleSlug": "minimum-swaps-to-make-strings-equal",
      "topicTags": ["Math", "String", "Greedy"]
   },
   {
      "acRate": 63.45513705260397,
      "frontEndId": "1248",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Number of Nice Subarrays",
      "titleSlug": "count-number-of-nice-subarrays",
      "topicTags": ["Array", "Hash Table", "Math", "Sliding Window"]
   },
   {
      "acRate": 66.30120025268478,
      "frontEndId": "1249",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Remove to Make Valid Parentheses",
      "titleSlug": "minimum-remove-to-make-valid-parentheses",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 58.97503671071953,
      "frontEndId": "1250",
      "status": null,
      "difficulty": "Hard",
      "title": "Check If It Is a Good Array",
      "titleSlug": "check-if-it-is-a-good-array",
      "topicTags": ["Array", "Math", "Number Theory"]
   },
   {
      "acRate": 59.93653354276557,
      "frontEndId": "1251",
      "status": null,
      "difficulty": "Easy",
      "title": "Average Selling Price",
      "titleSlug": "average-selling-price",
      "topicTags": ["Database"]
   },
   {
      "acRate": 78.46720898643184,
      "frontEndId": "1252",
      "status": null,
      "difficulty": "Easy",
      "title": "Cells with Odd Values in a Matrix",
      "titleSlug": "cells-with-odd-values-in-a-matrix",
      "topicTags": ["Array", "Math", "Simulation"]
   },
   {
      "acRate": 45.10852352119236,
      "frontEndId": "1253",
      "status": null,
      "difficulty": "Medium",
      "title": "Reconstruct a 2-Row Binary Matrix",
      "titleSlug": "reconstruct-a-2-row-binary-matrix",
      "topicTags": ["Array", "Greedy", "Matrix"]
   },
   {
      "acRate": 66.56398325701893,
      "frontEndId": "1254",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Closed Islands",
      "titleSlug": "number-of-closed-islands",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 72.44379985496737,
      "frontEndId": "1255",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Maximum Score Words Formed by Letters",
      "titleSlug": "maximum-score-words-formed-by-letters",
      "topicTags": [
         "Array",
         "String",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 69.54915703731768,
      "frontEndId": "1256",
      "status": null,
      "difficulty": "Medium",
      "title": "Encode Number",
      "titleSlug": "encode-number",
      "topicTags": ["Math", "String", "Bit Manipulation"]
   },
   {
      "acRate": 64.64903831215237,
      "frontEndId": "1257",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest Common Region",
      "titleSlug": "smallest-common-region",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 56.36976725059627,
      "frontEndId": "1258",
      "status": null,
      "difficulty": "Medium",
      "title": "Synonymous Sentences",
      "titleSlug": "synonymous-sentences",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Backtracking",
         "Union Find"
      ]
   },
   {
      "acRate": 60.69894687297759,
      "frontEndId": "1259",
      "status": null,
      "difficulty": "Hard",
      "title": "Handshakes That Don't Cross",
      "titleSlug": "handshakes-that-dont-cross",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 67.446627736045,
      "frontEndId": "1260",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Shift 2D Grid",
      "titleSlug": "shift-2d-grid",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 76.69522326064381,
      "frontEndId": "1261",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Elements in a Contaminated Binary Tree",
      "titleSlug": "find-elements-in-a-contaminated-binary-tree",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Design",
         "Binary Tree"
      ]
   },
   {
      "acRate": 50.713988912649114,
      "frontEndId": "1262",
      "status": null,
      "difficulty": "Medium",
      "title": "Greatest Sum Divisible by Three",
      "titleSlug": "greatest-sum-divisible-by-three",
      "topicTags": ["Array", "Dynamic Programming", "Greedy", "Sorting"]
   },
   {
      "acRate": 49.0999504559884,
      "frontEndId": "1263",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Moves to Move a Box to Their Target Location",
      "titleSlug": "minimum-moves-to-move-a-box-to-their-target-location",
      "topicTags": [
         "Array",
         "Breadth-First Search",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 65.7781966251178,
      "frontEndId": "1264",
      "status": null,
      "difficulty": "Medium",
      "title": "Page Recommendations",
      "titleSlug": "page-recommendations",
      "topicTags": ["Database"]
   },
   {
      "acRate": 94.20439752483193,
      "frontEndId": "1265",
      "status": null,
      "difficulty": "Medium",
      "title": "Print Immutable Linked List in Reverse",
      "titleSlug": "print-immutable-linked-list-in-reverse",
      "topicTags": ["Linked List", "Two Pointers", "Stack", "Recursion"]
   },
   {
      "acRate": 79.05498129662011,
      "frontEndId": "1266",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Minimum Time Visiting All Points",
      "titleSlug": "minimum-time-visiting-all-points",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 59.987361907044644,
      "frontEndId": "1267",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Servers that Communicate",
      "titleSlug": "count-servers-that-communicate",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix",
         "Counting"
      ]
   },
   {
      "acRate": 65.7881574199649,
      "frontEndId": "1268",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Search Suggestions System",
      "titleSlug": "search-suggestions-system",
      "topicTags": [
         "Array",
         "String",
         "Binary Search",
         "Trie",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 50.61947640983773,
      "frontEndId": "1269",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ways to Stay in the Same Place After Some Steps",
      "titleSlug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 85.76324040916334,
      "frontEndId": "1270",
      "status": null,
      "difficulty": "Medium",
      "title": "All People Report to the Given Manager",
      "titleSlug": "all-people-report-to-the-given-manager",
      "topicTags": ["Database"]
   },
   {
      "acRate": 57.30246948948605,
      "frontEndId": "1271",
      "status": null,
      "difficulty": "Easy",
      "title": "Hexspeak",
      "titleSlug": "hexspeak",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 64.18774629592937,
      "frontEndId": "1272",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove Interval",
      "titleSlug": "remove-interval",
      "topicTags": ["Array"]
   },
   {
      "acRate": 61.224999999999994,
      "frontEndId": "1273",
      "status": null,
      "difficulty": "Medium",
      "title": "Delete Tree Nodes",
      "titleSlug": "delete-tree-nodes",
      "topicTags": ["Tree", "Depth-First Search", "Breadth-First Search"]
   },
   {
      "acRate": 68.81671007609417,
      "frontEndId": "1274",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ships in a Rectangle",
      "titleSlug": "number-of-ships-in-a-rectangle",
      "topicTags": ["Array", "Divide and Conquer", "Interactive"]
   },
   {
      "acRate": 54.09300575134134,
      "frontEndId": "1275",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Winner on a Tic Tac Toe Game",
      "titleSlug": "find-winner-on-a-tic-tac-toe-game",
      "topicTags": ["Array", "Hash Table", "Matrix", "Simulation"]
   },
   {
      "acRate": 50.908853429697196,
      "frontEndId": "1276",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Burgers with No Waste of Ingredients",
      "titleSlug": "number-of-burgers-with-no-waste-of-ingredients",
      "topicTags": ["Math"]
   },
   {
      "acRate": 74.83263846671295,
      "frontEndId": "1277",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Square Submatrices with All Ones",
      "titleSlug": "count-square-submatrices-with-all-ones",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 60.71209764833404,
      "frontEndId": "1278",
      "status": null,
      "difficulty": "Hard",
      "title": "Palindrome Partitioning III",
      "titleSlug": "palindrome-partitioning-iii",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 73.29756751813693,
      "frontEndId": "1279",
      "status": null,
      "difficulty": "Easy",
      "title": "Traffic Light Controlled Intersection",
      "titleSlug": "traffic-light-controlled-intersection",
      "topicTags": ["Concurrency"]
   },
   {
      "acRate": 57.10083399780187,
      "frontEndId": "1280",
      "status": null,
      "difficulty": "Easy",
      "title": "Students and Examinations",
      "titleSlug": "students-and-examinations",
      "topicTags": ["Database"]
   },
   {
      "acRate": 86.36587383042537,
      "frontEndId": "1281",
      "status": null,
      "difficulty": "Easy",
      "title": "Subtract the Product and Sum of Digits of an Integer",
      "titleSlug": "subtract-the-product-and-sum-of-digits-of-an-integer",
      "topicTags": ["Math"]
   },
   {
      "acRate": 87.77238798954632,
      "frontEndId": "1282",
      "status": null,
      "difficulty": "Medium",
      "title": "Group the People Given the Group Size They Belong To",
      "titleSlug": "group-the-people-given-the-group-size-they-belong-to",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 58.140134495978224,
      "frontEndId": "1283",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find the Smallest Divisor Given a Threshold",
      "titleSlug": "find-the-smallest-divisor-given-a-threshold",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 71.99953336444237,
      "frontEndId": "1284",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
      "titleSlug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
      "topicTags": [
         "Array",
         "Bit Manipulation",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 83.74932574903153,
      "frontEndId": "1285",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Start and End Number of Continuous Ranges",
      "titleSlug": "find-the-start-and-end-number-of-continuous-ranges",
      "topicTags": ["Database"]
   },
   {
      "acRate": 73.2514475119577,
      "frontEndId": "1286",
      "status": null,
      "difficulty": "Medium",
      "title": "Iterator for Combination",
      "titleSlug": "iterator-for-combination",
      "topicTags": ["String", "Backtracking", "Design", "Iterator"]
   },
   {
      "acRate": 59.07433263175443,
      "frontEndId": "1287",
      "status": null,
      "difficulty": "Easy",
      "title": "Element Appearing More Than 25% In Sorted Array",
      "titleSlug": "element-appearing-more-than-25-in-sorted-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 56.657717110380645,
      "frontEndId": "1288",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Remove Covered Intervals",
      "titleSlug": "remove-covered-intervals",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 58.03413847007211,
      "frontEndId": "1289",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Falling Path Sum II",
      "titleSlug": "minimum-falling-path-sum-ii",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 81.4527822566613,
      "frontEndId": "1290",
      "status": null,
      "difficulty": "Easy",
      "title": "Convert Binary Number in a Linked List to Integer",
      "titleSlug": "convert-binary-number-in-a-linked-list-to-integer",
      "topicTags": ["Linked List", "Math"]
   },
   {
      "acRate": 61.33505041136475,
      "frontEndId": "1291",
      "status": null,
      "difficulty": "Medium",
      "title": "Sequential Digits",
      "titleSlug": "sequential-digits",
      "topicTags": ["Enumeration"]
   },
   {
      "acRate": 53.34392482295874,
      "frontEndId": "1292",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
      "titleSlug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
      "topicTags": ["Array", "Binary Search", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 45.16247306308501,
      "frontEndId": "1293",
      "status": null,
      "difficulty": "Hard",
      "title": "Shortest Path in a Grid with Obstacles Elimination",
      "titleSlug": "shortest-path-in-a-grid-with-obstacles-elimination",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 66.63677130044843,
      "frontEndId": "1294",
      "status": null,
      "difficulty": "Easy",
      "title": "Weather Type in Each Country",
      "titleSlug": "weather-type-in-each-country",
      "topicTags": ["Database"]
   },
   {
      "acRate": 77.02616716340415,
      "frontEndId": "1295",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Numbers with Even Number of Digits",
      "titleSlug": "find-numbers-with-even-number-of-digits",
      "topicTags": ["Array"]
   },
   {
      "acRate": 56.613245517746066,
      "frontEndId": "1296",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Divide Array in Sets of K Consecutive Numbers",
      "titleSlug": "divide-array-in-sets-of-k-consecutive-numbers",
      "topicTags": ["Array", "Hash Table", "Greedy", "Sorting"]
   },
   {
      "acRate": 51.81228495685036,
      "frontEndId": "1297",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Number of Occurrences of a Substring",
      "titleSlug": "maximum-number-of-occurrences-of-a-substring",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 58.36456696086729,
      "frontEndId": "1298",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Candies You Can Get from Boxes",
      "titleSlug": "maximum-candies-you-can-get-from-boxes",
      "topicTags": ["Array", "Breadth-First Search", "Graph"]
   },
   {
      "acRate": 71.72534162937905,
      "frontEndId": "1299",
      "status": null,
      "difficulty": "Easy",
      "title": "Replace Elements with Greatest Element on Right Side",
      "titleSlug": "replace-elements-with-greatest-element-on-right-side",
      "topicTags": ["Array"]
   },
   {
      "acRate": 43.991913980628276,
      "frontEndId": "1300",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum of Mutated Array Closest to Target",
      "titleSlug": "sum-of-mutated-array-closest-to-target",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 38.929759467758444,
      "frontEndId": "1301",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Paths with Max Score",
      "titleSlug": "number-of-paths-with-max-score",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 86.3573905077749,
      "frontEndId": "1302",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Deepest Leaves Sum",
      "titleSlug": "deepest-leaves-sum",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 89.60350838359803,
      "frontEndId": "1303",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Team Size",
      "titleSlug": "find-the-team-size",
      "topicTags": ["Database"]
   },
   {
      "acRate": 76.51518348711849,
      "frontEndId": "1304",
      "status": null,
      "difficulty": "Easy",
      "title": "Find N Unique Integers Sum up to Zero",
      "titleSlug": "find-n-unique-integers-sum-up-to-zero",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 79.8318025189878,
      "frontEndId": "1305",
      "status": "ac",
      "difficulty": "Medium",
      "title": "All Elements in Two Binary Search Trees",
      "titleSlug": "all-elements-in-two-binary-search-trees",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Sorting",
         "Binary Tree"
      ]
   },
   {
      "acRate": 64.23621039022389,
      "frontEndId": "1306",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Jump Game III",
      "titleSlug": "jump-game-iii",
      "topicTags": ["Array", "Depth-First Search", "Breadth-First Search"]
   },
   {
      "acRate": 34.11126895312092,
      "frontEndId": "1307",
      "status": null,
      "difficulty": "Hard",
      "title": "Verbal Arithmetic Puzzle",
      "titleSlug": "verbal-arithmetic-puzzle",
      "topicTags": ["Array", "Math", "String", "Backtracking"]
   },
   {
      "acRate": 86.60252004581902,
      "frontEndId": "1308",
      "status": null,
      "difficulty": "Medium",
      "title": "Running Total for Different Genders",
      "titleSlug": "running-total-for-different-genders",
      "topicTags": ["Database"]
   },
   {
      "acRate": 79.58569233537742,
      "frontEndId": "1309",
      "status": null,
      "difficulty": "Easy",
      "title": "Decrypt String from Alphabet to Integer Mapping",
      "titleSlug": "decrypt-string-from-alphabet-to-integer-mapping",
      "topicTags": ["String"]
   },
   {
      "acRate": 72.2596952811876,
      "frontEndId": "1310",
      "status": "ac",
      "difficulty": "Medium",
      "title": "XOR Queries of a Subarray",
      "titleSlug": "xor-queries-of-a-subarray",
      "topicTags": ["Array", "Bit Manipulation", "Prefix Sum"]
   },
   {
      "acRate": 46.49389900083452,
      "frontEndId": "1311",
      "status": null,
      "difficulty": "Medium",
      "title": "Get Watched Videos by Your Friends",
      "titleSlug": "get-watched-videos-by-your-friends",
      "topicTags": [
         "Array",
         "Hash Table",
         "Breadth-First Search",
         "Graph",
         "Sorting"
      ]
   },
   {
      "acRate": 69.8908358548759,
      "frontEndId": "1312",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Insertion Steps to Make a String Palindrome",
      "titleSlug": "minimum-insertion-steps-to-make-a-string-palindrome",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 85.59063208118113,
      "frontEndId": "1313",
      "status": null,
      "difficulty": "Easy",
      "title": "Decompress Run-Length Encoded List",
      "titleSlug": "decompress-run-length-encoded-list",
      "topicTags": ["Array"]
   },
   {
      "acRate": 75.56357328067472,
      "frontEndId": "1314",
      "status": null,
      "difficulty": "Medium",
      "title": "Matrix Block Sum",
      "titleSlug": "matrix-block-sum",
      "topicTags": ["Array", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 85.48463415083789,
      "frontEndId": "1315",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sum of Nodes with Even-Valued Grandparent",
      "titleSlug": "sum-of-nodes-with-even-valued-grandparent",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 49.79598606734118,
      "frontEndId": "1316",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Distinct Echo Substrings",
      "titleSlug": "distinct-echo-substrings",
      "topicTags": ["String", "Trie", "Rolling Hash", "Hash Function"]
   },
   {
      "acRate": 54.48470156587827,
      "frontEndId": "1317",
      "status": null,
      "difficulty": "Easy",
      "title": "Convert Integer to the Sum of Two No-Zero Integers",
      "titleSlug": "convert-integer-to-the-sum-of-two-no-zero-integers",
      "topicTags": ["Math"]
   },
   {
      "acRate": 71.2909414252307,
      "frontEndId": "1318",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Flips to Make a OR b Equal to c",
      "titleSlug": "minimum-flips-to-make-a-or-b-equal-to-c",
      "topicTags": ["Bit Manipulation"]
   },
   {
      "acRate": 62.425866438522014,
      "frontEndId": "1319",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Operations to Make Network Connected",
      "titleSlug": "number-of-operations-to-make-network-connected",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 59.24021134258795,
      "frontEndId": "1320",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Distance to Type a Word Using Two Fingers",
      "titleSlug": "minimum-distance-to-type-a-word-using-two-fingers",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 48.25413893848401,
      "frontEndId": "1321",
      "status": null,
      "difficulty": "Medium",
      "title": "Restaurant Growth",
      "titleSlug": "restaurant-growth",
      "topicTags": ["Database"]
   },
   {
      "acRate": 59.868931888064104,
      "frontEndId": "1322",
      "status": null,
      "difficulty": "Easy",
      "title": "Ads Performance",
      "titleSlug": "ads-performance",
      "topicTags": ["Database"]
   },
   {
      "acRate": 82.00297832901164,
      "frontEndId": "1323",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum 69 Number",
      "titleSlug": "maximum-69-number",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 62.56617177935267,
      "frontEndId": "1324",
      "status": null,
      "difficulty": "Medium",
      "title": "Print Words Vertically",
      "titleSlug": "print-words-vertically",
      "topicTags": ["Array", "String", "Simulation"]
   },
   {
      "acRate": 74.35605017892956,
      "frontEndId": "1325",
      "status": null,
      "difficulty": "Medium",
      "title": "Delete Leaves With a Given Value",
      "titleSlug": "delete-leaves-with-a-given-value",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 51.49126906572631,
      "frontEndId": "1326",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Number of Taps to Open to Water a Garden",
      "titleSlug": "minimum-number-of-taps-to-open-to-water-a-garden",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 70.698293408486,
      "frontEndId": "1327",
      "status": null,
      "difficulty": "Easy",
      "title": "List the Products Ordered in a Period",
      "titleSlug": "list-the-products-ordered-in-a-period",
      "topicTags": ["Database"]
   },
   {
      "acRate": 52.01449932638824,
      "frontEndId": "1328",
      "status": null,
      "difficulty": "Medium",
      "title": "Break a Palindrome",
      "titleSlug": "break-a-palindrome",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 83.01598896193491,
      "frontEndId": "1329",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sort the Matrix Diagonally",
      "titleSlug": "sort-the-matrix-diagonally",
      "topicTags": ["Array", "Sorting", "Matrix"]
   },
   {
      "acRate": 41.37850284911404,
      "frontEndId": "1330",
      "status": null,
      "difficulty": "Hard",
      "title": "Reverse Subarray To Maximize Array Value",
      "titleSlug": "reverse-subarray-to-maximize-array-value",
      "topicTags": ["Array", "Math", "Greedy"]
   },
   {
      "acRate": 59.93107424418115,
      "frontEndId": "1331",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Rank Transform of an Array",
      "titleSlug": "rank-transform-of-an-array",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 76.28390667770452,
      "frontEndId": "1332",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Remove Palindromic Subsequences",
      "titleSlug": "remove-palindromic-subsequences",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 60.67342125949865,
      "frontEndId": "1333",
      "status": null,
      "difficulty": "Medium",
      "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
      "titleSlug": "filter-restaurants-by-vegan-friendly-price-and-distance",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 58.05538371966086,
      "frontEndId": "1334",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
      "titleSlug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
      "topicTags": ["Dynamic Programming", "Graph", "Shortest Path"]
   },
   {
      "acRate": 58.31470923603192,
      "frontEndId": "1335",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Difficulty of a Job Schedule",
      "titleSlug": "minimum-difficulty-of-a-job-schedule",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 47.9202518363064,
      "frontEndId": "1336",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Transactions per Visit",
      "titleSlug": "number-of-transactions-per-visit",
      "topicTags": ["Database"]
   },
   {
      "acRate": 73.4432357393615,
      "frontEndId": "1337",
      "status": "ac",
      "difficulty": "Easy",
      "title": "The K Weakest Rows in a Matrix",
      "titleSlug": "the-k-weakest-rows-in-a-matrix",
      "topicTags": [
         "Array",
         "Binary Search",
         "Sorting",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 69.10923443676172,
      "frontEndId": "1338",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Reduce Array Size to The Half",
      "titleSlug": "reduce-array-size-to-the-half",
      "topicTags": [
         "Array",
         "Hash Table",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 47.727655142021554,
      "frontEndId": "1339",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Product of Splitted Binary Tree",
      "titleSlug": "maximum-product-of-splitted-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 62.80903989079326,
      "frontEndId": "1340",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Jump Game V",
      "titleSlug": "jump-game-v",
      "topicTags": ["Array", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 42.01139979718152,
      "frontEndId": "1341",
      "status": null,
      "difficulty": "Medium",
      "title": "Movie Rating",
      "titleSlug": "movie-rating",
      "topicTags": ["Database"]
   },
   {
      "acRate": 84.8449407626671,
      "frontEndId": "1342",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Number of Steps to Reduce a Number to Zero",
      "titleSlug": "number-of-steps-to-reduce-a-number-to-zero",
      "topicTags": ["Math", "Bit Manipulation"]
   },
   {
      "acRate": 68.16052092748704,
      "frontEndId": "1343",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
      "titleSlug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
      "topicTags": ["Array", "Sliding Window"]
   },
   {
      "acRate": 63.39344262295082,
      "frontEndId": "1344",
      "status": null,
      "difficulty": "Medium",
      "title": "Angle Between Hands of a Clock",
      "titleSlug": "angle-between-hands-of-a-clock",
      "topicTags": ["Math"]
   },
   {
      "acRate": 46.5586167035931,
      "frontEndId": "1345",
      "status": null,
      "difficulty": "Hard",
      "title": "Jump Game IV",
      "titleSlug": "jump-game-iv",
      "topicTags": ["Array", "Hash Table", "Breadth-First Search"]
   },
   {
      "acRate": 36.76911053824583,
      "frontEndId": "1346",
      "status": null,
      "difficulty": "Easy",
      "title": "Check If N and Its Double Exist",
      "titleSlug": "check-if-n-and-its-double-exist",
      "topicTags": [
         "Array",
         "Hash Table",
         "Two Pointers",
         "Binary Search",
         "Sorting"
      ]
   },
   {
      "acRate": 78.13400174173235,
      "frontEndId": "1347",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Steps to Make Two Strings Anagram",
      "titleSlug": "minimum-number-of-steps-to-make-two-strings-anagram",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 44.12477501098371,
      "frontEndId": "1348",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Tweet Counts Per Frequency",
      "titleSlug": "tweet-counts-per-frequency",
      "topicTags": [
         "Hash Table",
         "Binary Search",
         "Design",
         "Sorting",
         "Ordered Set"
      ]
   },
   {
      "acRate": 49.8122995017405,
      "frontEndId": "1349",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Students Taking Exam",
      "titleSlug": "maximum-students-taking-exam",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Matrix",
         "Bitmask"
      ]
   },
   {
      "acRate": 89.69676692258928,
      "frontEndId": "1350",
      "status": null,
      "difficulty": "Easy",
      "title": "Students With Invalid Departments",
      "titleSlug": "students-with-invalid-departments",
      "topicTags": ["Database"]
   },
   {
      "acRate": 77.27940481069324,
      "frontEndId": "1351",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Count Negative Numbers in a Sorted Matrix",
      "titleSlug": "count-negative-numbers-in-a-sorted-matrix",
      "topicTags": ["Array", "Binary Search", "Matrix"]
   },
   {
      "acRate": 50.26511417228424,
      "frontEndId": "1352",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Product of the Last K Numbers",
      "titleSlug": "product-of-the-last-k-numbers",
      "topicTags": ["Array", "Math", "Design", "Queue", "Data Stream"]
   },
   {
      "acRate": 32.178172911185705,
      "frontEndId": "1353",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Events That Can Be Attended",
      "titleSlug": "maximum-number-of-events-that-can-be-attended",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 36.2130652370178,
      "frontEndId": "1354",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Construct Target Array With Multiple Sums",
      "titleSlug": "construct-target-array-with-multiple-sums",
      "topicTags": ["Array", "Heap (Priority Queue)"]
   },
   {
      "acRate": 73.08676246462007,
      "frontEndId": "1355",
      "status": null,
      "difficulty": "Medium",
      "title": "Activity Participants",
      "titleSlug": "activity-participants",
      "topicTags": ["Database"]
   },
   {
      "acRate": 73.71871719715264,
      "frontEndId": "1356",
      "status": null,
      "difficulty": "Easy",
      "title": "Sort Integers by The Number of 1 Bits",
      "titleSlug": "sort-integers-by-the-number-of-1-bits",
      "topicTags": ["Array", "Bit Manipulation", "Sorting", "Counting"]
   },
   {
      "acRate": 70.18739352640544,
      "frontEndId": "1357",
      "status": null,
      "difficulty": "Medium",
      "title": "Apply Discount Every n Orders",
      "titleSlug": "apply-discount-every-n-orders",
      "topicTags": ["Array", "Hash Table", "Design"]
   },
   {
      "acRate": 64.6145187498298,
      "frontEndId": "1358",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Substrings Containing All Three Characters",
      "titleSlug": "number-of-substrings-containing-all-three-characters",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 65.43297035966023,
      "frontEndId": "1359",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Count All Valid Pickup and Delivery Options",
      "titleSlug": "count-all-valid-pickup-and-delivery-options",
      "topicTags": ["Math", "Dynamic Programming", "Combinatorics"]
   },
   {
      "acRate": 48.97399630072897,
      "frontEndId": "1360",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Days Between Two Dates",
      "titleSlug": "number-of-days-between-two-dates",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 40.73249380536981,
      "frontEndId": "1361",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Validate Binary Tree Nodes",
      "titleSlug": "validate-binary-tree-nodes",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph",
         "Binary Tree"
      ]
   },
   {
      "acRate": 60.32099866250557,
      "frontEndId": "1362",
      "status": null,
      "difficulty": "Medium",
      "title": "Closest Divisors",
      "titleSlug": "closest-divisors",
      "topicTags": ["Math"]
   },
   {
      "acRate": 32.8803581500282,
      "frontEndId": "1363",
      "status": null,
      "difficulty": "Hard",
      "title": "Largest Multiple of Three",
      "titleSlug": "largest-multiple-of-three",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 76.25959642572472,
      "frontEndId": "1364",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Trusted Contacts of a Customer",
      "titleSlug": "number-of-trusted-contacts-of-a-customer",
      "topicTags": ["Database"]
   },
   {
      "acRate": 86.5292716854841,
      "frontEndId": "1365",
      "status": null,
      "difficulty": "Easy",
      "title": "How Many Numbers Are Smaller Than the Current Number",
      "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
      "topicTags": ["Array", "Hash Table", "Sorting", "Counting"]
   },
   {
      "acRate": 57.92244335122242,
      "frontEndId": "1366",
      "status": null,
      "difficulty": "Medium",
      "title": "Rank Teams by Votes",
      "titleSlug": "rank-teams-by-votes",
      "topicTags": ["Array", "Hash Table", "String", "Sorting", "Counting"]
   },
   {
      "acRate": 43.786113627135585,
      "frontEndId": "1367",
      "status": null,
      "difficulty": "Medium",
      "title": "Linked List in Binary Tree",
      "titleSlug": "linked-list-in-binary-tree",
      "topicTags": [
         "Linked List",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 61.799737846925396,
      "frontEndId": "1368",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
      "titleSlug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
      "topicTags": [
         "Array",
         "Breadth-First Search",
         "Graph",
         "Heap (Priority Queue)",
         "Matrix",
         "Shortest Path"
      ]
   },
   {
      "acRate": 68.00980595262757,
      "frontEndId": "1369",
      "status": null,
      "difficulty": "Hard",
      "title": "Get the Second Most Recent Activity",
      "titleSlug": "get-the-second-most-recent-activity",
      "topicTags": ["Database"]
   },
   {
      "acRate": 76.41866878005884,
      "frontEndId": "1370",
      "status": null,
      "difficulty": "Easy",
      "title": "Increasing Decreasing String",
      "titleSlug": "increasing-decreasing-string",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 63.66859923387514,
      "frontEndId": "1371",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Longest Substring Containing Vowels in Even Counts",
      "titleSlug": "find-the-longest-substring-containing-vowels-in-even-counts",
      "topicTags": ["Hash Table", "String", "Bit Manipulation", "Prefix Sum"]
   },
   {
      "acRate": 66.51051620149798,
      "frontEndId": "1372",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest ZigZag Path in a Binary Tree",
      "titleSlug": "longest-zigzag-path-in-a-binary-tree",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 40.3067748881895,
      "frontEndId": "1373",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Sum BST in Binary Tree",
      "titleSlug": "maximum-sum-bst-in-binary-tree",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 77.58499712955285,
      "frontEndId": "1374",
      "status": null,
      "difficulty": "Easy",
      "title": "Generate a String With Characters That Have Odd Counts",
      "titleSlug": "generate-a-string-with-characters-that-have-odd-counts",
      "topicTags": ["String"]
   },
   {
      "acRate": 65.83670796412868,
      "frontEndId": "1375",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Times Binary String Is Prefix-Aligned",
      "titleSlug": "number-of-times-binary-string-is-prefix-aligned",
      "topicTags": ["Array"]
   },
   {
      "acRate": 60.1425942260326,
      "frontEndId": "1376",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Time Needed to Inform All Employees",
      "titleSlug": "time-needed-to-inform-all-employees",
      "topicTags": ["Tree", "Depth-First Search", "Breadth-First Search"]
   },
   {
      "acRate": 35.52755043528124,
      "frontEndId": "1377",
      "status": null,
      "difficulty": "Hard",
      "title": "Frog Position After T Seconds",
      "titleSlug": "frog-position-after-t-seconds",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph"
      ]
   },
   {
      "acRate": 83.21310298237408,
      "frontEndId": "1378",
      "status": null,
      "difficulty": "Easy",
      "title": "Replace Employee ID With The Unique Identifier",
      "titleSlug": "replace-employee-id-with-the-unique-identifier",
      "topicTags": ["Database"]
   },
   {
      "acRate": 86.08145462972159,
      "frontEndId": "1379",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
      "titleSlug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 70.92751833501498,
      "frontEndId": "1380",
      "status": "notac",
      "difficulty": "Easy",
      "title": "Lucky Numbers in a Matrix",
      "titleSlug": "lucky-numbers-in-a-matrix",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 77.09692664186841,
      "frontEndId": "1381",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Design a Stack With Increment Operation",
      "titleSlug": "design-a-stack-with-increment-operation",
      "topicTags": ["Array", "Stack", "Design"]
   },
   {
      "acRate": 81.05800875533157,
      "frontEndId": "1382",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Balance a Binary Search Tree",
      "titleSlug": "balance-a-binary-search-tree",
      "topicTags": [
         "Divide and Conquer",
         "Greedy",
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 48.04668330879686,
      "frontEndId": "1383",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Maximum Performance of a Team",
      "titleSlug": "maximum-performance-of-a-team",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 62.36581423301695,
      "frontEndId": "1384",
      "status": null,
      "difficulty": "Hard",
      "title": "Total Sales Amount by Year",
      "titleSlug": "total-sales-amount-by-year",
      "topicTags": ["Database"]
   },
   {
      "acRate": 67.38059191973164,
      "frontEndId": "1385",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Distance Value Between Two Arrays",
      "titleSlug": "find-the-distance-value-between-two-arrays",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 41.37012782073536,
      "frontEndId": "1386",
      "status": null,
      "difficulty": "Medium",
      "title": "Cinema Seat Allocation",
      "titleSlug": "cinema-seat-allocation",
      "topicTags": ["Array", "Hash Table", "Greedy", "Bit Manipulation"]
   },
   {
      "acRate": 69.91074693348402,
      "frontEndId": "1387",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sort Integers by The Power Value",
      "titleSlug": "sort-integers-by-the-power-value",
      "topicTags": ["Dynamic Programming", "Memoization", "Sorting"]
   },
   {
      "acRate": 51.17388863369571,
      "frontEndId": "1388",
      "status": null,
      "difficulty": "Hard",
      "title": "Pizza With 3n Slices",
      "titleSlug": "pizza-with-3n-slices",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Greedy",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 85.74093418892701,
      "frontEndId": "1389",
      "status": null,
      "difficulty": "Easy",
      "title": "Create Target Array in the Given Order",
      "titleSlug": "create-target-array-in-the-given-order",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 41.62332704248484,
      "frontEndId": "1390",
      "status": null,
      "difficulty": "Medium",
      "title": "Four Divisors",
      "titleSlug": "four-divisors",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 47.639368569517025,
      "frontEndId": "1391",
      "status": null,
      "difficulty": "Medium",
      "title": "Check if There is a Valid Path in a Grid",
      "titleSlug": "check-if-there-is-a-valid-path-in-a-grid",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 44.980555770171776,
      "frontEndId": "1392",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Longest Happy Prefix",
      "titleSlug": "longest-happy-prefix",
      "topicTags": [
         "String",
         "Rolling Hash",
         "String Matching",
         "Hash Function"
      ]
   },
   {
      "acRate": 85.7367849384504,
      "frontEndId": "1393",
      "status": null,
      "difficulty": "Medium",
      "title": "Capital Gain/Loss",
      "titleSlug": "capital-gainloss",
      "topicTags": ["Database"]
   },
   {
      "acRate": 65.61938237819605,
      "frontEndId": "1394",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Lucky Integer in an Array",
      "titleSlug": "find-lucky-integer-in-an-array",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 66.29267218324262,
      "frontEndId": "1395",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Number of Teams",
      "titleSlug": "count-number-of-teams",
      "topicTags": ["Array", "Dynamic Programming", "Binary Indexed Tree"]
   },
   {
      "acRate": 74.76693683061299,
      "frontEndId": "1396",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Design Underground System",
      "titleSlug": "design-underground-system",
      "topicTags": ["Hash Table", "String", "Design"]
   },
   {
      "acRate": 42.01626712328767,
      "frontEndId": "1397",
      "status": null,
      "difficulty": "Hard",
      "title": "Find All Good Strings",
      "titleSlug": "find-all-good-strings",
      "topicTags": ["String", "Dynamic Programming", "String Matching"]
   },
   {
      "acRate": 73.92672918143015,
      "frontEndId": "1398",
      "status": null,
      "difficulty": "Medium",
      "title": "Customers Who Bought Products A and B but Not C",
      "titleSlug": "customers-who-bought-products-a-and-b-but-not-c",
      "topicTags": ["Database"]
   },
   {
      "acRate": 66.64837559109763,
      "frontEndId": "1399",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Largest Group",
      "titleSlug": "count-largest-group",
      "topicTags": ["Hash Table", "Math"]
   },
   {
      "acRate": 62.37197949088843,
      "frontEndId": "1400",
      "status": null,
      "difficulty": "Medium",
      "title": "Construct K Palindrome Strings",
      "titleSlug": "construct-k-palindrome-strings",
      "topicTags": ["Hash Table", "String", "Greedy", "Counting"]
   },
   {
      "acRate": 44.82781723167627,
      "frontEndId": "1401",
      "status": null,
      "difficulty": "Medium",
      "title": "Circle and Rectangle Overlapping",
      "titleSlug": "circle-and-rectangle-overlapping",
      "topicTags": ["Math", "Geometry"]
   },
   {
      "acRate": 76.37670219511459,
      "frontEndId": "1402",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Reducing Dishes",
      "titleSlug": "reducing-dishes",
      "topicTags": ["Array", "Dynamic Programming", "Greedy", "Sorting"]
   },
   {
      "acRate": 72.40388265278456,
      "frontEndId": "1403",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Subsequence in Non-Increasing Order",
      "titleSlug": "minimum-subsequence-in-non-increasing-order",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 52.75550958250725,
      "frontEndId": "1404",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Steps to Reduce a Number in Binary Representation to One",
      "titleSlug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
      "topicTags": ["String", "Bit Manipulation"]
   },
   {
      "acRate": 57.2721288593159,
      "frontEndId": "1405",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Happy String",
      "titleSlug": "longest-happy-string",
      "topicTags": ["String", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 64.63214920484621,
      "frontEndId": "1406",
      "status": null,
      "difficulty": "Hard",
      "title": "Stone Game III",
      "titleSlug": "stone-game-iii",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Game Theory"]
   },
   {
      "acRate": 58.716890691318234,
      "frontEndId": "1407",
      "status": null,
      "difficulty": "Easy",
      "title": "Top Travellers",
      "titleSlug": "top-travellers",
      "topicTags": ["Database"]
   },
   {
      "acRate": 63.732924951682115,
      "frontEndId": "1408",
      "status": "ac",
      "difficulty": "Easy",
      "title": "String Matching in an Array",
      "titleSlug": "string-matching-in-an-array",
      "topicTags": ["Array", "String", "String Matching"]
   },
   {
      "acRate": 83.82025321041097,
      "frontEndId": "1409",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Queries on a Permutation With Key",
      "titleSlug": "queries-on-a-permutation-with-key",
      "topicTags": ["Array", "Binary Indexed Tree", "Simulation"]
   },
   {
      "acRate": 51.10854451162896,
      "frontEndId": "1410",
      "status": null,
      "difficulty": "Medium",
      "title": "HTML Entity Parser",
      "titleSlug": "html-entity-parser",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 63.25415773074899,
      "frontEndId": "1411",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ways to Paint N × 3 Grid",
      "titleSlug": "number-of-ways-to-paint-n-3-grid",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 60.111946181741736,
      "frontEndId": "1412",
      "status": null,
      "difficulty": "Hard",
      "title": "Find the Quiet Students in All Exams",
      "titleSlug": "find-the-quiet-students-in-all-exams",
      "topicTags": ["Database"]
   },
   {
      "acRate": 66.46058035109887,
      "frontEndId": "1413",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Value to Get Positive Step by Step Sum",
      "titleSlug": "minimum-value-to-get-positive-step-by-step-sum",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 65.19195913659581,
      "frontEndId": "1414",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
      "titleSlug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 73.43901923483406,
      "frontEndId": "1415",
      "status": null,
      "difficulty": "Medium",
      "title": "The k-th Lexicographical String of All Happy Strings of Length n",
      "titleSlug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
      "topicTags": ["String", "Backtracking"]
   },
   {
      "acRate": 48.336518753621434,
      "frontEndId": "1416",
      "status": null,
      "difficulty": "Hard",
      "title": "Restore The Array",
      "titleSlug": "restore-the-array",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 53.50017990644864,
      "frontEndId": "1417",
      "status": null,
      "difficulty": "Easy",
      "title": "Reformat The String",
      "titleSlug": "reformat-the-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 74.41136750631202,
      "frontEndId": "1418",
      "status": null,
      "difficulty": "Medium",
      "title": "Display Table of Food Orders in a Restaurant",
      "titleSlug": "display-table-of-food-orders-in-a-restaurant",
      "topicTags": ["Array", "Hash Table", "String", "Sorting", "Ordered Set"]
   },
   {
      "acRate": 50.17817216321968,
      "frontEndId": "1419",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Frogs Croaking",
      "titleSlug": "minimum-number-of-frogs-croaking",
      "topicTags": ["String", "Counting"]
   },
   {
      "acRate": 69.93126945896728,
      "frontEndId": "1420",
      "status": null,
      "difficulty": "Hard",
      "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
      "titleSlug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
      "topicTags": ["Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 82.70760312752763,
      "frontEndId": "1421",
      "status": null,
      "difficulty": "Easy",
      "title": "NPV Queries",
      "titleSlug": "npv-queries",
      "topicTags": ["Database"]
   },
   {
      "acRate": 57.92580003026669,
      "frontEndId": "1422",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Score After Splitting a String",
      "titleSlug": "maximum-score-after-splitting-a-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 52.26038196782067,
      "frontEndId": "1423",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Points You Can Obtain from Cards",
      "titleSlug": "maximum-points-you-can-obtain-from-cards",
      "topicTags": ["Array", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 50.618496364411904,
      "frontEndId": "1424",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Diagonal Traverse II",
      "titleSlug": "diagonal-traverse-ii",
      "topicTags": ["Array", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 47.80384643192828,
      "frontEndId": "1425",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Constrained Subsequence Sum",
      "titleSlug": "constrained-subsequence-sum",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Queue",
         "Sliding Window",
         "Heap (Priority Queue)",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 59.86863106864405,
      "frontEndId": "1426",
      "status": null,
      "difficulty": "Easy",
      "title": "Counting Elements",
      "titleSlug": "counting-elements",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 54.4859529340328,
      "frontEndId": "1427",
      "status": null,
      "difficulty": "Easy",
      "title": "Perform String Shifts",
      "titleSlug": "perform-string-shifts",
      "topicTags": ["Array", "Math", "String"]
   },
   {
      "acRate": 53.63634050295501,
      "frontEndId": "1428",
      "status": null,
      "difficulty": "Medium",
      "title": "Leftmost Column with at Least a One",
      "titleSlug": "leftmost-column-with-at-least-a-one",
      "topicTags": ["Array", "Binary Search", "Matrix", "Interactive"]
   },
   {
      "acRate": 53.29210001050531,
      "frontEndId": "1429",
      "status": null,
      "difficulty": "Medium",
      "title": "First Unique Number",
      "titleSlug": "first-unique-number",
      "topicTags": ["Array", "Hash Table", "Design", "Queue", "Data Stream"]
   },
   {
      "acRate": 46.6198287623406,
      "frontEndId": "1430",
      "status": null,
      "difficulty": "Medium",
      "title": "Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
      "titleSlug": "check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 87.29087297844448,
      "frontEndId": "1431",
      "status": null,
      "difficulty": "Easy",
      "title": "Kids With the Greatest Number of Candies",
      "titleSlug": "kids-with-the-greatest-number-of-candies",
      "topicTags": ["Array"]
   },
   {
      "acRate": 41.043129388164495,
      "frontEndId": "1432",
      "status": null,
      "difficulty": "Medium",
      "title": "Max Difference You Can Get From Changing an Integer",
      "titleSlug": "max-difference-you-can-get-from-changing-an-integer",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 69.2428994135261,
      "frontEndId": "1433",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Check If a String Can Break Another String",
      "titleSlug": "check-if-a-string-can-break-another-string",
      "topicTags": ["String", "Greedy", "Sorting"]
   },
   {
      "acRate": 43.916826907408016,
      "frontEndId": "1434",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ways to Wear Different Hats to Each Other",
      "titleSlug": "number-of-ways-to-wear-different-hats-to-each-other",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 75.73526796827767,
      "frontEndId": "1435",
      "status": null,
      "difficulty": "Easy",
      "title": "Create a Session Bar Chart",
      "titleSlug": "create-a-session-bar-chart",
      "topicTags": ["Database"]
   },
   {
      "acRate": 77.0822397941042,
      "frontEndId": "1436",
      "status": null,
      "difficulty": "Easy",
      "title": "Destination City",
      "titleSlug": "destination-city",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 58.083720779536364,
      "frontEndId": "1437",
      "status": null,
      "difficulty": "Easy",
      "title": "Check If All 1's Are at Least Length K Places Away",
      "titleSlug": "check-if-all-1s-are-at-least-length-k-places-away",
      "topicTags": ["Array"]
   },
   {
      "acRate": 48.819748284988925,
      "frontEndId": "1438",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
      "titleSlug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
      "topicTags": [
         "Array",
         "Queue",
         "Sliding Window",
         "Heap (Priority Queue)",
         "Ordered Set",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 61.395404404444264,
      "frontEndId": "1439",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
      "titleSlug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
      "topicTags": ["Array", "Binary Search", "Heap (Priority Queue)", "Matrix"]
   },
   {
      "acRate": 73.30588129979411,
      "frontEndId": "1440",
      "status": null,
      "difficulty": "Medium",
      "title": "Evaluate Boolean Expression",
      "titleSlug": "evaluate-boolean-expression",
      "topicTags": ["Database"]
   },
   {
      "acRate": 72.51187010386914,
      "frontEndId": "1441",
      "status": null,
      "difficulty": "Medium",
      "title": "Build an Array With Stack Operations",
      "titleSlug": "build-an-array-with-stack-operations",
      "topicTags": ["Array", "Stack", "Simulation"]
   },
   {
      "acRate": 76.65228303465281,
      "frontEndId": "1442",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
      "titleSlug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
      "topicTags": [
         "Array",
         "Hash Table",
         "Math",
         "Bit Manipulation",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 62.35183165836551,
      "frontEndId": "1443",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Time to Collect All Apples in a Tree",
      "titleSlug": "minimum-time-to-collect-all-apples-in-a-tree",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 62.920092522401696,
      "frontEndId": "1444",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ways of Cutting a Pizza",
      "titleSlug": "number-of-ways-of-cutting-a-pizza",
      "topicTags": ["Array", "Dynamic Programming", "Memoization", "Matrix"]
   },
   {
      "acRate": 88.51142797629193,
      "frontEndId": "1445",
      "status": null,
      "difficulty": "Medium",
      "title": "Apples & Oranges",
      "titleSlug": "apples-oranges",
      "topicTags": ["Database"]
   },
   {
      "acRate": 60.556516271026574,
      "frontEndId": "1446",
      "status": null,
      "difficulty": "Easy",
      "title": "Consecutive Characters",
      "titleSlug": "consecutive-characters",
      "topicTags": ["String"]
   },
   {
      "acRate": 65.83618670030637,
      "frontEndId": "1447",
      "status": null,
      "difficulty": "Medium",
      "title": "Simplified Fractions",
      "titleSlug": "simplified-fractions",
      "topicTags": ["Math", "String", "Number Theory"]
   },
   {
      "acRate": 73.428675412643,
      "frontEndId": "1448",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Good Nodes in Binary Tree",
      "titleSlug": "count-good-nodes-in-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 47.80379371665679,
      "frontEndId": "1449",
      "status": null,
      "difficulty": "Hard",
      "title": "Form Largest Integer With Digits That Add up to Target",
      "titleSlug": "form-largest-integer-with-digits-that-add-up-to-target",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 75.56872037914691,
      "frontEndId": "1450",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Students Doing Homework at a Given Time",
      "titleSlug": "number-of-students-doing-homework-at-a-given-time",
      "topicTags": ["Array"]
   },
   {
      "acRate": 63.78806170355467,
      "frontEndId": "1451",
      "status": null,
      "difficulty": "Medium",
      "title": "Rearrange Words in a Sentence",
      "titleSlug": "rearrange-words-in-a-sentence",
      "topicTags": ["String", "Sorting"]
   },
   {
      "acRate": 57.166917600224565,
      "frontEndId": "1452",
      "status": null,
      "difficulty": "Medium",
      "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
      "titleSlug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 37.126390564267524,
      "frontEndId": "1453",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Darts Inside of a Circular Dartboard",
      "titleSlug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 37.24222567991058,
      "frontEndId": "1454",
      "status": null,
      "difficulty": "Medium",
      "title": "Active Users",
      "titleSlug": "active-users",
      "topicTags": ["Database"]
   },
   {
      "acRate": 64.13662931183835,
      "frontEndId": "1455",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
      "titleSlug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
      "topicTags": ["String", "String Matching"]
   },
   {
      "acRate": 57.85252184061541,
      "frontEndId": "1456",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Number of Vowels in a Substring of Given Length",
      "titleSlug": "maximum-number-of-vowels-in-a-substring-of-given-length",
      "topicTags": ["String", "Sliding Window"]
   },
   {
      "acRate": 67.44426568604919,
      "frontEndId": "1457",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Pseudo-Palindromic Paths in a Binary Tree",
      "titleSlug": "pseudo-palindromic-paths-in-a-binary-tree",
      "topicTags": [
         "Bit Manipulation",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 62.6591290853435,
      "frontEndId": "1458",
      "status": null,
      "difficulty": "Hard",
      "title": "Max Dot Product of Two Subsequences",
      "titleSlug": "max-dot-product-of-two-subsequences",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 68.76109643614949,
      "frontEndId": "1459",
      "status": null,
      "difficulty": "Medium",
      "title": "Rectangles Area",
      "titleSlug": "rectangles-area",
      "topicTags": ["Database"]
   },
   {
      "acRate": 71.89111066619951,
      "frontEndId": "1460",
      "status": null,
      "difficulty": "Easy",
      "title": "Make Two Arrays Equal by Reversing Subarrays",
      "titleSlug": "make-two-arrays-equal-by-reversing-subarrays",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 56.507082909083714,
      "frontEndId": "1461",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Check If a String Contains All Binary Codes of Size K",
      "titleSlug": "check-if-a-string-contains-all-binary-codes-of-size-k",
      "topicTags": [
         "Hash Table",
         "String",
         "Bit Manipulation",
         "Rolling Hash",
         "Hash Function"
      ]
   },
   {
      "acRate": 49.47205364758478,
      "frontEndId": "1462",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Course Schedule IV",
      "titleSlug": "course-schedule-iv",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 69.48071227912571,
      "frontEndId": "1463",
      "status": null,
      "difficulty": "Hard",
      "title": "Cherry Pickup II",
      "titleSlug": "cherry-pickup-ii",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 80.5372370876486,
      "frontEndId": "1464",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Product of Two Elements in an Array",
      "titleSlug": "maximum-product-of-two-elements-in-an-array",
      "topicTags": ["Array", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 40.92746789727127,
      "frontEndId": "1465",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
      "titleSlug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 65.50687604737756,
      "frontEndId": "1466",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Reorder Routes to Make All Paths Lead to the City Zero",
      "titleSlug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
      "topicTags": ["Depth-First Search", "Breadth-First Search", "Graph"]
   },
   {
      "acRate": 60.601969504447275,
      "frontEndId": "1467",
      "status": null,
      "difficulty": "Hard",
      "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
      "titleSlug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Backtracking",
         "Combinatorics",
         "Probability and Statistics"
      ]
   },
   {
      "acRate": 79.46825283072954,
      "frontEndId": "1468",
      "status": null,
      "difficulty": "Medium",
      "title": "Calculate Salaries",
      "titleSlug": "calculate-salaries",
      "topicTags": ["Database"]
   },
   {
      "acRate": 82.55159474671669,
      "frontEndId": "1469",
      "status": null,
      "difficulty": "Easy",
      "title": "Find All The Lonely Nodes",
      "titleSlug": "find-all-the-lonely-nodes",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 88.4411315847293,
      "frontEndId": "1470",
      "status": null,
      "difficulty": "Easy",
      "title": "Shuffle the Array",
      "titleSlug": "shuffle-the-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 60.79019073569483,
      "frontEndId": "1471",
      "status": null,
      "difficulty": "Medium",
      "title": "The k Strongest Values in an Array",
      "titleSlug": "the-k-strongest-values-in-an-array",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 77.69279845636748,
      "frontEndId": "1472",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Design Browser History",
      "titleSlug": "design-browser-history",
      "topicTags": [
         "Array",
         "Linked List",
         "Stack",
         "Design",
         "Doubly-Linked List",
         "Data Stream"
      ]
   },
   {
      "acRate": 61.234809389046106,
      "frontEndId": "1473",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Paint House III",
      "titleSlug": "paint-house-iii",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 73.15495749230689,
      "frontEndId": "1474",
      "status": null,
      "difficulty": "Easy",
      "title": "Delete N Nodes After M Nodes of a Linked List",
      "titleSlug": "delete-n-nodes-after-m-nodes-of-a-linked-list",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 76.82371241138894,
      "frontEndId": "1475",
      "status": null,
      "difficulty": "Easy",
      "title": "Final Prices With a Special Discount in a Shop",
      "titleSlug": "final-prices-with-a-special-discount-in-a-shop",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 88.16224563953489,
      "frontEndId": "1476",
      "status": null,
      "difficulty": "Medium",
      "title": "Subrectangle Queries",
      "titleSlug": "subrectangle-queries",
      "topicTags": ["Array", "Design", "Matrix"]
   },
   {
      "acRate": 36.56458055925433,
      "frontEndId": "1477",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
      "titleSlug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
      "topicTags": [
         "Array",
         "Hash Table",
         "Binary Search",
         "Dynamic Programming",
         "Sliding Window"
      ]
   },
   {
      "acRate": 55.255096916741984,
      "frontEndId": "1478",
      "status": null,
      "difficulty": "Hard",
      "title": "Allocate Mailboxes",
      "titleSlug": "allocate-mailboxes",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 79.08480840303443,
      "frontEndId": "1479",
      "status": null,
      "difficulty": "Hard",
      "title": "Sales by Day of the Week",
      "titleSlug": "sales-by-day-of-the-week",
      "topicTags": ["Database"]
   },
   {
      "acRate": 86.64486481615951,
      "frontEndId": "1480",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Running Sum of 1d Array",
      "titleSlug": "running-sum-of-1d-array",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 55.949167434130445,
      "frontEndId": "1481",
      "status": null,
      "difficulty": "Medium",
      "title": "Least Number of Unique Integers after K Removals",
      "titleSlug": "least-number-of-unique-integers-after-k-removals",
      "topicTags": ["Array", "Hash Table", "Greedy", "Sorting", "Counting"]
   },
   {
      "acRate": 52.19511608468981,
      "frontEndId": "1482",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Days to Make m Bouquets",
      "titleSlug": "minimum-number-of-days-to-make-m-bouquets",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 34.29711082363088,
      "frontEndId": "1483",
      "status": "notac",
      "difficulty": "Hard",
      "title": "Kth Ancestor of a Tree Node",
      "titleSlug": "kth-ancestor-of-a-tree-node",
      "topicTags": [
         "Binary Search",
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Design"
      ]
   },
   {
      "acRate": 76.87516130953563,
      "frontEndId": "1484",
      "status": null,
      "difficulty": "Easy",
      "title": "Group Sold Products By The Date",
      "titleSlug": "group-sold-products-by-the-date",
      "topicTags": ["Database"]
   },
   {
      "acRate": 80.59167016162854,
      "frontEndId": "1485",
      "status": null,
      "difficulty": "Medium",
      "title": "Clone Binary Tree With Random Pointer",
      "titleSlug": "clone-binary-tree-with-random-pointer",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 85.21228925803976,
      "frontEndId": "1486",
      "status": "ac",
      "difficulty": "Easy",
      "title": "XOR Operation in an Array",
      "titleSlug": "xor-operation-in-an-array",
      "topicTags": ["Math", "Bit Manipulation"]
   },
   {
      "acRate": 36.63056335088248,
      "frontEndId": "1487",
      "status": null,
      "difficulty": "Medium",
      "title": "Making File Names Unique",
      "titleSlug": "making-file-names-unique",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 26.78809986640748,
      "frontEndId": "1488",
      "status": null,
      "difficulty": "Medium",
      "title": "Avoid Flood in The City",
      "titleSlug": "avoid-flood-in-the-city",
      "topicTags": [
         "Array",
         "Hash Table",
         "Binary Search",
         "Greedy",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 69.2577684304358,
      "frontEndId": "1489",
      "status": null,
      "difficulty": "Hard",
      "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
      "titleSlug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
      "topicTags": [
         "Union Find",
         "Graph",
         "Sorting",
         "Minimum Spanning Tree",
         "Strongly Connected Component"
      ]
   },
   {
      "acRate": 83.26605390634704,
      "frontEndId": "1490",
      "status": null,
      "difficulty": "Medium",
      "title": "Clone N-ary Tree",
      "titleSlug": "clone-n-ary-tree",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 63.442554663061756,
      "frontEndId": "1491",
      "status": null,
      "difficulty": "Easy",
      "title": "Average Salary Excluding the Minimum and Maximum Salary",
      "titleSlug": "average-salary-excluding-the-minimum-and-maximum-salary",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 65.66245093066998,
      "frontEndId": "1492",
      "status": null,
      "difficulty": "Medium",
      "title": "The kth Factor of n",
      "titleSlug": "the-kth-factor-of-n",
      "topicTags": ["Math", "Number Theory"]
   },
   {
      "acRate": 66.59018776928669,
      "frontEndId": "1493",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Subarray of 1's After Deleting One Element",
      "titleSlug": "longest-subarray-of-1s-after-deleting-one-element",
      "topicTags": ["Array", "Dynamic Programming", "Sliding Window"]
   },
   {
      "acRate": 30.023873583690175,
      "frontEndId": "1494",
      "status": "notac",
      "difficulty": "Hard",
      "title": "Parallel Courses II",
      "titleSlug": "parallel-courses-ii",
      "topicTags": [
         "Dynamic Programming",
         "Bit Manipulation",
         "Graph",
         "Bitmask"
      ]
   },
   {
      "acRate": 49.04788448743999,
      "frontEndId": "1495",
      "status": null,
      "difficulty": "Easy",
      "title": "Friendly Movies Streamed Last Month",
      "titleSlug": "friendly-movies-streamed-last-month",
      "topicTags": ["Database"]
   },
   {
      "acRate": 56.25122009413705,
      "frontEndId": "1496",
      "status": null,
      "difficulty": "Easy",
      "title": "Path Crossing",
      "titleSlug": "path-crossing",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 38.54803163216801,
      "frontEndId": "1497",
      "status": null,
      "difficulty": "Medium",
      "title": "Check If Array Pairs Are Divisible by k",
      "titleSlug": "check-if-array-pairs-are-divisible-by-k",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 44.03921086091629,
      "frontEndId": "1498",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Subsequences That Satisfy the Given Sum Condition",
      "titleSlug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 44.68170649988832,
      "frontEndId": "1499",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Max Value of Equation",
      "titleSlug": "max-value-of-equation",
      "topicTags": [
         "Array",
         "Queue",
         "Sliding Window",
         "Heap (Priority Queue)",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 44.25773554293661,
      "frontEndId": "1500",
      "status": null,
      "difficulty": "Medium",
      "title": "Design a File Sharing System",
      "titleSlug": "design-a-file-sharing-system",
      "topicTags": [
         "Hash Table",
         "Design",
         "Heap (Priority Queue)",
         "Data Stream"
      ]
   },
   {
      "acRate": 49.61293029851394,
      "frontEndId": "1501",
      "status": null,
      "difficulty": "Medium",
      "title": "Countries You Can Safely Invest In",
      "titleSlug": "countries-you-can-safely-invest-in",
      "topicTags": ["Database"]
   },
   {
      "acRate": 69.84383680019752,
      "frontEndId": "1502",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Can Make Arithmetic Progression From Sequence",
      "titleSlug": "can-make-arithmetic-progression-from-sequence",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 57.29536402308505,
      "frontEndId": "1503",
      "status": null,
      "difficulty": "Medium",
      "title": "Last Moment Before All Ants Fall Out of a Plank",
      "titleSlug": "last-moment-before-all-ants-fall-out-of-a-plank",
      "topicTags": ["Array", "Brainteaser", "Simulation"]
   },
   {
      "acRate": 57.28649856444385,
      "frontEndId": "1504",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Submatrices With All Ones",
      "titleSlug": "count-submatrices-with-all-ones",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Stack",
         "Matrix",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 38.73213175885643,
      "frontEndId": "1505",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
      "titleSlug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
      "topicTags": ["String", "Greedy", "Binary Indexed Tree", "Segment Tree"]
   },
   {
      "acRate": 78.4613493916677,
      "frontEndId": "1506",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Root of N-Ary Tree",
      "titleSlug": "find-root-of-n-ary-tree",
      "topicTags": [
         "Hash Table",
         "Bit Manipulation",
         "Tree",
         "Depth-First Search"
      ]
   },
   {
      "acRate": 64.13122110273535,
      "frontEndId": "1507",
      "status": null,
      "difficulty": "Easy",
      "title": "Reformat Date",
      "titleSlug": "reformat-date",
      "topicTags": ["String"]
   },
   {
      "acRate": 58.61310124592551,
      "frontEndId": "1508",
      "status": null,
      "difficulty": "Medium",
      "title": "Range Sum of Sorted Subarray Sums",
      "titleSlug": "range-sum-of-sorted-subarray-sums",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 54.78974261537522,
      "frontEndId": "1509",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
      "titleSlug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 59.84269799932063,
      "frontEndId": "1510",
      "status": null,
      "difficulty": "Hard",
      "title": "Stone Game IV",
      "titleSlug": "stone-game-iv",
      "topicTags": ["Math", "Dynamic Programming", "Game Theory"]
   },
   {
      "acRate": 69.37853314063042,
      "frontEndId": "1511",
      "status": null,
      "difficulty": "Easy",
      "title": "Customer Order Frequency",
      "titleSlug": "customer-order-frequency",
      "topicTags": ["Database"]
   },
   {
      "acRate": 88.96644238139851,
      "frontEndId": "1512",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Good Pairs",
      "titleSlug": "number-of-good-pairs",
      "topicTags": ["Array", "Hash Table", "Math", "Counting"]
   },
   {
      "acRate": 45.76939289335475,
      "frontEndId": "1513",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Substrings With Only 1s",
      "titleSlug": "number-of-substrings-with-only-1s",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 54.614070702283115,
      "frontEndId": "1514",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Path with Maximum Probability",
      "titleSlug": "path-with-maximum-probability",
      "topicTags": ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"]
   },
   {
      "acRate": 36.70029874302463,
      "frontEndId": "1515",
      "status": null,
      "difficulty": "Hard",
      "title": "Best Position for a Service Centre",
      "titleSlug": "best-position-for-a-service-centre",
      "topicTags": ["Math", "Geometry", "Randomized"]
   },
   {
      "acRate": 62.64061574896388,
      "frontEndId": "1516",
      "status": null,
      "difficulty": "Hard",
      "title": "Move Sub-Tree of N-Ary Tree",
      "titleSlug": "move-sub-tree-of-n-ary-tree",
      "topicTags": ["Tree", "Depth-First Search"]
   },
   {
      "acRate": 47.24389818254344,
      "frontEndId": "1517",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Users With Valid E-Mails",
      "titleSlug": "find-users-with-valid-e-mails",
      "topicTags": ["Database"]
   },
   {
      "acRate": 60.54635614982733,
      "frontEndId": "1518",
      "status": null,
      "difficulty": "Easy",
      "title": "Water Bottles",
      "titleSlug": "water-bottles",
      "topicTags": ["Math", "Simulation"]
   },
   {
      "acRate": 55.114662913365045,
      "frontEndId": "1519",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Nodes in the Sub-Tree With the Same Label",
      "titleSlug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Counting"
      ]
   },
   {
      "acRate": 38.50462351387054,
      "frontEndId": "1520",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Non-Overlapping Substrings",
      "titleSlug": "maximum-number-of-non-overlapping-substrings",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 43.839514812223,
      "frontEndId": "1521",
      "status": null,
      "difficulty": "Hard",
      "title": "Find a Value of a Mysterious Function Closest to Target",
      "titleSlug": "find-a-value-of-a-mysterious-function-closest-to-target",
      "topicTags": [
         "Array",
         "Binary Search",
         "Bit Manipulation",
         "Segment Tree"
      ]
   },
   {
      "acRate": 73.75234419095825,
      "frontEndId": "1522",
      "status": null,
      "difficulty": "Medium",
      "title": "Diameter of N-Ary Tree",
      "titleSlug": "diameter-of-n-ary-tree",
      "topicTags": ["Tree", "Depth-First Search"]
   },
   {
      "acRate": 49.703670555876926,
      "frontEndId": "1523",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Odd Numbers in an Interval Range",
      "titleSlug": "count-odd-numbers-in-an-interval-range",
      "topicTags": ["Math"]
   },
   {
      "acRate": 43.3320987654321,
      "frontEndId": "1524",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Sub-arrays With Odd Sum",
      "titleSlug": "number-of-sub-arrays-with-odd-sum",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 68.6288850910987,
      "frontEndId": "1525",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Good Ways to Split a String",
      "titleSlug": "number-of-good-ways-to-split-a-string",
      "topicTags": ["String", "Dynamic Programming", "Bit Manipulation"]
   },
   {
      "acRate": 69.5445788396989,
      "frontEndId": "1526",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
      "titleSlug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Stack",
         "Greedy",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 40.38553594767726,
      "frontEndId": "1527",
      "status": null,
      "difficulty": "Easy",
      "title": "Patients With a Condition",
      "titleSlug": "patients-with-a-condition",
      "topicTags": ["Database"]
   },
   {
      "acRate": 84.66505020755842,
      "frontEndId": "1528",
      "status": null,
      "difficulty": "Easy",
      "title": "Shuffle String",
      "titleSlug": "shuffle-string",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 72.59080530500542,
      "frontEndId": "1529",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Suffix Flips",
      "titleSlug": "minimum-suffix-flips",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 61.61965043053592,
      "frontEndId": "1530",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Good Leaf Nodes Pairs",
      "titleSlug": "number-of-good-leaf-nodes-pairs",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 49.14366847102671,
      "frontEndId": "1531",
      "status": null,
      "difficulty": "Hard",
      "title": "String Compression II",
      "titleSlug": "string-compression-ii",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 68.66248055123361,
      "frontEndId": "1532",
      "status": null,
      "difficulty": "Medium",
      "title": "The Most Recent Three Orders",
      "titleSlug": "the-most-recent-three-orders",
      "topicTags": ["Database"]
   },
   {
      "acRate": 55.94133205097379,
      "frontEndId": "1533",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Index of the Large Integer",
      "titleSlug": "find-the-index-of-the-large-integer",
      "topicTags": ["Array", "Binary Search", "Interactive"]
   },
   {
      "acRate": 80.99605620103496,
      "frontEndId": "1534",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Good Triplets",
      "titleSlug": "count-good-triplets",
      "topicTags": ["Array", "Enumeration"]
   },
   {
      "acRate": 48.495822611899996,
      "frontEndId": "1535",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Winner of an Array Game",
      "titleSlug": "find-the-winner-of-an-array-game",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 46.610884307837644,
      "frontEndId": "1536",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Swaps to Arrange a Binary Grid",
      "titleSlug": "minimum-swaps-to-arrange-a-binary-grid",
      "topicTags": ["Array", "Greedy", "Matrix"]
   },
   {
      "acRate": 39.10728708236497,
      "frontEndId": "1537",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Get the Maximum Score",
      "titleSlug": "get-the-maximum-score",
      "topicTags": ["Array", "Two Pointers", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 70.78197226502311,
      "frontEndId": "1538",
      "status": null,
      "difficulty": "Medium",
      "title": "Guess the Majority in a Hidden Array",
      "titleSlug": "guess-the-majority-in-a-hidden-array",
      "topicTags": ["Array", "Math", "Interactive"]
   },
   {
      "acRate": 59.05625681889194,
      "frontEndId": "1539",
      "status": null,
      "difficulty": "Easy",
      "title": "Kth Missing Positive Number",
      "titleSlug": "kth-missing-positive-number",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 34.04518421104285,
      "frontEndId": "1540",
      "status": null,
      "difficulty": "Medium",
      "title": "Can Convert String in K Moves",
      "titleSlug": "can-convert-string-in-k-moves",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 49.812078950478664,
      "frontEndId": "1541",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Insertions to Balance a Parentheses String",
      "titleSlug": "minimum-insertions-to-balance-a-parentheses-string",
      "topicTags": ["String", "Stack", "Greedy"]
   },
   {
      "acRate": 42.63889817476767,
      "frontEndId": "1542",
      "status": null,
      "difficulty": "Hard",
      "title": "Find Longest Awesome Substring",
      "titleSlug": "find-longest-awesome-substring",
      "topicTags": ["Hash Table", "String", "Bit Manipulation"]
   },
   {
      "acRate": 59.87228443988063,
      "frontEndId": "1543",
      "status": null,
      "difficulty": "Easy",
      "title": "Fix Product Name Format",
      "titleSlug": "fix-product-name-format",
      "topicTags": ["Database"]
   },
   {
      "acRate": 63.08421484758892,
      "frontEndId": "1544",
      "status": null,
      "difficulty": "Easy",
      "title": "Make The String Great",
      "titleSlug": "make-the-string-great",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 58.72980677858727,
      "frontEndId": "1545",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Kth Bit in Nth Binary String",
      "titleSlug": "find-kth-bit-in-nth-binary-string",
      "topicTags": ["String", "Recursion"]
   },
   {
      "acRate": 47.50198972577961,
      "frontEndId": "1546",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
      "titleSlug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
      "topicTags": ["Array", "Hash Table", "Greedy", "Prefix Sum"]
   },
   {
      "acRate": 62.04861216212125,
      "frontEndId": "1547",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Cost to Cut a Stick",
      "titleSlug": "minimum-cost-to-cut-a-stick",
      "topicTags": ["Array", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 58.95126378997346,
      "frontEndId": "1548",
      "status": null,
      "difficulty": "Hard",
      "title": "The Most Similar Path in a Graph",
      "titleSlug": "the-most-similar-path-in-a-graph",
      "topicTags": ["Dynamic Programming", "Graph"]
   },
   {
      "acRate": 65.42458742427407,
      "frontEndId": "1549",
      "status": null,
      "difficulty": "Medium",
      "title": "The Most Recent Orders for Each Product",
      "titleSlug": "the-most-recent-orders-for-each-product",
      "topicTags": ["Database"]
   },
   {
      "acRate": 63.10821116854504,
      "frontEndId": "1550",
      "status": null,
      "difficulty": "Easy",
      "title": "Three Consecutive Odds",
      "titleSlug": "three-consecutive-odds",
      "topicTags": ["Array"]
   },
   {
      "acRate": 81.95825643003407,
      "frontEndId": "1551",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Operations to Make Array Equal",
      "titleSlug": "minimum-operations-to-make-array-equal",
      "topicTags": ["Math"]
   },
   {
      "acRate": 59.774652109825865,
      "frontEndId": "1552",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Magnetic Force Between Two Balls",
      "titleSlug": "magnetic-force-between-two-balls",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 34.93575614214289,
      "frontEndId": "1553",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Number of Days to Eat N Oranges",
      "titleSlug": "minimum-number-of-days-to-eat-n-oranges",
      "topicTags": ["Dynamic Programming", "Memoization"]
   },
   {
      "acRate": 41.95905901174417,
      "frontEndId": "1554",
      "status": null,
      "difficulty": "Medium",
      "title": "Strings Differ by One Character",
      "titleSlug": "strings-differ-by-one-character",
      "topicTags": ["Hash Table", "String", "Rolling Hash", "Hash Function"]
   },
   {
      "acRate": 51.57188153545166,
      "frontEndId": "1555",
      "status": null,
      "difficulty": "Medium",
      "title": "Bank Account Summary",
      "titleSlug": "bank-account-summary",
      "topicTags": ["Database"]
   },
   {
      "acRate": 53.97128190899001,
      "frontEndId": "1556",
      "status": null,
      "difficulty": "Easy",
      "title": "Thousand Separator",
      "titleSlug": "thousand-separator",
      "topicTags": ["String"]
   },
   {
      "acRate": 81.24618385977453,
      "frontEndId": "1557",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Number of Vertices to Reach All Nodes",
      "titleSlug": "minimum-number-of-vertices-to-reach-all-nodes",
      "topicTags": ["Graph"]
   },
   {
      "acRate": 63.82924579317365,
      "frontEndId": "1558",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Numbers of Function Calls to Make Target Array",
      "titleSlug": "minimum-numbers-of-function-calls-to-make-target-array",
      "topicTags": ["Array", "Greedy", "Bit Manipulation"]
   },
   {
      "acRate": 48.45936543642594,
      "frontEndId": "1559",
      "status": null,
      "difficulty": "Medium",
      "title": "Detect Cycles in 2D Grid",
      "titleSlug": "detect-cycles-in-2d-grid",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 58.3455388134267,
      "frontEndId": "1560",
      "status": null,
      "difficulty": "Easy",
      "title": "Most Visited Sector in  a Circular Track",
      "titleSlug": "most-visited-sector-in-a-circular-track",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 79.65422955196246,
      "frontEndId": "1561",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Number of Coins You Can Get",
      "titleSlug": "maximum-number-of-coins-you-can-get",
      "topicTags": ["Array", "Math", "Greedy", "Sorting", "Game Theory"]
   },
   {
      "acRate": 42.91396325850797,
      "frontEndId": "1562",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Latest Group of Size M",
      "titleSlug": "find-latest-group-of-size-m",
      "topicTags": ["Array", "Binary Search", "Simulation"]
   },
   {
      "acRate": 40.57097541633624,
      "frontEndId": "1563",
      "status": null,
      "difficulty": "Hard",
      "title": "Stone Game V",
      "titleSlug": "stone-game-v",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Game Theory"]
   },
   {
      "acRate": 67.06388763026733,
      "frontEndId": "1564",
      "status": null,
      "difficulty": "Medium",
      "title": "Put Boxes Into the Warehouse I",
      "titleSlug": "put-boxes-into-the-warehouse-i",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 82.27608095296979,
      "frontEndId": "1565",
      "status": null,
      "difficulty": "Easy",
      "title": "Unique Orders and Customers Per Month",
      "titleSlug": "unique-orders-and-customers-per-month",
      "topicTags": ["Database"]
   },
   {
      "acRate": 43.254658047694065,
      "frontEndId": "1566",
      "status": null,
      "difficulty": "Easy",
      "title": "Detect Pattern of Length M Repeated K or More Times",
      "titleSlug": "detect-pattern-of-length-m-repeated-k-or-more-times",
      "topicTags": ["Array", "Enumeration"]
   },
   {
      "acRate": 44.12525035514037,
      "frontEndId": "1567",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Length of Subarray With Positive Product",
      "titleSlug": "maximum-length-of-subarray-with-positive-product",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 45.40572792362769,
      "frontEndId": "1568",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Number of Days to Disconnect Island",
      "titleSlug": "minimum-number-of-days-to-disconnect-island",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix",
         "Strongly Connected Component"
      ]
   },
   {
      "acRate": 53.624446123374106,
      "frontEndId": "1569",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ways to Reorder Array to Get Same BST",
      "titleSlug": "number-of-ways-to-reorder-array-to-get-same-bst",
      "topicTags": [
         "Array",
         "Math",
         "Divide and Conquer",
         "Dynamic Programming",
         "Tree",
         "Union Find",
         "Binary Search Tree",
         "Memoization",
         "Combinatorics",
         "Binary Tree"
      ]
   },
   {
      "acRate": 90.17619853355893,
      "frontEndId": "1570",
      "status": null,
      "difficulty": "Medium",
      "title": "Dot Product of Two Sparse Vectors",
      "titleSlug": "dot-product-of-two-sparse-vectors",
      "topicTags": ["Array", "Hash Table", "Two Pointers", "Design"]
   },
   {
      "acRate": 87.97140053273517,
      "frontEndId": "1571",
      "status": null,
      "difficulty": "Easy",
      "title": "Warehouse Manager",
      "titleSlug": "warehouse-manager",
      "topicTags": ["Database"]
   },
   {
      "acRate": 82.67720168719566,
      "frontEndId": "1572",
      "status": null,
      "difficulty": "Easy",
      "title": "Matrix Diagonal Sum",
      "titleSlug": "matrix-diagonal-sum",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 32.47657461991933,
      "frontEndId": "1573",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Ways to Split a String",
      "titleSlug": "number-of-ways-to-split-a-string",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 37.53467664451872,
      "frontEndId": "1574",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Shortest Subarray to be Removed to Make Array Sorted",
      "titleSlug": "shortest-subarray-to-be-removed-to-make-array-sorted",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Stack",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 65.88033942527497,
      "frontEndId": "1575",
      "status": null,
      "difficulty": "Hard",
      "title": "Count All Possible Routes",
      "titleSlug": "count-all-possible-routes",
      "topicTags": ["Array", "Dynamic Programming", "Memoization"]
   },
   {
      "acRate": 47.1981523315014,
      "frontEndId": "1576",
      "status": null,
      "difficulty": "Easy",
      "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
      "titleSlug": "replace-all-s-to-avoid-consecutive-repeating-characters",
      "topicTags": ["String"]
   },
   {
      "acRate": 40.5654849106358,
      "frontEndId": "1577",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
      "titleSlug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
      "topicTags": ["Array", "Hash Table", "Math", "Two Pointers"]
   },
   {
      "acRate": 63.01543545656069,
      "frontEndId": "1578",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Time to Make Rope Colorful",
      "titleSlug": "minimum-time-to-make-rope-colorful",
      "topicTags": ["Array", "String", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 64.56456106403068,
      "frontEndId": "1579",
      "status": null,
      "difficulty": "Hard",
      "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
      "titleSlug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
      "topicTags": ["Union Find", "Graph"]
   },
   {
      "acRate": 63.711744308759236,
      "frontEndId": "1580",
      "status": null,
      "difficulty": "Medium",
      "title": "Put Boxes Into the Warehouse II",
      "titleSlug": "put-boxes-into-the-warehouse-ii",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 75.47615895292316,
      "frontEndId": "1581",
      "status": null,
      "difficulty": "Easy",
      "title": "Customer Who Visited but Did Not Make Any Transactions",
      "titleSlug": "customer-who-visited-but-did-not-make-any-transactions",
      "topicTags": ["Database"]
   },
   {
      "acRate": 65.0994077527911,
      "frontEndId": "1582",
      "status": null,
      "difficulty": "Easy",
      "title": "Special Positions in a Binary Matrix",
      "titleSlug": "special-positions-in-a-binary-matrix",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 61.43490356957608,
      "frontEndId": "1583",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Unhappy Friends",
      "titleSlug": "count-unhappy-friends",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 66.50585669902163,
      "frontEndId": "1584",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Min Cost to Connect All Points",
      "titleSlug": "min-cost-to-connect-all-points",
      "topicTags": ["Array", "Union Find", "Graph", "Minimum Spanning Tree"]
   },
   {
      "acRate": 48.062953995157386,
      "frontEndId": "1585",
      "status": null,
      "difficulty": "Hard",
      "title": "Check If String Is Transformable With Substring Sort Operations",
      "titleSlug": "check-if-string-is-transformable-with-substring-sort-operations",
      "topicTags": ["String", "Greedy", "Sorting"]
   },
   {
      "acRate": 70.45213330503078,
      "frontEndId": "1586",
      "status": null,
      "difficulty": "Medium",
      "title": "Binary Search Tree Iterator II",
      "titleSlug": "binary-search-tree-iterator-ii",
      "topicTags": [
         "Stack",
         "Tree",
         "Design",
         "Binary Search Tree",
         "Binary Tree",
         "Iterator"
      ]
   },
   {
      "acRate": 84.17184121253001,
      "frontEndId": "1587",
      "status": null,
      "difficulty": "Easy",
      "title": "Bank Account Summary II",
      "titleSlug": "bank-account-summary-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 83.19127382382736,
      "frontEndId": "1588",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of All Odd Length Subarrays",
      "titleSlug": "sum-of-all-odd-length-subarrays",
      "topicTags": ["Array", "Math", "Prefix Sum"]
   },
   {
      "acRate": 37.45463035680173,
      "frontEndId": "1589",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Sum Obtained of Any Permutation",
      "titleSlug": "maximum-sum-obtained-of-any-permutation",
      "topicTags": ["Array", "Greedy", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 28.59612127078508,
      "frontEndId": "1590",
      "status": null,
      "difficulty": "Medium",
      "title": "Make Sum Divisible by P",
      "titleSlug": "make-sum-divisible-by-p",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 58.86659920233347,
      "frontEndId": "1591",
      "status": null,
      "difficulty": "Hard",
      "title": "Strange Printer II",
      "titleSlug": "strange-printer-ii",
      "topicTags": ["Array", "Graph", "Topological Sort", "Matrix"]
   },
   {
      "acRate": 43.32418435608827,
      "frontEndId": "1592",
      "status": null,
      "difficulty": "Easy",
      "title": "Rearrange Spaces Between Words",
      "titleSlug": "rearrange-spaces-between-words",
      "topicTags": ["String"]
   },
   {
      "acRate": 55.79214496718809,
      "frontEndId": "1593",
      "status": null,
      "difficulty": "Medium",
      "title": "Split a String Into the Max Number of Unique Substrings",
      "titleSlug": "split-a-string-into-the-max-number-of-unique-substrings",
      "topicTags": ["Hash Table", "String", "Backtracking"]
   },
   {
      "acRate": 33.34976841476169,
      "frontEndId": "1594",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Non Negative Product in a Matrix",
      "titleSlug": "maximum-non-negative-product-in-a-matrix",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 47.5401376146789,
      "frontEndId": "1595",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Cost to Connect Two Groups of Points",
      "titleSlug": "minimum-cost-to-connect-two-groups-of-points",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Matrix",
         "Bitmask"
      ]
   },
   {
      "acRate": 79.77444438316881,
      "frontEndId": "1596",
      "status": null,
      "difficulty": "Medium",
      "title": "The Most Frequently Ordered Products for Each Customer",
      "titleSlug": "the-most-frequently-ordered-products-for-each-customer",
      "topicTags": ["Database"]
   },
   {
      "acRate": 62.63443562167051,
      "frontEndId": "1597",
      "status": null,
      "difficulty": "Hard",
      "title": "Build Binary Expression Tree From Infix Expression",
      "titleSlug": "build-binary-expression-tree-from-infix-expression",
      "topicTags": ["String", "Stack", "Tree", "Binary Tree"]
   },
   {
      "acRate": 64.65297991470761,
      "frontEndId": "1598",
      "status": null,
      "difficulty": "Easy",
      "title": "Crawler Log Folder",
      "titleSlug": "crawler-log-folder",
      "topicTags": ["Array", "String", "Stack"]
   },
   {
      "acRate": 43.63712565724301,
      "frontEndId": "1599",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Profit of Operating a Centennial Wheel",
      "titleSlug": "maximum-profit-of-operating-a-centennial-wheel",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 64.00306356905794,
      "frontEndId": "1600",
      "status": null,
      "difficulty": "Medium",
      "title": "Throne Inheritance",
      "titleSlug": "throne-inheritance",
      "topicTags": ["Hash Table", "Tree", "Depth-First Search", "Design"]
   },
   {
      "acRate": 64.95510557929283,
      "frontEndId": "1601",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Achievable Transfer Requests",
      "titleSlug": "maximum-number-of-achievable-transfer-requests",
      "topicTags": ["Array", "Backtracking", "Bit Manipulation", "Enumeration"]
   },
   {
      "acRate": 75.47066474977751,
      "frontEndId": "1602",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Nearest Right Node in Binary Tree",
      "titleSlug": "find-nearest-right-node-in-binary-tree",
      "topicTags": ["Tree", "Breadth-First Search", "Binary Tree"]
   },
   {
      "acRate": 88.18893830980468,
      "frontEndId": "1603",
      "status": null,
      "difficulty": "Easy",
      "title": "Design Parking System",
      "titleSlug": "design-parking-system",
      "topicTags": ["Design", "Simulation", "Counting"]
   },
   {
      "acRate": 45.86694116983473,
      "frontEndId": "1604",
      "status": null,
      "difficulty": "Medium",
      "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
      "titleSlug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
      "topicTags": ["Array", "Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 77.60541885309306,
      "frontEndId": "1605",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Valid Matrix Given Row and Column Sums",
      "titleSlug": "find-valid-matrix-given-row-and-column-sums",
      "topicTags": ["Array", "Greedy", "Matrix"]
   },
   {
      "acRate": 43.28109467282615,
      "frontEndId": "1606",
      "status": null,
      "difficulty": "Hard",
      "title": "Find Servers That Handled Most Number of Requests",
      "titleSlug": "find-servers-that-handled-most-number-of-requests",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)", "Ordered Set"]
   },
   {
      "acRate": 54.145925996025355,
      "frontEndId": "1607",
      "status": null,
      "difficulty": "Easy",
      "title": "Sellers With No Sales",
      "titleSlug": "sellers-with-no-sales",
      "topicTags": ["Database"]
   },
   {
      "acRate": 59.97857734066897,
      "frontEndId": "1608",
      "status": null,
      "difficulty": "Easy",
      "title": "Special Array With X Elements Greater Than or Equal X",
      "titleSlug": "special-array-with-x-elements-greater-than-or-equal-x",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 55.26268623277697,
      "frontEndId": "1609",
      "status": null,
      "difficulty": "Medium",
      "title": "Even Odd Tree",
      "titleSlug": "even-odd-tree",
      "topicTags": ["Tree", "Breadth-First Search", "Binary Tree"]
   },
   {
      "acRate": 37.343941725259526,
      "frontEndId": "1610",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Visible Points",
      "titleSlug": "maximum-number-of-visible-points",
      "topicTags": ["Array", "Math", "Geometry", "Sliding Window", "Sorting"]
   },
   {
      "acRate": 63.528099910793934,
      "frontEndId": "1611",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum One Bit Operations to Make Integers Zero",
      "titleSlug": "minimum-one-bit-operations-to-make-integers-zero",
      "topicTags": ["Dynamic Programming", "Bit Manipulation", "Memoization"]
   },
   {
      "acRate": 70.36066261270707,
      "frontEndId": "1612",
      "status": null,
      "difficulty": "Medium",
      "title": "Check If Two Expression Trees are Equivalent",
      "titleSlug": "check-if-two-expression-trees-are-equivalent",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 73.73233582709892,
      "frontEndId": "1613",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Missing IDs",
      "titleSlug": "find-the-missing-ids",
      "topicTags": ["Database"]
   },
   {
      "acRate": 81.56855018510261,
      "frontEndId": "1614",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Nesting Depth of the Parentheses",
      "titleSlug": "maximum-nesting-depth-of-the-parentheses",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 65.23548959348375,
      "frontEndId": "1615",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximal Network Rank",
      "titleSlug": "maximal-network-rank",
      "topicTags": ["Graph"]
   },
   {
      "acRate": 31.00087833033586,
      "frontEndId": "1616",
      "status": null,
      "difficulty": "Medium",
      "title": "Split Two Strings to Make Palindrome",
      "titleSlug": "split-two-strings-to-make-palindrome",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 65.57305969070674,
      "frontEndId": "1617",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Subtrees With Max Distance Between Cities",
      "titleSlug": "count-subtrees-with-max-distance-between-cities",
      "topicTags": [
         "Dynamic Programming",
         "Bit Manipulation",
         "Tree",
         "Enumeration",
         "Bitmask"
      ]
   },
   {
      "acRate": 60.46232085067037,
      "frontEndId": "1618",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Font to Fit a Sentence in a Screen",
      "titleSlug": "maximum-font-to-fit-a-sentence-in-a-screen",
      "topicTags": ["Array", "String", "Binary Search", "Interactive"]
   },
   {
      "acRate": 66.94629342573174,
      "frontEndId": "1619",
      "status": null,
      "difficulty": "Easy",
      "title": "Mean of Array After Removing Some Elements",
      "titleSlug": "mean-of-array-after-removing-some-elements",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 37.5427741058454,
      "frontEndId": "1620",
      "status": null,
      "difficulty": "Medium",
      "title": "Coordinate With Maximum Network Quality",
      "titleSlug": "coordinate-with-maximum-network-quality",
      "topicTags": ["Array", "Enumeration"]
   },
   {
      "acRate": 42.82128989487641,
      "frontEndId": "1621",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Sets of K Non-Overlapping Line Segments",
      "titleSlug": "number-of-sets-of-k-non-overlapping-line-segments",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 16.665119445475927,
      "frontEndId": "1622",
      "status": null,
      "difficulty": "Hard",
      "title": "Fancy Sequence",
      "titleSlug": "fancy-sequence",
      "topicTags": ["Math", "Design", "Segment Tree"]
   },
   {
      "acRate": 84.47294776119404,
      "frontEndId": "1623",
      "status": null,
      "difficulty": "Easy",
      "title": "All Valid Triplets That Can Represent a Country",
      "titleSlug": "all-valid-triplets-that-can-represent-a-country",
      "topicTags": ["Database"]
   },
   {
      "acRate": 59.07537281312505,
      "frontEndId": "1624",
      "status": null,
      "difficulty": "Easy",
      "title": "Largest Substring Between Two Equal Characters",
      "titleSlug": "largest-substring-between-two-equal-characters",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 65.95191364082433,
      "frontEndId": "1625",
      "status": null,
      "difficulty": "Medium",
      "title": "Lexicographically Smallest String After Applying Operations",
      "titleSlug": "lexicographically-smallest-string-after-applying-operations",
      "topicTags": ["String", "Breadth-First Search"]
   },
   {
      "acRate": 50.59654026238629,
      "frontEndId": "1626",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Best Team With No Conflicts",
      "titleSlug": "best-team-with-no-conflicts",
      "topicTags": ["Array", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 46.70022038239323,
      "frontEndId": "1627",
      "status": null,
      "difficulty": "Hard",
      "title": "Graph Connectivity With Threshold",
      "titleSlug": "graph-connectivity-with-threshold",
      "topicTags": ["Array", "Math", "Union Find", "Number Theory"]
   },
   {
      "acRate": 82.86288992943349,
      "frontEndId": "1628",
      "status": null,
      "difficulty": "Medium",
      "title": "Design an Expression Tree With Evaluate Function",
      "titleSlug": "design-an-expression-tree-with-evaluate-function",
      "topicTags": ["Math", "Stack", "Tree", "Design", "Binary Tree"]
   },
   {
      "acRate": 59.08726374882387,
      "frontEndId": "1629",
      "status": null,
      "difficulty": "Easy",
      "title": "Slowest Key",
      "titleSlug": "slowest-key",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 80.93797065878285,
      "frontEndId": "1630",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Arithmetic Subarrays",
      "titleSlug": "arithmetic-subarrays",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 59.37173029005361,
      "frontEndId": "1631",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Path With Minimum Effort",
      "titleSlug": "path-with-minimum-effort",
      "topicTags": [
         "Array",
         "Binary Search",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 40.930657643993314,
      "frontEndId": "1632",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Rank Transform of a Matrix",
      "titleSlug": "rank-transform-of-a-matrix",
      "topicTags": [
         "Array",
         "Union Find",
         "Graph",
         "Topological Sort",
         "Sorting",
         "Matrix"
      ]
   },
   {
      "acRate": 56.984991574904974,
      "frontEndId": "1633",
      "status": null,
      "difficulty": "Easy",
      "title": "Percentage of Users Attended a Contest",
      "titleSlug": "percentage-of-users-attended-a-contest",
      "topicTags": ["Database"]
   },
   {
      "acRate": 55.025780661607094,
      "frontEndId": "1634",
      "status": null,
      "difficulty": "Medium",
      "title": "Add Two Polynomials Represented as Linked Lists",
      "titleSlug": "add-two-polynomials-represented-as-linked-lists",
      "topicTags": ["Linked List", "Math", "Two Pointers"]
   },
   {
      "acRate": 48.50184794086589,
      "frontEndId": "1635",
      "status": null,
      "difficulty": "Hard",
      "title": "Hopper Company Queries I",
      "titleSlug": "hopper-company-queries-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 70.50836651312879,
      "frontEndId": "1636",
      "status": null,
      "difficulty": "Easy",
      "title": "Sort Array by Increasing Frequency",
      "titleSlug": "sort-array-by-increasing-frequency",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 84.49474660074165,
      "frontEndId": "1637",
      "status": null,
      "difficulty": "Medium",
      "title": "Widest Vertical Area Between Two Points Containing No Points",
      "titleSlug": "widest-vertical-area-between-two-points-containing-no-points",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 71.15557197909517,
      "frontEndId": "1638",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Substrings That Differ by One Character",
      "titleSlug": "count-substrings-that-differ-by-one-character",
      "topicTags": ["Hash Table", "String", "Dynamic Programming"]
   },
   {
      "acRate": 52.51988066611456,
      "frontEndId": "1639",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ways to Form a Target String Given a Dictionary",
      "titleSlug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
      "topicTags": ["Array", "String", "Dynamic Programming"]
   },
   {
      "acRate": 56.31670031727718,
      "frontEndId": "1640",
      "status": null,
      "difficulty": "Easy",
      "title": "Check Array Formation Through Concatenation",
      "titleSlug": "check-array-formation-through-concatenation",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 77.94561379373596,
      "frontEndId": "1641",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Sorted Vowel Strings",
      "titleSlug": "count-sorted-vowel-strings",
      "topicTags": ["Math", "Dynamic Programming", "Combinatorics"]
   },
   {
      "acRate": 48.41495667668648,
      "frontEndId": "1642",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Furthest Building You Can Reach",
      "titleSlug": "furthest-building-you-can-reach",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 47.45776956046727,
      "frontEndId": "1643",
      "status": null,
      "difficulty": "Hard",
      "title": "Kth Smallest Instructions",
      "titleSlug": "kth-smallest-instructions",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Combinatorics"]
   },
   {
      "acRate": 61.727767277193045,
      "frontEndId": "1644",
      "status": null,
      "difficulty": "Medium",
      "title": "Lowest Common Ancestor of a Binary Tree II",
      "titleSlug": "lowest-common-ancestor-of-a-binary-tree-ii",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 38.553724635707475,
      "frontEndId": "1645",
      "status": null,
      "difficulty": "Hard",
      "title": "Hopper Company Queries II",
      "titleSlug": "hopper-company-queries-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 50.19711367472988,
      "frontEndId": "1646",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Get Maximum in Generated Array",
      "titleSlug": "get-maximum-in-generated-array",
      "topicTags": ["Array", "Dynamic Programming", "Simulation"]
   },
   {
      "acRate": 61.2017523893552,
      "frontEndId": "1647",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Deletions to Make Character Frequencies Unique",
      "titleSlug": "minimum-deletions-to-make-character-frequencies-unique",
      "topicTags": ["Hash Table", "String", "Greedy", "Sorting"]
   },
   {
      "acRate": 30.120761920571027,
      "frontEndId": "1648",
      "status": null,
      "difficulty": "Medium",
      "title": "Sell Diminishing-Valued Colored Balls",
      "titleSlug": "sell-diminishing-valued-colored-balls",
      "topicTags": [
         "Array",
         "Math",
         "Binary Search",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 38.07303807303807,
      "frontEndId": "1649",
      "status": null,
      "difficulty": "Hard",
      "title": "Create Sorted Array through Instructions",
      "titleSlug": "create-sorted-array-through-instructions",
      "topicTags": [
         "Array",
         "Binary Search",
         "Divide and Conquer",
         "Binary Indexed Tree",
         "Segment Tree",
         "Merge Sort",
         "Ordered Set"
      ]
   },
   {
      "acRate": 77.93424904300834,
      "frontEndId": "1650",
      "status": null,
      "difficulty": "Medium",
      "title": "Lowest Common Ancestor of a Binary Tree III",
      "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iii",
      "topicTags": ["Hash Table", "Tree", "Binary Tree"]
   },
   {
      "acRate": 66.74652064795802,
      "frontEndId": "1651",
      "status": null,
      "difficulty": "Hard",
      "title": "Hopper Company Queries III",
      "titleSlug": "hopper-company-queries-iii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 63.398704700916895,
      "frontEndId": "1652",
      "status": null,
      "difficulty": "Easy",
      "title": "Defuse the Bomb",
      "titleSlug": "defuse-the-bomb",
      "topicTags": ["Array"]
   },
   {
      "acRate": 58.853361370523835,
      "frontEndId": "1653",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Deletions to Make String Balanced",
      "titleSlug": "minimum-deletions-to-make-string-balanced",
      "topicTags": ["String", "Dynamic Programming", "Stack"]
   },
   {
      "acRate": 29.296322226028927,
      "frontEndId": "1654",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Jumps to Reach Home",
      "titleSlug": "minimum-jumps-to-reach-home",
      "topicTags": ["Array", "Dynamic Programming", "Breadth-First Search"]
   },
   {
      "acRate": 39.27268151503712,
      "frontEndId": "1655",
      "status": null,
      "difficulty": "Hard",
      "title": "Distribute Repeating Integers",
      "titleSlug": "distribute-repeating-integers",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 84.54852029516188,
      "frontEndId": "1656",
      "status": null,
      "difficulty": "Easy",
      "title": "Design an Ordered Stream",
      "titleSlug": "design-an-ordered-stream",
      "topicTags": ["Array", "Hash Table", "Design", "Data Stream"]
   },
   {
      "acRate": 53.95293815828855,
      "frontEndId": "1657",
      "status": null,
      "difficulty": "Medium",
      "title": "Determine if Two Strings Are Close",
      "titleSlug": "determine-if-two-strings-are-close",
      "topicTags": ["Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 39.7559191513041,
      "frontEndId": "1658",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Operations to Reduce X to Zero",
      "titleSlug": "minimum-operations-to-reduce-x-to-zero",
      "topicTags": [
         "Array",
         "Hash Table",
         "Binary Search",
         "Sliding Window",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 39.25978535353536,
      "frontEndId": "1659",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximize Grid Happiness",
      "titleSlug": "maximize-grid-happiness",
      "topicTags": [
         "Dynamic Programming",
         "Bit Manipulation",
         "Memoization",
         "Bitmask"
      ]
   },
   {
      "acRate": 72.39610794229017,
      "frontEndId": "1660",
      "status": null,
      "difficulty": "Medium",
      "title": "Correct a Binary Tree",
      "titleSlug": "correct-a-binary-tree",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 68.06004852405985,
      "frontEndId": "1661",
      "status": null,
      "difficulty": "Easy",
      "title": "Average Time of Process per Machine",
      "titleSlug": "average-time-of-process-per-machine",
      "topicTags": ["Database"]
   },
   {
      "acRate": 83.83785731050331,
      "frontEndId": "1662",
      "status": null,
      "difficulty": "Easy",
      "title": "Check If Two String Arrays are Equivalent",
      "titleSlug": "check-if-two-string-arrays-are-equivalent",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 66.73376690409827,
      "frontEndId": "1663",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Smallest String With A Given Numeric Value",
      "titleSlug": "smallest-string-with-a-given-numeric-value",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 63.299975407200016,
      "frontEndId": "1664",
      "status": null,
      "difficulty": "Medium",
      "title": "Ways to Make a Fair Array",
      "titleSlug": "ways-to-make-a-fair-array",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 57.00904040954144,
      "frontEndId": "1665",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Initial Energy to Finish Tasks",
      "titleSlug": "minimum-initial-energy-to-finish-tasks",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 73.06763285024155,
      "frontEndId": "1666",
      "status": null,
      "difficulty": "Medium",
      "title": "Change the Root of a Binary Tree",
      "titleSlug": "change-the-root-of-a-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 63.16178471209801,
      "frontEndId": "1667",
      "status": null,
      "difficulty": "Easy",
      "title": "Fix Names in a Table",
      "titleSlug": "fix-names-in-a-table",
      "topicTags": ["Database"]
   },
   {
      "acRate": 38.72299314948182,
      "frontEndId": "1668",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Maximum Repeating Substring",
      "titleSlug": "maximum-repeating-substring",
      "topicTags": ["String", "String Matching"]
   },
   {
      "acRate": 72.95165302009767,
      "frontEndId": "1669",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Merge In Between Linked Lists",
      "titleSlug": "merge-in-between-linked-lists",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 56.539192399049874,
      "frontEndId": "1670",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Front Middle Back Queue",
      "titleSlug": "design-front-middle-back-queue",
      "topicTags": ["Array", "Linked List", "Design", "Queue", "Data Stream"]
   },
   {
      "acRate": 41.671319857692126,
      "frontEndId": "1671",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Number of Removals to Make Mountain Array",
      "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
      "topicTags": ["Array", "Binary Search", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 87.53218014572965,
      "frontEndId": "1672",
      "status": null,
      "difficulty": "Easy",
      "title": "Richest Customer Wealth",
      "titleSlug": "richest-customer-wealth",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 49.65585826071027,
      "frontEndId": "1673",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find the Most Competitive Subsequence",
      "titleSlug": "find-the-most-competitive-subsequence",
      "topicTags": ["Array", "Stack", "Greedy", "Monotonic Stack"]
   },
   {
      "acRate": 38.88187906435019,
      "frontEndId": "1674",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Moves to Make Array Complementary",
      "titleSlug": "minimum-moves-to-make-array-complementary",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 54.27545828813874,
      "frontEndId": "1675",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimize Deviation in Array",
      "titleSlug": "minimize-deviation-in-array",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)", "Ordered Set"]
   },
   {
      "acRate": 78.8733056123288,
      "frontEndId": "1676",
      "status": null,
      "difficulty": "Medium",
      "title": "Lowest Common Ancestor of a Binary Tree IV",
      "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iv",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 38.02792536760163,
      "frontEndId": "1677",
      "status": null,
      "difficulty": "Easy",
      "title": "Product's Worth Over Invoices",
      "titleSlug": "products-worth-over-invoices",
      "topicTags": ["Database"]
   },
   {
      "acRate": 86.799285582312,
      "frontEndId": "1678",
      "status": null,
      "difficulty": "Easy",
      "title": "Goal Parser Interpretation",
      "titleSlug": "goal-parser-interpretation",
      "topicTags": ["String"]
   },
   {
      "acRate": 55.56194814253945,
      "frontEndId": "1679",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Max Number of K-Sum Pairs",
      "titleSlug": "max-number-of-k-sum-pairs",
      "topicTags": ["Array", "Hash Table", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 57.021736473403536,
      "frontEndId": "1680",
      "status": null,
      "difficulty": "Medium",
      "title": "Concatenation of Consecutive Binary Numbers",
      "titleSlug": "concatenation-of-consecutive-binary-numbers",
      "topicTags": ["Math", "Bit Manipulation", "Simulation"]
   },
   {
      "acRate": 38.72971348427169,
      "frontEndId": "1681",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Incompatibility",
      "titleSlug": "minimum-incompatibility",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 50,
      "frontEndId": "1682",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Palindromic Subsequence II",
      "titleSlug": "longest-palindromic-subsequence-ii",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 84.74186978876519,
      "frontEndId": "1683",
      "status": null,
      "difficulty": "Easy",
      "title": "Invalid Tweets",
      "titleSlug": "invalid-tweets",
      "topicTags": ["Database"]
   },
   {
      "acRate": 82.58305201248344,
      "frontEndId": "1684",
      "status": null,
      "difficulty": "Easy",
      "title": "Count the Number of Consistent Strings",
      "titleSlug": "count-the-number-of-consistent-strings",
      "topicTags": ["Array", "Hash Table", "String", "Bit Manipulation"]
   },
   {
      "acRate": 62.57919392451039,
      "frontEndId": "1685",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum of Absolute Differences in a Sorted Array",
      "titleSlug": "sum-of-absolute-differences-in-a-sorted-array",
      "topicTags": ["Array", "Math", "Prefix Sum"]
   },
   {
      "acRate": 56.098702688243954,
      "frontEndId": "1686",
      "status": null,
      "difficulty": "Medium",
      "title": "Stone Game VI",
      "titleSlug": "stone-game-vi",
      "topicTags": [
         "Array",
         "Math",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)",
         "Game Theory"
      ]
   },
   {
      "acRate": 38.75188381970133,
      "frontEndId": "1687",
      "status": null,
      "difficulty": "Hard",
      "title": "Delivering Boxes from Storage to Ports",
      "titleSlug": "delivering-boxes-from-storage-to-ports",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Segment Tree",
         "Queue",
         "Heap (Priority Queue)",
         "Prefix Sum",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 83.02012418642927,
      "frontEndId": "1688",
      "status": null,
      "difficulty": "Easy",
      "title": "Count of Matches in Tournament",
      "titleSlug": "count-of-matches-in-tournament",
      "topicTags": ["Math", "Simulation"]
   },
   {
      "acRate": 88.84761133301677,
      "frontEndId": "1689",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
      "titleSlug": "partitioning-into-minimum-number-of-deci-binary-numbers",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 57.96382319819819,
      "frontEndId": "1690",
      "status": null,
      "difficulty": "Medium",
      "title": "Stone Game VII",
      "titleSlug": "stone-game-vii",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Game Theory"]
   },
   {
      "acRate": 55.91639315944031,
      "frontEndId": "1691",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Height by Stacking Cuboids ",
      "titleSlug": "maximum-height-by-stacking-cuboids",
      "topicTags": ["Array", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 62.62900597501358,
      "frontEndId": "1692",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Ways to Distribute Candies",
      "titleSlug": "count-ways-to-distribute-candies",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 86.8591004028699,
      "frontEndId": "1693",
      "status": null,
      "difficulty": "Easy",
      "title": "Daily Leads and Partners",
      "titleSlug": "daily-leads-and-partners",
      "topicTags": ["Database"]
   },
   {
      "acRate": 65.21655215008107,
      "frontEndId": "1694",
      "status": null,
      "difficulty": "Easy",
      "title": "Reformat Phone Number",
      "titleSlug": "reformat-phone-number",
      "topicTags": ["String"]
   },
   {
      "acRate": 57.68815820730065,
      "frontEndId": "1695",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Erasure Value",
      "titleSlug": "maximum-erasure-value",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 45.767004341534005,
      "frontEndId": "1696",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Jump Game VI",
      "titleSlug": "jump-game-vi",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Queue",
         "Heap (Priority Queue)",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 62.63108467678823,
      "frontEndId": "1697",
      "status": null,
      "difficulty": "Hard",
      "title": "Checking Existence of Edge Length Limited Paths",
      "titleSlug": "checking-existence-of-edge-length-limited-paths",
      "topicTags": ["Array", "Two Pointers", "Union Find", "Graph", "Sorting"]
   },
   {
      "acRate": 63.20841925620423,
      "frontEndId": "1698",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Distinct Substrings in a String",
      "titleSlug": "number-of-distinct-substrings-in-a-string",
      "topicTags": [
         "String",
         "Trie",
         "Rolling Hash",
         "Suffix Array",
         "Hash Function"
      ]
   },
   {
      "acRate": 81.44450579790171,
      "frontEndId": "1699",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Calls Between Two Persons",
      "titleSlug": "number-of-calls-between-two-persons",
      "topicTags": ["Database"]
   },
   {
      "acRate": 70.10021413276232,
      "frontEndId": "1700",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Students Unable to Eat Lunch",
      "titleSlug": "number-of-students-unable-to-eat-lunch",
      "topicTags": ["Array", "Stack", "Queue", "Simulation"]
   },
   {
      "acRate": 62.995928415869706,
      "frontEndId": "1701",
      "status": null,
      "difficulty": "Medium",
      "title": "Average Waiting Time",
      "titleSlug": "average-waiting-time",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 46.427442301612395,
      "frontEndId": "1702",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Binary String After Change",
      "titleSlug": "maximum-binary-string-after-change",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 42.54579489236529,
      "frontEndId": "1703",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Adjacent Swaps for K Consecutive Ones",
      "titleSlug": "minimum-adjacent-swaps-for-k-consecutive-ones",
      "topicTags": ["Array", "Greedy", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 77.45968584766166,
      "frontEndId": "1704",
      "status": null,
      "difficulty": "Easy",
      "title": "Determine if String Halves Are Alike",
      "titleSlug": "determine-if-string-halves-are-alike",
      "topicTags": ["String", "Counting"]
   },
   {
      "acRate": 38.47217292207671,
      "frontEndId": "1705",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Eaten Apples",
      "titleSlug": "maximum-number-of-eaten-apples",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 71.6220551958469,
      "frontEndId": "1706",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Where Will the Ball Fall",
      "titleSlug": "where-will-the-ball-fall",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Depth-First Search",
         "Matrix",
         "Simulation"
      ]
   },
   {
      "acRate": 48.04014540856646,
      "frontEndId": "1707",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum XOR With an Element From Array",
      "titleSlug": "maximum-xor-with-an-element-from-array",
      "topicTags": ["Array", "Bit Manipulation", "Trie"]
   },
   {
      "acRate": 64.09766630678516,
      "frontEndId": "1708",
      "status": null,
      "difficulty": "Easy",
      "title": "Largest Subarray Length K",
      "titleSlug": "largest-subarray-length-k",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 72.47512014227873,
      "frontEndId": "1709",
      "status": null,
      "difficulty": "Medium",
      "title": "Biggest Window Between Visits",
      "titleSlug": "biggest-window-between-visits",
      "topicTags": ["Database"]
   },
   {
      "acRate": 73.63454989237897,
      "frontEndId": "1710",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Maximum Units on a Truck",
      "titleSlug": "maximum-units-on-a-truck",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 29.7129741769922,
      "frontEndId": "1711",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Good Meals",
      "titleSlug": "count-good-meals",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 32.7674317886531,
      "frontEndId": "1712",
      "status": null,
      "difficulty": "Medium",
      "title": "Ways to Split Array Into Three Subarrays",
      "titleSlug": "ways-to-split-array-into-three-subarrays",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Prefix Sum"]
   },
   {
      "acRate": 48.20294996265871,
      "frontEndId": "1713",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Operations to Make a Subsequence",
      "titleSlug": "minimum-operations-to-make-a-subsequence",
      "topicTags": ["Array", "Hash Table", "Binary Search", "Greedy"]
   },
   {
      "acRate": 49.028163427211425,
      "frontEndId": "1714",
      "status": null,
      "difficulty": "Hard",
      "title": "Sum Of Special Evenly-Spaced Elements In Array",
      "titleSlug": "sum-of-special-evenly-spaced-elements-in-array",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 75.68541349997186,
      "frontEndId": "1715",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Apples and Oranges",
      "titleSlug": "count-apples-and-oranges",
      "topicTags": ["Database"]
   },
   {
      "acRate": 66.95777437651931,
      "frontEndId": "1716",
      "status": null,
      "difficulty": "Easy",
      "title": "Calculate Money in Leetcode Bank",
      "titleSlug": "calculate-money-in-leetcode-bank",
      "topicTags": ["Math"]
   },
   {
      "acRate": 46.6583558418173,
      "frontEndId": "1717",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Score From Removing Substrings",
      "titleSlug": "maximum-score-from-removing-substrings",
      "topicTags": ["String", "Stack", "Greedy"]
   },
   {
      "acRate": 52.885238815647284,
      "frontEndId": "1718",
      "status": null,
      "difficulty": "Medium",
      "title": "Construct the Lexicographically Largest Valid Sequence",
      "titleSlug": "construct-the-lexicographically-largest-valid-sequence",
      "topicTags": ["Array", "Backtracking"]
   },
   {
      "acRate": 43.9263942199142,
      "frontEndId": "1719",
      "status": null,
      "difficulty": "Hard",
      "title": "Number Of Ways To Reconstruct A Tree",
      "titleSlug": "number-of-ways-to-reconstruct-a-tree",
      "topicTags": ["Tree", "Graph"]
   },
   {
      "acRate": 85.86365592821905,
      "frontEndId": "1720",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Decode XORed Array",
      "titleSlug": "decode-xored-array",
      "topicTags": ["Array", "Bit Manipulation"]
   },
   {
      "acRate": 68.30763472370572,
      "frontEndId": "1721",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Swapping Nodes in a Linked List",
      "titleSlug": "swapping-nodes-in-a-linked-list",
      "topicTags": ["Linked List", "Two Pointers"]
   },
   {
      "acRate": 48.73135204980618,
      "frontEndId": "1722",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimize Hamming Distance After Swap Operations",
      "titleSlug": "minimize-hamming-distance-after-swap-operations",
      "topicTags": ["Array", "Depth-First Search", "Union Find"]
   },
   {
      "acRate": 42.31110030057161,
      "frontEndId": "1723",
      "status": null,
      "difficulty": "Hard",
      "title": "Find Minimum Time to Finish All Jobs",
      "titleSlug": "find-minimum-time-to-finish-all-jobs",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 52.30282664558214,
      "frontEndId": "1724",
      "status": null,
      "difficulty": "Hard",
      "title": "Checking Existence of Edge Length Limited Paths II",
      "titleSlug": "checking-existence-of-edge-length-limited-paths-ii",
      "topicTags": ["Union Find", "Graph", "Minimum Spanning Tree"]
   },
   {
      "acRate": 78.57376143101196,
      "frontEndId": "1725",
      "status": null,
      "difficulty": "Easy",
      "title": "Number Of Rectangles That Can Form The Largest Square",
      "titleSlug": "number-of-rectangles-that-can-form-the-largest-square",
      "topicTags": ["Array"]
   },
   {
      "acRate": 60.86316703657242,
      "frontEndId": "1726",
      "status": null,
      "difficulty": "Medium",
      "title": "Tuple with Same Product",
      "titleSlug": "tuple-with-same-product",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 61.89181946943306,
      "frontEndId": "1727",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Submatrix With Rearrangements",
      "titleSlug": "largest-submatrix-with-rearrangements",
      "topicTags": ["Array", "Greedy", "Sorting", "Matrix"]
   },
   {
      "acRate": 39.26550196850393,
      "frontEndId": "1728",
      "status": null,
      "difficulty": "Hard",
      "title": "Cat and Mouse II",
      "titleSlug": "cat-and-mouse-ii",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Graph",
         "Topological Sort",
         "Memoization",
         "Matrix",
         "Game Theory"
      ]
   },
   {
      "acRate": 69.09455002355898,
      "frontEndId": "1729",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Followers Count",
      "titleSlug": "find-followers-count",
      "topicTags": ["Database"]
   },
   {
      "acRate": 54.3543372763118,
      "frontEndId": "1730",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest Path to Get Food",
      "titleSlug": "shortest-path-to-get-food",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 44.83415672986558,
      "frontEndId": "1731",
      "status": null,
      "difficulty": "Easy",
      "title": "The Number of Employees Which Report to Each Employee",
      "titleSlug": "the-number-of-employees-which-report-to-each-employee",
      "topicTags": ["Database"]
   },
   {
      "acRate": 82.46316518786456,
      "frontEndId": "1732",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find the Highest Altitude",
      "titleSlug": "find-the-highest-altitude",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 41.85348278622899,
      "frontEndId": "1733",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of People to Teach",
      "titleSlug": "minimum-number-of-people-to-teach",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 63.8140890079421,
      "frontEndId": "1734",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Decode XORed Permutation",
      "titleSlug": "decode-xored-permutation",
      "topicTags": ["Array", "Bit Manipulation"]
   },
   {
      "acRate": 50.60656869513759,
      "frontEndId": "1735",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Ways to Make Array With Product",
      "titleSlug": "count-ways-to-make-array-with-product",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Combinatorics",
         "Number Theory"
      ]
   },
   {
      "acRate": 42.379891823098944,
      "frontEndId": "1736",
      "status": null,
      "difficulty": "Easy",
      "title": "Latest Time by Replacing Hidden Digits",
      "titleSlug": "latest-time-by-replacing-hidden-digits",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 35.76877338515532,
      "frontEndId": "1737",
      "status": null,
      "difficulty": "Medium",
      "title": "Change Minimum Characters to Satisfy One of Three Conditions",
      "titleSlug": "change-minimum-characters-to-satisfy-one-of-three-conditions",
      "topicTags": ["Hash Table", "String", "Counting", "Prefix Sum"]
   },
   {
      "acRate": 61.326118019031405,
      "frontEndId": "1738",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Kth Largest XOR Coordinate Value",
      "titleSlug": "find-kth-largest-xor-coordinate-value",
      "topicTags": [
         "Array",
         "Divide and Conquer",
         "Bit Manipulation",
         "Heap (Priority Queue)",
         "Matrix",
         "Prefix Sum",
         "Quickselect"
      ]
   },
   {
      "acRate": 52.2337870296237,
      "frontEndId": "1739",
      "status": null,
      "difficulty": "Hard",
      "title": "Building Boxes",
      "titleSlug": "building-boxes",
      "topicTags": ["Math", "Binary Search", "Greedy"]
   },
   {
      "acRate": 69.74250416435314,
      "frontEndId": "1740",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Distance in a Binary Tree",
      "titleSlug": "find-distance-in-a-binary-tree",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 87.49627049213376,
      "frontEndId": "1741",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Total Time Spent by Each Employee",
      "titleSlug": "find-total-time-spent-by-each-employee",
      "topicTags": ["Database"]
   },
   {
      "acRate": 73.40251790697376,
      "frontEndId": "1742",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Number of Balls in a Box",
      "titleSlug": "maximum-number-of-balls-in-a-box",
      "topicTags": ["Hash Table", "Math", "Counting"]
   },
   {
      "acRate": 69.05874380283197,
      "frontEndId": "1743",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Restore the Array From Adjacent Pairs",
      "titleSlug": "restore-the-array-from-adjacent-pairs",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 33.54635898853116,
      "frontEndId": "1744",
      "status": null,
      "difficulty": "Medium",
      "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
      "titleSlug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 44.40546824887748,
      "frontEndId": "1745",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Palindrome Partitioning IV",
      "titleSlug": "palindrome-partitioning-iv",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 62.25843668877993,
      "frontEndId": "1746",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Subarray Sum After One Operation",
      "titleSlug": "maximum-subarray-sum-after-one-operation",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 65.95297911432749,
      "frontEndId": "1747",
      "status": null,
      "difficulty": "Medium",
      "title": "Leetflex Banned Accounts",
      "titleSlug": "leetflex-banned-accounts",
      "topicTags": ["Database"]
   },
   {
      "acRate": 76.70881385242497,
      "frontEndId": "1748",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of Unique Elements",
      "titleSlug": "sum-of-unique-elements",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 59.08935471736826,
      "frontEndId": "1749",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Absolute Sum of Any Subarray",
      "titleSlug": "maximum-absolute-sum-of-any-subarray",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 44.518795099848965,
      "frontEndId": "1750",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Length of String After Deleting Similar Ends",
      "titleSlug": "minimum-length-of-string-after-deleting-similar-ends",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 62.91409878729826,
      "frontEndId": "1751",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Events That Can Be Attended II",
      "titleSlug": "maximum-number-of-events-that-can-be-attended-ii",
      "topicTags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 50.68497100451601,
      "frontEndId": "1752",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if Array Is Sorted and Rotated",
      "titleSlug": "check-if-array-is-sorted-and-rotated",
      "topicTags": ["Array"]
   },
   {
      "acRate": 67.49363142085852,
      "frontEndId": "1753",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Score From Removing Stones",
      "titleSlug": "maximum-score-from-removing-stones",
      "topicTags": ["Math", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 46.84069455774385,
      "frontEndId": "1754",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Merge Of Two Strings",
      "titleSlug": "largest-merge-of-two-strings",
      "topicTags": ["Two Pointers", "String", "Greedy"]
   },
   {
      "acRate": 37.998228520814884,
      "frontEndId": "1755",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Closest Subsequence Sum",
      "titleSlug": "closest-subsequence-sum",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 76.90393230462917,
      "frontEndId": "1756",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Most Recently Used Queue",
      "titleSlug": "design-most-recently-used-queue",
      "topicTags": [
         "Array",
         "Hash Table",
         "Stack",
         "Design",
         "Binary Indexed Tree",
         "Ordered Set"
      ]
   },
   {
      "acRate": 89.69944494192015,
      "frontEndId": "1757",
      "status": null,
      "difficulty": "Easy",
      "title": "Recyclable and Low Fat Products",
      "titleSlug": "recyclable-and-low-fat-products",
      "topicTags": ["Database"]
   },
   {
      "acRate": 58.05237166199244,
      "frontEndId": "1758",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Changes To Make Alternating Binary String",
      "titleSlug": "minimum-changes-to-make-alternating-binary-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 49.03113087674714,
      "frontEndId": "1759",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Number of Homogenous Substrings",
      "titleSlug": "count-number-of-homogenous-substrings",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 60.42823019950853,
      "frontEndId": "1760",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Limit of Balls in a Bag",
      "titleSlug": "minimum-limit-of-balls-in-a-bag",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 41.93991245523279,
      "frontEndId": "1761",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Degree of a Connected Trio in a Graph",
      "titleSlug": "minimum-degree-of-a-connected-trio-in-a-graph",
      "topicTags": ["Graph"]
   },
   {
      "acRate": 79.0784526735786,
      "frontEndId": "1762",
      "status": null,
      "difficulty": "Medium",
      "title": "Buildings With an Ocean View",
      "titleSlug": "buildings-with-an-ocean-view",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 60.59382714365598,
      "frontEndId": "1763",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Longest Nice Substring",
      "titleSlug": "longest-nice-substring",
      "topicTags": [
         "Hash Table",
         "String",
         "Divide and Conquer",
         "Bit Manipulation",
         "Sliding Window"
      ]
   },
   {
      "acRate": 53.22879653947166,
      "frontEndId": "1764",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Form Array by Concatenating Subarrays of Another Array",
      "titleSlug": "form-array-by-concatenating-subarrays-of-another-array",
      "topicTags": ["Array", "Greedy", "String Matching"]
   },
   {
      "acRate": 61.03638193083726,
      "frontEndId": "1765",
      "status": null,
      "difficulty": "Medium",
      "title": "Map of Highest Peak",
      "titleSlug": "map-of-highest-peak",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 39.78105709876543,
      "frontEndId": "1766",
      "status": null,
      "difficulty": "Hard",
      "title": "Tree of Coprimes",
      "titleSlug": "tree-of-coprimes",
      "topicTags": [
         "Math",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 78.5616383133113,
      "frontEndId": "1767",
      "status": null,
      "difficulty": "Hard",
      "title": "Find the Subtasks That Did Not Execute",
      "titleSlug": "find-the-subtasks-that-did-not-execute",
      "topicTags": ["Database"]
   },
   {
      "acRate": 79.1510676433219,
      "frontEndId": "1768",
      "status": null,
      "difficulty": "Easy",
      "title": "Merge Strings Alternately",
      "titleSlug": "merge-strings-alternately",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 85.48915361647676,
      "frontEndId": "1769",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Operations to Move All Balls to Each Box",
      "titleSlug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 38.803114708216555,
      "frontEndId": "1770",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Maximum Score from Performing Multiplication Operations",
      "titleSlug": "maximum-score-from-performing-multiplication-operations",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 35.46472603949553,
      "frontEndId": "1771",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximize Palindrome Length From Subsequences",
      "titleSlug": "maximize-palindrome-length-from-subsequences",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 65.2293358815098,
      "frontEndId": "1772",
      "status": null,
      "difficulty": "Medium",
      "title": "Sort Features by Popularity",
      "titleSlug": "sort-features-by-popularity",
      "topicTags": ["Array", "Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 84.53011296376167,
      "frontEndId": "1773",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Items Matching a Rule",
      "titleSlug": "count-items-matching-a-rule",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 47.41361473205048,
      "frontEndId": "1774",
      "status": null,
      "difficulty": "Medium",
      "title": "Closest Dessert Cost",
      "titleSlug": "closest-dessert-cost",
      "topicTags": ["Array", "Dynamic Programming", "Backtracking"]
   },
   {
      "acRate": 53.29537681567618,
      "frontEndId": "1775",
      "status": null,
      "difficulty": "Medium",
      "title": "Equal Sum Arrays With Minimum Number of Operations",
      "titleSlug": "equal-sum-arrays-with-minimum-number-of-operations",
      "topicTags": ["Array", "Hash Table", "Greedy", "Counting"]
   },
   {
      "acRate": 54.109114426941375,
      "frontEndId": "1776",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Car Fleet II",
      "titleSlug": "car-fleet-ii",
      "topicTags": [
         "Array",
         "Math",
         "Stack",
         "Heap (Priority Queue)",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 82.5898162537709,
      "frontEndId": "1777",
      "status": null,
      "difficulty": "Easy",
      "title": "Product's Price for Each Store",
      "titleSlug": "products-price-for-each-store",
      "topicTags": ["Database"]
   },
   {
      "acRate": 39.098282442748086,
      "frontEndId": "1778",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest Path in a Hidden Grid",
      "titleSlug": "shortest-path-in-a-hidden-grid",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Interactive"
      ]
   },
   {
      "acRate": 67.63613781325604,
      "frontEndId": "1779",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Nearest Point That Has the Same X or Y Coordinate",
      "titleSlug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
      "topicTags": ["Array"]
   },
   {
      "acRate": 66.71925158213335,
      "frontEndId": "1780",
      "status": null,
      "difficulty": "Medium",
      "title": "Check if Number is a Sum of Powers of Three",
      "titleSlug": "check-if-number-is-a-sum-of-powers-of-three",
      "topicTags": ["Math"]
   },
   {
      "acRate": 63.648943634520926,
      "frontEndId": "1781",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum of Beauty of All Substrings",
      "titleSlug": "sum-of-beauty-of-all-substrings",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 39.669367909238254,
      "frontEndId": "1782",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Pairs Of Nodes",
      "titleSlug": "count-pairs-of-nodes",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Graph",
         "Sorting"
      ]
   },
   {
      "acRate": 84.94945410432673,
      "frontEndId": "1783",
      "status": null,
      "difficulty": "Medium",
      "title": "Grand Slam Titles",
      "titleSlug": "grand-slam-titles",
      "topicTags": ["Database"]
   },
   {
      "acRate": 39.49142091722833,
      "frontEndId": "1784",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if Binary String Has at Most One Segment of Ones",
      "titleSlug": "check-if-binary-string-has-at-most-one-segment-of-ones",
      "topicTags": ["String"]
   },
   {
      "acRate": 42.882530655766836,
      "frontEndId": "1785",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Elements to Add to Form a Given Sum",
      "titleSlug": "minimum-elements-to-add-to-form-a-given-sum",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 38.96492172847301,
      "frontEndId": "1786",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Restricted Paths From First to Last Node",
      "titleSlug": "number-of-restricted-paths-from-first-to-last-node",
      "topicTags": [
         "Dynamic Programming",
         "Graph",
         "Topological Sort",
         "Heap (Priority Queue)",
         "Shortest Path"
      ]
   },
   {
      "acRate": 39.55537258130918,
      "frontEndId": "1787",
      "status": null,
      "difficulty": "Hard",
      "title": "Make the XOR of All Segments Equal to Zero",
      "titleSlug": "make-the-xor-of-all-segments-equal-to-zero",
      "topicTags": ["Array", "Dynamic Programming", "Bit Manipulation"]
   },
   {
      "acRate": 67.06161137440758,
      "frontEndId": "1788",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximize the Beauty of the Garden",
      "titleSlug": "maximize-the-beauty-of-the-garden",
      "topicTags": ["Array", "Greedy", "Prefix Sum"]
   },
   {
      "acRate": 65.71517307583714,
      "frontEndId": "1789",
      "status": null,
      "difficulty": "Easy",
      "title": "Primary Department for Each Employee",
      "titleSlug": "primary-department-for-each-employee",
      "topicTags": ["Database"]
   },
   {
      "acRate": 45.35544816956431,
      "frontEndId": "1790",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if One String Swap Can Make Strings Equal",
      "titleSlug": "check-if-one-string-swap-can-make-strings-equal",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 83.48938777019069,
      "frontEndId": "1791",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find Center of Star Graph",
      "titleSlug": "find-center-of-star-graph",
      "topicTags": ["Graph"]
   },
   {
      "acRate": 52.950772226168866,
      "frontEndId": "1792",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Average Pass Ratio",
      "titleSlug": "maximum-average-pass-ratio",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 53.98268294437916,
      "frontEndId": "1793",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Score of a Good Subarray",
      "titleSlug": "maximum-score-of-a-good-subarray",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Stack",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 64.75225225225225,
      "frontEndId": "1794",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Pairs of Equal Substrings With Minimum Difference",
      "titleSlug": "count-pairs-of-equal-substrings-with-minimum-difference",
      "topicTags": ["Hash Table", "String", "Greedy"]
   },
   {
      "acRate": 85.55992141453831,
      "frontEndId": "1795",
      "status": null,
      "difficulty": "Easy",
      "title": "Rearrange Products Table",
      "titleSlug": "rearrange-products-table",
      "topicTags": ["Database"]
   },
   {
      "acRate": 49.68999680409076,
      "frontEndId": "1796",
      "status": null,
      "difficulty": "Easy",
      "title": "Second Largest Digit in a String",
      "titleSlug": "second-largest-digit-in-a-string",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 56.8281812467859,
      "frontEndId": "1797",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Authentication Manager",
      "titleSlug": "design-authentication-manager",
      "topicTags": ["Hash Table", "Design"]
   },
   {
      "acRate": 57.02251493337418,
      "frontEndId": "1798",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Consecutive Values You Can Make",
      "titleSlug": "maximum-number-of-consecutive-values-you-can-make",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 58.23514922615871,
      "frontEndId": "1799",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximize Score After N Operations",
      "titleSlug": "maximize-score-after-n-operations",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Number Theory",
         "Bitmask"
      ]
   },
   {
      "acRate": 62.541150650572185,
      "frontEndId": "1800",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Ascending Subarray Sum",
      "titleSlug": "maximum-ascending-subarray-sum",
      "topicTags": ["Array"]
   },
   {
      "acRate": 48.97528223732301,
      "frontEndId": "1801",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Orders in the Backlog",
      "titleSlug": "number-of-orders-in-the-backlog",
      "topicTags": ["Array", "Heap (Priority Queue)", "Simulation"]
   },
   {
      "acRate": 39.72409188193422,
      "frontEndId": "1802",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Value at a Given Index in a Bounded Array",
      "titleSlug": "maximum-value-at-a-given-index-in-a-bounded-array",
      "topicTags": ["Binary Search", "Greedy"]
   },
   {
      "acRate": 47.51956615517348,
      "frontEndId": "1803",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Pairs With XOR in a Range",
      "titleSlug": "count-pairs-with-xor-in-a-range",
      "topicTags": ["Array", "Bit Manipulation", "Trie"]
   },
   {
      "acRate": 61.56254773178556,
      "frontEndId": "1804",
      "status": null,
      "difficulty": "Medium",
      "title": "Implement Trie II (Prefix Tree)",
      "titleSlug": "implement-trie-ii-prefix-tree",
      "topicTags": ["Hash Table", "String", "Design", "Trie"]
   },
   {
      "acRate": 37.017055655296225,
      "frontEndId": "1805",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Different Integers in a String",
      "titleSlug": "number-of-different-integers-in-a-string",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 72.22105924220223,
      "frontEndId": "1806",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Operations to Reinitialize a Permutation",
      "titleSlug": "minimum-number-of-operations-to-reinitialize-a-permutation",
      "topicTags": ["Array", "Math", "Simulation"]
   },
   {
      "acRate": 66.68464801510433,
      "frontEndId": "1807",
      "status": null,
      "difficulty": "Medium",
      "title": "Evaluate the Bracket Pairs of a String",
      "titleSlug": "evaluate-the-bracket-pairs-of-a-string",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 32.01284242141785,
      "frontEndId": "1808",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximize Number of Nice Divisors",
      "titleSlug": "maximize-number-of-nice-divisors",
      "topicTags": ["Math", "Recursion"]
   },
   {
      "acRate": 58.43325673699603,
      "frontEndId": "1809",
      "status": null,
      "difficulty": "Easy",
      "title": "Ad-Free Sessions",
      "titleSlug": "ad-free-sessions",
      "topicTags": ["Database"]
   },
   {
      "acRate": 54.85979337971748,
      "frontEndId": "1810",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Path Cost in a Hidden Grid",
      "titleSlug": "minimum-path-cost-in-a-hidden-grid",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Heap (Priority Queue)",
         "Interactive"
      ]
   },
   {
      "acRate": 62.26650638061771,
      "frontEndId": "1811",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Interview Candidates",
      "titleSlug": "find-interview-candidates",
      "topicTags": ["Database"]
   },
   {
      "acRate": 78.00107888484627,
      "frontEndId": "1812",
      "status": null,
      "difficulty": "Easy",
      "title": "Determine Color of a Chessboard Square",
      "titleSlug": "determine-color-of-a-chessboard-square",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 33.287445555279724,
      "frontEndId": "1813",
      "status": null,
      "difficulty": "Medium",
      "title": "Sentence Similarity III",
      "titleSlug": "sentence-similarity-iii",
      "topicTags": ["Array", "Two Pointers", "String"]
   },
   {
      "acRate": 41.900313843316326,
      "frontEndId": "1814",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Nice Pairs in an Array",
      "titleSlug": "count-nice-pairs-in-an-array",
      "topicTags": ["Array", "Hash Table", "Math", "Counting"]
   },
   {
      "acRate": 40.04697986577182,
      "frontEndId": "1815",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Groups Getting Fresh Donuts",
      "titleSlug": "maximum-number-of-groups-getting-fresh-donuts",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Memoization",
         "Bitmask"
      ]
   },
   {
      "acRate": 83.98174394715627,
      "frontEndId": "1816",
      "status": null,
      "difficulty": "Easy",
      "title": "Truncate Sentence",
      "titleSlug": "truncate-sentence",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 80.32481734841082,
      "frontEndId": "1817",
      "status": null,
      "difficulty": "Medium",
      "title": "Finding the Users Active Minutes",
      "titleSlug": "finding-the-users-active-minutes",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 30.551743434639523,
      "frontEndId": "1818",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Absolute Sum Difference",
      "titleSlug": "minimum-absolute-sum-difference",
      "topicTags": ["Array", "Binary Search", "Sorting", "Ordered Set"]
   },
   {
      "acRate": 39.84940348132212,
      "frontEndId": "1819",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Different Subsequences GCDs",
      "titleSlug": "number-of-different-subsequences-gcds",
      "topicTags": ["Array", "Math", "Counting", "Number Theory"]
   },
   {
      "acRate": 49.29492170602993,
      "frontEndId": "1820",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Accepted Invitations",
      "titleSlug": "maximum-number-of-accepted-invitations",
      "topicTags": ["Array", "Backtracking", "Matrix"]
   },
   {
      "acRate": 88.55509254772748,
      "frontEndId": "1821",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Customers With Positive Revenue this Year",
      "titleSlug": "find-customers-with-positive-revenue-this-year",
      "topicTags": ["Database"]
   },
   {
      "acRate": 65.29736410872594,
      "frontEndId": "1822",
      "status": null,
      "difficulty": "Easy",
      "title": "Sign of the Product of an Array",
      "titleSlug": "sign-of-the-product-of-an-array",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 78.11203468423848,
      "frontEndId": "1823",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Winner of the Circular Game",
      "titleSlug": "find-the-winner-of-the-circular-game",
      "topicTags": ["Array", "Math", "Recursion", "Queue", "Simulation"]
   },
   {
      "acRate": 49.788066514509296,
      "frontEndId": "1824",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Sideway Jumps",
      "titleSlug": "minimum-sideway-jumps",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 35.846836245134426,
      "frontEndId": "1825",
      "status": null,
      "difficulty": "Hard",
      "title": "Finding MK Average",
      "titleSlug": "finding-mk-average",
      "topicTags": [
         "Design",
         "Queue",
         "Heap (Priority Queue)",
         "Data Stream",
         "Ordered Set"
      ]
   },
   {
      "acRate": 49.69254419677171,
      "frontEndId": "1826",
      "status": null,
      "difficulty": "Easy",
      "title": "Faulty Sensor",
      "titleSlug": "faulty-sensor",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 78.73062980520257,
      "frontEndId": "1827",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Minimum Operations to Make the Array Increasing",
      "titleSlug": "minimum-operations-to-make-the-array-increasing",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 86.16162893638548,
      "frontEndId": "1828",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Queries on Number of Points Inside a Circle",
      "titleSlug": "queries-on-number-of-points-inside-a-circle",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 77.06567473626441,
      "frontEndId": "1829",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum XOR for Each Query",
      "titleSlug": "maximum-xor-for-each-query",
      "topicTags": ["Array", "Bit Manipulation", "Prefix Sum"]
   },
   {
      "acRate": 49.56003406187908,
      "frontEndId": "1830",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Number of Operations to Make String Sorted",
      "titleSlug": "minimum-number-of-operations-to-make-string-sorted",
      "topicTags": ["Math", "String", "Combinatorics"]
   },
   {
      "acRate": 81.50276482706278,
      "frontEndId": "1831",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Transaction Each Day",
      "titleSlug": "maximum-transaction-each-day",
      "topicTags": ["Database"]
   },
   {
      "acRate": 83.0980229030048,
      "frontEndId": "1832",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if the Sentence Is Pangram",
      "titleSlug": "check-if-the-sentence-is-pangram",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 73.78956749882336,
      "frontEndId": "1833",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Ice Cream Bars",
      "titleSlug": "maximum-ice-cream-bars",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 45.586793464349014,
      "frontEndId": "1834",
      "status": null,
      "difficulty": "Medium",
      "title": "Single-Threaded CPU",
      "titleSlug": "single-threaded-cpu",
      "topicTags": ["Array", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 60.909352932699235,
      "frontEndId": "1835",
      "status": null,
      "difficulty": "Hard",
      "title": "Find XOR Sum of All Pairs Bitwise AND",
      "titleSlug": "find-xor-sum-of-all-pairs-bitwise-and",
      "topicTags": ["Array", "Math", "Bit Manipulation"]
   },
   {
      "acRate": 71.0934449093445,
      "frontEndId": "1836",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove Duplicates From an Unsorted Linked List",
      "titleSlug": "remove-duplicates-from-an-unsorted-linked-list",
      "topicTags": ["Hash Table", "Linked List"]
   },
   {
      "acRate": 77.15274845900531,
      "frontEndId": "1837",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of Digits in Base K",
      "titleSlug": "sum-of-digits-in-base-k",
      "topicTags": ["Math"]
   },
   {
      "acRate": 40.01115993583037,
      "frontEndId": "1838",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Frequency of the Most Frequent Element",
      "titleSlug": "frequency-of-the-most-frequent-element",
      "topicTags": [
         "Array",
         "Binary Search",
         "Greedy",
         "Sliding Window",
         "Sorting",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 49.02841397079874,
      "frontEndId": "1839",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Substring Of All Vowels in Order",
      "titleSlug": "longest-substring-of-all-vowels-in-order",
      "topicTags": ["String", "Sliding Window"]
   },
   {
      "acRate": 36.02864796894647,
      "frontEndId": "1840",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Building Height",
      "titleSlug": "maximum-building-height",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 53.91785220532489,
      "frontEndId": "1841",
      "status": null,
      "difficulty": "Medium",
      "title": "League Statistics",
      "titleSlug": "league-statistics",
      "topicTags": ["Database"]
   },
   {
      "acRate": 53.01985801008334,
      "frontEndId": "1842",
      "status": null,
      "difficulty": "Hard",
      "title": "Next Palindrome Using Same Digits",
      "titleSlug": "next-palindrome-using-same-digits",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 45.91298456177709,
      "frontEndId": "1843",
      "status": null,
      "difficulty": "Medium",
      "title": "Suspicious Bank Accounts",
      "titleSlug": "suspicious-bank-accounts",
      "topicTags": ["Database"]
   },
   {
      "acRate": 80.55275255073438,
      "frontEndId": "1844",
      "status": null,
      "difficulty": "Easy",
      "title": "Replace All Digits with Characters",
      "titleSlug": "replace-all-digits-with-characters",
      "topicTags": ["String"]
   },
   {
      "acRate": 67.11597015722654,
      "frontEndId": "1845",
      "status": null,
      "difficulty": "Medium",
      "title": "Seat Reservation Manager",
      "titleSlug": "seat-reservation-manager",
      "topicTags": ["Design", "Heap (Priority Queue)"]
   },
   {
      "acRate": 59.23556294142086,
      "frontEndId": "1846",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Element After Decreasing and Rearranging",
      "titleSlug": "maximum-element-after-decreasing-and-rearranging",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 36.50720988784619,
      "frontEndId": "1847",
      "status": null,
      "difficulty": "Hard",
      "title": "Closest Room",
      "titleSlug": "closest-room",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 56.00659871560714,
      "frontEndId": "1848",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Distance to the Target Element",
      "titleSlug": "minimum-distance-to-the-target-element",
      "topicTags": ["Array"]
   },
   {
      "acRate": 34.246278922394474,
      "frontEndId": "1849",
      "status": null,
      "difficulty": "Medium",
      "title": "Splitting a String Into Descending Consecutive Values",
      "titleSlug": "splitting-a-string-into-descending-consecutive-values",
      "topicTags": ["String", "Backtracking"]
   },
   {
      "acRate": 71.24118528261903,
      "frontEndId": "1850",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
      "titleSlug": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
      "topicTags": ["Two Pointers", "String", "Greedy"]
   },
   {
      "acRate": 49.063693738581634,
      "frontEndId": "1851",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Interval to Include Each Query",
      "titleSlug": "minimum-interval-to-include-each-query",
      "topicTags": [
         "Array",
         "Binary Search",
         "Line Sweep",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 70.95095759991143,
      "frontEndId": "1852",
      "status": null,
      "difficulty": "Medium",
      "title": "Distinct Numbers in Each Subarray",
      "titleSlug": "distinct-numbers-in-each-subarray",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 86.1884690651814,
      "frontEndId": "1853",
      "status": null,
      "difficulty": "Easy",
      "title": "Convert Date Format",
      "titleSlug": "convert-date-format",
      "topicTags": ["Database"]
   },
   {
      "acRate": 60.2008547008547,
      "frontEndId": "1854",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Population Year",
      "titleSlug": "maximum-population-year",
      "topicTags": ["Array", "Counting"]
   },
   {
      "acRate": 53.39089426697793,
      "frontEndId": "1855",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Distance Between a Pair of Values",
      "titleSlug": "maximum-distance-between-a-pair-of-values",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Greedy"]
   },
   {
      "acRate": 37.989266434788085,
      "frontEndId": "1856",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Subarray Min-Product",
      "titleSlug": "maximum-subarray-min-product",
      "topicTags": ["Array", "Stack", "Monotonic Stack", "Prefix Sum"]
   },
   {
      "acRate": 50.9414155096512,
      "frontEndId": "1857",
      "status": null,
      "difficulty": "Hard",
      "title": "Largest Color Value in a Directed Graph",
      "titleSlug": "largest-color-value-in-a-directed-graph",
      "topicTags": [
         "Hash Table",
         "Dynamic Programming",
         "Graph",
         "Topological Sort",
         "Memoization",
         "Counting"
      ]
   },
   {
      "acRate": 67.53403933434191,
      "frontEndId": "1858",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Word With All Prefixes",
      "titleSlug": "longest-word-with-all-prefixes",
      "topicTags": ["Depth-First Search", "Trie"]
   },
   {
      "acRate": 83.15729831930186,
      "frontEndId": "1859",
      "status": null,
      "difficulty": "Easy",
      "title": "Sorting the Sentence",
      "titleSlug": "sorting-the-sentence",
      "topicTags": ["String", "Sorting"]
   },
   {
      "acRate": 71.87789084181314,
      "frontEndId": "1860",
      "status": null,
      "difficulty": "Medium",
      "title": "Incremental Memory Leak",
      "titleSlug": "incremental-memory-leak",
      "topicTags": ["Simulation"]
   },
   {
      "acRate": 66.40601759381242,
      "frontEndId": "1861",
      "status": null,
      "difficulty": "Medium",
      "title": "Rotating the Box",
      "titleSlug": "rotating-the-box",
      "topicTags": ["Array", "Two Pointers", "Matrix"]
   },
   {
      "acRate": 28.60909464456924,
      "frontEndId": "1862",
      "status": null,
      "difficulty": "Hard",
      "title": "Sum of Floored Pairs",
      "titleSlug": "sum-of-floored-pairs",
      "topicTags": ["Array", "Math", "Binary Search", "Prefix Sum"]
   },
   {
      "acRate": 80.74405136598263,
      "frontEndId": "1863",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of All Subset XOR Totals",
      "titleSlug": "sum-of-all-subset-xor-totals",
      "topicTags": [
         "Array",
         "Math",
         "Backtracking",
         "Bit Manipulation",
         "Combinatorics"
      ]
   },
   {
      "acRate": 42.846309849219644,
      "frontEndId": "1864",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Swaps to Make the Binary String Alternating",
      "titleSlug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 50.47336346668466,
      "frontEndId": "1865",
      "status": null,
      "difficulty": "Medium",
      "title": "Finding Pairs With a Certain Sum",
      "titleSlug": "finding-pairs-with-a-certain-sum",
      "topicTags": ["Array", "Hash Table", "Design"]
   },
   {
      "acRate": 56.64916296396032,
      "frontEndId": "1866",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
      "titleSlug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
      "topicTags": ["Math", "Dynamic Programming", "Combinatorics"]
   },
   {
      "acRate": 71.57770336813078,
      "frontEndId": "1867",
      "status": null,
      "difficulty": "Medium",
      "title": "Orders With Maximum Quantity Above Average",
      "titleSlug": "orders-with-maximum-quantity-above-average",
      "topicTags": ["Database"]
   },
   {
      "acRate": 57.61461257123416,
      "frontEndId": "1868",
      "status": null,
      "difficulty": "Medium",
      "title": "Product of Two Run-Length Encoded Arrays",
      "titleSlug": "product-of-two-run-length-encoded-arrays",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 60.422178682264786,
      "frontEndId": "1869",
      "status": null,
      "difficulty": "Easy",
      "title": "Longer Contiguous Segments of Ones than Zeros",
      "titleSlug": "longer-contiguous-segments-of-ones-than-zeros",
      "topicTags": ["String"]
   },
   {
      "acRate": 46.92446765769385,
      "frontEndId": "1870",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Speed to Arrive on Time",
      "titleSlug": "minimum-speed-to-arrive-on-time",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 24.817101839952354,
      "frontEndId": "1871",
      "status": null,
      "difficulty": "Medium",
      "title": "Jump Game VII",
      "titleSlug": "jump-game-vii",
      "topicTags": [
         "String",
         "Dynamic Programming",
         "Sliding Window",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 52.522181547434386,
      "frontEndId": "1872",
      "status": null,
      "difficulty": "Hard",
      "title": "Stone Game VIII",
      "titleSlug": "stone-game-viii",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Prefix Sum",
         "Game Theory"
      ]
   },
   {
      "acRate": 58.01717154445794,
      "frontEndId": "1873",
      "status": null,
      "difficulty": "Easy",
      "title": "Calculate Special Bonus",
      "titleSlug": "calculate-special-bonus",
      "topicTags": ["Database"]
   },
   {
      "acRate": 89.47689802564625,
      "frontEndId": "1874",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimize Product Sum of Two Arrays",
      "titleSlug": "minimize-product-sum-of-two-arrays",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 69.73320431296655,
      "frontEndId": "1875",
      "status": null,
      "difficulty": "Medium",
      "title": "Group Employees of the Same Salary",
      "titleSlug": "group-employees-of-the-same-salary",
      "topicTags": ["Database"]
   },
   {
      "acRate": 72.2321327763351,
      "frontEndId": "1876",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Substrings of Size Three with Distinct Characters",
      "titleSlug": "substrings-of-size-three-with-distinct-characters",
      "topicTags": ["Hash Table", "String", "Sliding Window", "Counting"]
   },
   {
      "acRate": 79.70026190707149,
      "frontEndId": "1877",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimize Maximum Pair Sum in Array",
      "titleSlug": "minimize-maximum-pair-sum-in-array",
      "topicTags": ["Array", "Two Pointers", "Greedy", "Sorting"]
   },
   {
      "acRate": 47.2918182763281,
      "frontEndId": "1878",
      "status": null,
      "difficulty": "Medium",
      "title": "Get Biggest Three Rhombus Sums in a Grid",
      "titleSlug": "get-biggest-three-rhombus-sums-in-a-grid",
      "topicTags": [
         "Array",
         "Math",
         "Sorting",
         "Heap (Priority Queue)",
         "Matrix",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 46.37810833985758,
      "frontEndId": "1879",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum XOR Sum of Two Arrays",
      "titleSlug": "minimum-xor-sum-of-two-arrays",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 73.71755490708033,
      "frontEndId": "1880",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if Word Equals Summation of Two Words",
      "titleSlug": "check-if-word-equals-summation-of-two-words",
      "topicTags": ["String"]
   },
   {
      "acRate": 37.45711045989368,
      "frontEndId": "1881",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Value after Insertion",
      "titleSlug": "maximum-value-after-insertion",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 39.652766147490645,
      "frontEndId": "1882",
      "status": null,
      "difficulty": "Medium",
      "title": "Process Tasks Using Servers",
      "titleSlug": "process-tasks-using-servers",
      "topicTags": ["Array", "Heap (Priority Queue)"]
   },
   {
      "acRate": 37.45331887724371,
      "frontEndId": "1883",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Skips to Arrive at Meeting On Time",
      "titleSlug": "minimum-skips-to-arrive-at-meeting-on-time",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 72.08622771255096,
      "frontEndId": "1884",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Egg Drop With 2 Eggs and N Floors",
      "titleSlug": "egg-drop-with-2-eggs-and-n-floors",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 59.33849890135306,
      "frontEndId": "1885",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Pairs in Two Arrays",
      "titleSlug": "count-pairs-in-two-arrays",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 56.26614987080103,
      "frontEndId": "1886",
      "status": null,
      "difficulty": "Easy",
      "title": "Determine Whether Matrix Can Be Obtained By Rotation",
      "titleSlug": "determine-whether-matrix-can-be-obtained-by-rotation",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 62.671734998642414,
      "frontEndId": "1887",
      "status": null,
      "difficulty": "Medium",
      "title": "Reduction Operations to Make the Array Elements Equal",
      "titleSlug": "reduction-operations-to-make-the-array-elements-equal",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 39.490445859872615,
      "frontEndId": "1888",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Number of Flips to Make the Binary String Alternating",
      "titleSlug": "minimum-number-of-flips-to-make-the-binary-string-alternating",
      "topicTags": ["String", "Dynamic Programming", "Greedy", "Sliding Window"]
   },
   {
      "acRate": 31.462203715566943,
      "frontEndId": "1889",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Space Wasted From Packaging",
      "titleSlug": "minimum-space-wasted-from-packaging",
      "topicTags": ["Array", "Binary Search", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 77.34891757739845,
      "frontEndId": "1890",
      "status": null,
      "difficulty": "Easy",
      "title": "The Latest Login in 2020",
      "titleSlug": "the-latest-login-in-2020",
      "topicTags": ["Database"]
   },
   {
      "acRate": 48.788296500511365,
      "frontEndId": "1891",
      "status": null,
      "difficulty": "Medium",
      "title": "Cutting Ribbons",
      "titleSlug": "cutting-ribbons",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 43.13002932992404,
      "frontEndId": "1892",
      "status": null,
      "difficulty": "Hard",
      "title": "Page Recommendations II",
      "titleSlug": "page-recommendations-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 49.87928402941584,
      "frontEndId": "1893",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if All the Integers in a Range Are Covered",
      "titleSlug": "check-if-all-the-integers-in-a-range-are-covered",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 44.887903078629286,
      "frontEndId": "1894",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Student that Will Replace the Chalk",
      "titleSlug": "find-the-student-that-will-replace-the-chalk",
      "topicTags": ["Array", "Binary Search", "Simulation", "Prefix Sum"]
   },
   {
      "acRate": 51.93733681462142,
      "frontEndId": "1895",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Magic Square",
      "titleSlug": "largest-magic-square",
      "topicTags": ["Array", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 53.87240356083086,
      "frontEndId": "1896",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Cost to Change the Final Value of Expression",
      "titleSlug": "minimum-cost-to-change-the-final-value-of-expression",
      "topicTags": ["Math", "String", "Dynamic Programming", "Stack"]
   },
   {
      "acRate": 59.038348946135834,
      "frontEndId": "1897",
      "status": null,
      "difficulty": "Easy",
      "title": "Redistribute Characters to Make All Strings Equal",
      "titleSlug": "redistribute-characters-to-make-all-strings-equal",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 42.35272805125081,
      "frontEndId": "1898",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Removable Characters",
      "titleSlug": "maximum-number-of-removable-characters",
      "topicTags": ["Array", "String", "Binary Search"]
   },
   {
      "acRate": 65.29359128637107,
      "frontEndId": "1899",
      "status": null,
      "difficulty": "Medium",
      "title": "Merge Triplets to Form Target Triplet",
      "titleSlug": "merge-triplets-to-form-target-triplet",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 50.56519983851433,
      "frontEndId": "1900",
      "status": null,
      "difficulty": "Hard",
      "title": "The Earliest and Latest Rounds Where Players Compete",
      "titleSlug": "the-earliest-and-latest-rounds-where-players-compete",
      "topicTags": ["Dynamic Programming", "Memoization"]
   },
   {
      "acRate": 50.59964707995647,
      "frontEndId": "1901",
      "status": null,
      "difficulty": "Medium",
      "title": "Find a Peak Element II",
      "titleSlug": "find-a-peak-element-ii",
      "topicTags": ["Array", "Binary Search", "Matrix"]
   },
   {
      "acRate": 44.72601256226987,
      "frontEndId": "1902",
      "status": null,
      "difficulty": "Medium",
      "title": "Depth of BST Given Insertion Order",
      "titleSlug": "depth-of-bst-given-insertion-order",
      "topicTags": ["Tree", "Binary Search Tree", "Binary Tree", "Ordered Set"]
   },
   {
      "acRate": 57.854727009180216,
      "frontEndId": "1903",
      "status": null,
      "difficulty": "Easy",
      "title": "Largest Odd Number in String",
      "titleSlug": "largest-odd-number-in-string",
      "topicTags": ["Math", "String", "Greedy"]
   },
   {
      "acRate": 44.28785013851634,
      "frontEndId": "1904",
      "status": null,
      "difficulty": "Medium",
      "title": "The Number of Full Rounds You Have Played",
      "titleSlug": "the-number-of-full-rounds-you-have-played",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 67.5033712024396,
      "frontEndId": "1905",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Sub Islands",
      "titleSlug": "count-sub-islands",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 44.001732351667386,
      "frontEndId": "1906",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Absolute Difference Queries",
      "titleSlug": "minimum-absolute-difference-queries",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 57.34003268963013,
      "frontEndId": "1907",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Salary Categories",
      "titleSlug": "count-salary-categories",
      "topicTags": ["Database"]
   },
   {
      "acRate": 63.75282592313489,
      "frontEndId": "1908",
      "status": null,
      "difficulty": "Medium",
      "title": "Game of Nim",
      "titleSlug": "game-of-nim",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Bit Manipulation",
         "Brainteaser",
         "Game Theory"
      ]
   },
   {
      "acRate": 26.674147791591608,
      "frontEndId": "1909",
      "status": null,
      "difficulty": "Easy",
      "title": "Remove One Element to Make the Array Strictly Increasing",
      "titleSlug": "remove-one-element-to-make-the-array-strictly-increasing",
      "topicTags": ["Array"]
   },
   {
      "acRate": 76.28584712828206,
      "frontEndId": "1910",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove All Occurrences of a Substring",
      "titleSlug": "remove-all-occurrences-of-a-substring",
      "topicTags": ["String"]
   },
   {
      "acRate": 59.220588818005304,
      "frontEndId": "1911",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Alternating Subsequence Sum",
      "titleSlug": "maximum-alternating-subsequence-sum",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 36.15976216635429,
      "frontEndId": "1912",
      "status": null,
      "difficulty": "Hard",
      "title": "Design Movie Rental System",
      "titleSlug": "design-movie-rental-system",
      "topicTags": [
         "Array",
         "Hash Table",
         "Design",
         "Heap (Priority Queue)",
         "Ordered Set"
      ]
   },
   {
      "acRate": 81.0252281266774,
      "frontEndId": "1913",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Product Difference Between Two Pairs",
      "titleSlug": "maximum-product-difference-between-two-pairs",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 48.71242823370483,
      "frontEndId": "1914",
      "status": null,
      "difficulty": "Medium",
      "title": "Cyclically Rotating a Grid",
      "titleSlug": "cyclically-rotating-a-grid",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 46.40431767817571,
      "frontEndId": "1915",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Wonderful Substrings",
      "titleSlug": "number-of-wonderful-substrings",
      "topicTags": ["Hash Table", "String", "Bit Manipulation", "Prefix Sum"]
   },
   {
      "acRate": 49.274684136640154,
      "frontEndId": "1916",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Ways to Build Rooms in an Ant Colony",
      "titleSlug": "count-ways-to-build-rooms-in-an-ant-colony",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Tree",
         "Graph",
         "Topological Sort",
         "Combinatorics"
      ]
   },
   {
      "acRate": 26.795026073004415,
      "frontEndId": "1917",
      "status": null,
      "difficulty": "Hard",
      "title": "Leetcodify Friends Recommendations",
      "titleSlug": "leetcodify-friends-recommendations",
      "topicTags": ["Database"]
   },
   {
      "acRate": 52.608386638237384,
      "frontEndId": "1918",
      "status": null,
      "difficulty": "Medium",
      "title": "Kth Smallest Subarray Sum",
      "titleSlug": "kth-smallest-subarray-sum",
      "topicTags": ["Array", "Binary Search", "Sliding Window"]
   },
   {
      "acRate": 41.36120915919993,
      "frontEndId": "1919",
      "status": null,
      "difficulty": "Hard",
      "title": "Leetcodify Similar Friends",
      "titleSlug": "leetcodify-similar-friends",
      "topicTags": ["Database"]
   },
   {
      "acRate": 89.51041906201066,
      "frontEndId": "1920",
      "status": null,
      "difficulty": "Easy",
      "title": "Build Array from Permutation",
      "titleSlug": "build-array-from-permutation",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 38.3096017665423,
      "frontEndId": "1921",
      "status": null,
      "difficulty": "Medium",
      "title": "Eliminate Maximum Number of Monsters",
      "titleSlug": "eliminate-maximum-number-of-monsters",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 42.53491343230979,
      "frontEndId": "1922",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Good Numbers",
      "titleSlug": "count-good-numbers",
      "topicTags": ["Math", "Recursion"]
   },
   {
      "acRate": 27.669618983957218,
      "frontEndId": "1923",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Longest Common Subpath",
      "titleSlug": "longest-common-subpath",
      "topicTags": [
         "Array",
         "Binary Search",
         "Rolling Hash",
         "Suffix Array",
         "Hash Function"
      ]
   },
   {
      "acRate": 51.94174757281553,
      "frontEndId": "1924",
      "status": null,
      "difficulty": "Hard",
      "title": "Erect the Fence II",
      "titleSlug": "erect-the-fence-ii",
      "topicTags": ["Array", "Math", "Geometry"]
   },
   {
      "acRate": 67.53748702716244,
      "frontEndId": "1925",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Square Sum Triples",
      "titleSlug": "count-square-sum-triples",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 47.46863665408608,
      "frontEndId": "1926",
      "status": null,
      "difficulty": "Medium",
      "title": "Nearest Exit from Entrance in Maze",
      "titleSlug": "nearest-exit-from-entrance-in-maze",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 47.06832419733751,
      "frontEndId": "1927",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum Game",
      "titleSlug": "sum-game",
      "topicTags": ["Math", "Greedy", "Game Theory"]
   },
   {
      "acRate": 37.78406518786782,
      "frontEndId": "1928",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Cost to Reach Destination in Time",
      "titleSlug": "minimum-cost-to-reach-destination-in-time",
      "topicTags": ["Dynamic Programming", "Graph"]
   },
   {
      "acRate": 89.5488214170393,
      "frontEndId": "1929",
      "status": null,
      "difficulty": "Easy",
      "title": "Concatenation of Array",
      "titleSlug": "concatenation-of-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 53.78397035314635,
      "frontEndId": "1930",
      "status": null,
      "difficulty": "Medium",
      "title": "Unique Length-3 Palindromic Subsequences",
      "titleSlug": "unique-length-3-palindromic-subsequences",
      "topicTags": ["Hash Table", "String", "Prefix Sum"]
   },
   {
      "acRate": 57.496136012364765,
      "frontEndId": "1931",
      "status": null,
      "difficulty": "Hard",
      "title": "Painting a Grid With Three Different Colors",
      "titleSlug": "painting-a-grid-with-three-different-colors",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 35.738416988416986,
      "frontEndId": "1932",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Merge BSTs to Create Single BST",
      "titleSlug": "merge-bsts-to-create-single-bst",
      "topicTags": [
         "Hash Table",
         "Binary Search",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 50.54439503143689,
      "frontEndId": "1933",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if String Is Decomposable Into Value-Equal Substrings",
      "titleSlug": "check-if-string-is-decomposable-into-value-equal-substrings",
      "topicTags": ["String"]
   },
   {
      "acRate": 56.835328705015584,
      "frontEndId": "1934",
      "status": null,
      "difficulty": "Medium",
      "title": "Confirmation Rate",
      "titleSlug": "confirmation-rate",
      "topicTags": ["Database"]
   },
   {
      "acRate": 72.2307248050823,
      "frontEndId": "1935",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Number of Words You Can Type",
      "titleSlug": "maximum-number-of-words-you-can-type",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 43.17687015588261,
      "frontEndId": "1936",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Add Minimum Number of Rungs",
      "titleSlug": "add-minimum-number-of-rungs",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 35.804983229516054,
      "frontEndId": "1937",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Points with Cost",
      "titleSlug": "maximum-number-of-points-with-cost",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 40.85113714679531,
      "frontEndId": "1938",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Genetic Difference Query",
      "titleSlug": "maximum-genetic-difference-query",
      "topicTags": ["Array", "Bit Manipulation", "Trie"]
   },
   {
      "acRate": 57.019298658507886,
      "frontEndId": "1939",
      "status": null,
      "difficulty": "Easy",
      "title": "Users That Actively Request Confirmation Messages",
      "titleSlug": "users-that-actively-request-confirmation-messages",
      "topicTags": ["Database"]
   },
   {
      "acRate": 78.84534932366476,
      "frontEndId": "1940",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Common Subsequence Between Sorted Arrays",
      "titleSlug": "longest-common-subsequence-between-sorted-arrays",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 77.00743588446558,
      "frontEndId": "1941",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if All Characters Have Equal Number of Occurrences",
      "titleSlug": "check-if-all-characters-have-equal-number-of-occurrences",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 41.22347605420874,
      "frontEndId": "1942",
      "status": null,
      "difficulty": "Medium",
      "title": "The Number of the Smallest Unoccupied Chair",
      "titleSlug": "the-number-of-the-smallest-unoccupied-chair",
      "topicTags": ["Array", "Heap (Priority Queue)", "Ordered Set"]
   },
   {
      "acRate": 48.80066898463976,
      "frontEndId": "1943",
      "status": null,
      "difficulty": "Medium",
      "title": "Describe the Painting",
      "titleSlug": "describe-the-painting",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 68.35274369667918,
      "frontEndId": "1944",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Number of Visible People in a Queue",
      "titleSlug": "number-of-visible-people-in-a-queue",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 61.8276234151605,
      "frontEndId": "1945",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of Digits of String After Convert",
      "titleSlug": "sum-of-digits-of-string-after-convert",
      "topicTags": ["String", "Simulation"]
   },
   {
      "acRate": 35.16934720908231,
      "frontEndId": "1946",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Number After Mutating Substring",
      "titleSlug": "largest-number-after-mutating-substring",
      "topicTags": ["Array", "String", "Greedy"]
   },
   {
      "acRate": 61.69403678769611,
      "frontEndId": "1947",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Compatibility Score Sum",
      "titleSlug": "maximum-compatibility-score-sum",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 56.45827399601253,
      "frontEndId": "1948",
      "status": null,
      "difficulty": "Hard",
      "title": "Delete Duplicate Folders in System",
      "titleSlug": "delete-duplicate-folders-in-system",
      "topicTags": ["Array", "Hash Table", "String", "Trie", "Hash Function"]
   },
   {
      "acRate": 55.14753742677371,
      "frontEndId": "1949",
      "status": null,
      "difficulty": "Medium",
      "title": "Strong Friendship",
      "titleSlug": "strong-friendship",
      "topicTags": ["Database"]
   },
   {
      "acRate": 49.63113242345998,
      "frontEndId": "1950",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum of Minimum Values in All Subarrays",
      "titleSlug": "maximum-of-minimum-values-in-all-subarrays",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 69.25555250891144,
      "frontEndId": "1951",
      "status": null,
      "difficulty": "Medium",
      "title": "All the Pairs With the Maximum Number of Common Followers",
      "titleSlug": "all-the-pairs-with-the-maximum-number-of-common-followers",
      "topicTags": ["Database"]
   },
   {
      "acRate": 59.141515612338914,
      "frontEndId": "1952",
      "status": null,
      "difficulty": "Easy",
      "title": "Three Divisors",
      "titleSlug": "three-divisors",
      "topicTags": ["Math"]
   },
   {
      "acRate": 39.888937656241055,
      "frontEndId": "1953",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Weeks for Which You Can Work",
      "titleSlug": "maximum-number-of-weeks-for-which-you-can-work",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 53.493395658486484,
      "frontEndId": "1954",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Garden Perimeter to Collect Enough Apples",
      "titleSlug": "minimum-garden-perimeter-to-collect-enough-apples",
      "topicTags": ["Math", "Binary Search"]
   },
   {
      "acRate": 51.11503210312209,
      "frontEndId": "1955",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Number of Special Subsequences",
      "titleSlug": "count-number-of-special-subsequences",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 49.55647545830869,
      "frontEndId": "1956",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time For K Virus Variants to Spread",
      "titleSlug": "minimum-time-for-k-virus-variants-to-spread",
      "topicTags": ["Array", "Math", "Binary Search", "Geometry", "Enumeration"]
   },
   {
      "acRate": 57.18704812109897,
      "frontEndId": "1957",
      "status": null,
      "difficulty": "Easy",
      "title": "Delete Characters to Make Fancy String",
      "titleSlug": "delete-characters-to-make-fancy-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 46.49066045468271,
      "frontEndId": "1958",
      "status": null,
      "difficulty": "Medium",
      "title": "Check if Move is Legal",
      "titleSlug": "check-if-move-is-legal",
      "topicTags": ["Array", "Matrix", "Enumeration"]
   },
   {
      "acRate": 42.39941229656419,
      "frontEndId": "1959",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Total Space Wasted With K Resizing Operations",
      "titleSlug": "minimum-total-space-wasted-with-k-resizing-operations",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 30.245765201214137,
      "frontEndId": "1960",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Product of the Length of Two Palindromic Substrings",
      "titleSlug": "maximum-product-of-the-length-of-two-palindromic-substrings",
      "topicTags": ["String", "Rolling Hash", "Hash Function"]
   },
   {
      "acRate": 52.91400923685947,
      "frontEndId": "1961",
      "status": null,
      "difficulty": "Easy",
      "title": "Check If String Is a Prefix of Array",
      "titleSlug": "check-if-string-is-a-prefix-of-array",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 61.07071019650318,
      "frontEndId": "1962",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove Stones to Minimize the Total",
      "titleSlug": "remove-stones-to-minimize-the-total",
      "topicTags": ["Array", "Heap (Priority Queue)"]
   },
   {
      "acRate": 70.27473688134498,
      "frontEndId": "1963",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Number of Swaps to Make the String Balanced",
      "titleSlug": "minimum-number-of-swaps-to-make-the-string-balanced",
      "topicTags": ["Two Pointers", "String", "Stack", "Greedy"]
   },
   {
      "acRate": 63.34654773703336,
      "frontEndId": "1964",
      "status": null,
      "difficulty": "Hard",
      "title": "Find the Longest Valid Obstacle Course at Each Position",
      "titleSlug": "find-the-longest-valid-obstacle-course-at-each-position",
      "topicTags": ["Array", "Binary Search", "Binary Indexed Tree"]
   },
   {
      "acRate": 72.30699842140871,
      "frontEndId": "1965",
      "status": null,
      "difficulty": "Easy",
      "title": "Employees With Missing Information",
      "titleSlug": "employees-with-missing-information",
      "topicTags": ["Database"]
   },
   {
      "acRate": 65.11082138200783,
      "frontEndId": "1966",
      "status": null,
      "difficulty": "Medium",
      "title": "Binary Searchable Numbers in an Unsorted Array",
      "titleSlug": "binary-searchable-numbers-in-an-unsorted-array",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 80.14705882352942,
      "frontEndId": "1967",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Number of Strings That Appear as Substrings in Word",
      "titleSlug": "number-of-strings-that-appear-as-substrings-in-word",
      "topicTags": ["String"]
   },
   {
      "acRate": 49.431611645352106,
      "frontEndId": "1968",
      "status": null,
      "difficulty": "Medium",
      "title": "Array With Elements Not Equal to Average of Neighbors",
      "titleSlug": "array-with-elements-not-equal-to-average-of-neighbors",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 34.640545740773135,
      "frontEndId": "1969",
      "status": "notac",
      "difficulty": "Medium",
      "title": "Minimum Non-Zero Product of the Array Elements",
      "titleSlug": "minimum-non-zero-product-of-the-array-elements",
      "topicTags": ["Math", "Greedy", "Recursion"]
   },
   {
      "acRate": 62.516142918639694,
      "frontEndId": "1970",
      "status": null,
      "difficulty": "Hard",
      "title": "Last Day Where You Can Still Cross",
      "titleSlug": "last-day-where-you-can-still-cross",
      "topicTags": [
         "Array",
         "Binary Search",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 51.51679296348976,
      "frontEndId": "1971",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find if Path Exists in Graph",
      "titleSlug": "find-if-path-exists-in-graph",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 50.12461248556319,
      "frontEndId": "1972",
      "status": null,
      "difficulty": "Hard",
      "title": "First and Last Call On the Same Day",
      "titleSlug": "first-and-last-call-on-the-same-day",
      "topicTags": ["Database"]
   },
   {
      "acRate": 75.1547380350449,
      "frontEndId": "1973",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Nodes Equal to Sum of Descendants",
      "titleSlug": "count-nodes-equal-to-sum-of-descendants",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Binary Search Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 73.67830889987125,
      "frontEndId": "1974",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Time to Type Word Using Special Typewriter",
      "titleSlug": "minimum-time-to-type-word-using-special-typewriter",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 48.8728988146777,
      "frontEndId": "1975",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Matrix Sum",
      "titleSlug": "maximum-matrix-sum",
      "topicTags": ["Array", "Greedy", "Matrix"]
   },
   {
      "acRate": 28.538988996970183,
      "frontEndId": "1976",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Ways to Arrive at Destination",
      "titleSlug": "number-of-ways-to-arrive-at-destination",
      "topicTags": [
         "Dynamic Programming",
         "Graph",
         "Topological Sort",
         "Shortest Path"
      ]
   },
   {
      "acRate": 20.31468135682753,
      "frontEndId": "1977",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ways to Separate Numbers",
      "titleSlug": "number-of-ways-to-separate-numbers",
      "topicTags": ["String", "Dynamic Programming", "Suffix Array"]
   },
   {
      "acRate": 47.21243451249478,
      "frontEndId": "1978",
      "status": null,
      "difficulty": "Easy",
      "title": "Employees Whose Manager Left the Company",
      "titleSlug": "employees-whose-manager-left-the-company",
      "topicTags": ["Database"]
   },
   {
      "acRate": 77.35008317213244,
      "frontEndId": "1979",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Greatest Common Divisor of Array",
      "titleSlug": "find-greatest-common-divisor-of-array",
      "topicTags": ["Array", "Math", "Number Theory"]
   },
   {
      "acRate": 66.40346330904545,
      "frontEndId": "1980",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Unique Binary String",
      "titleSlug": "find-unique-binary-string",
      "topicTags": ["Array", "String", "Backtracking"]
   },
   {
      "acRate": 33.17039596589552,
      "frontEndId": "1981",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimize the Difference Between Target and Chosen Elements",
      "titleSlug": "minimize-the-difference-between-target-and-chosen-elements",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 48.202895616077754,
      "frontEndId": "1982",
      "status": null,
      "difficulty": "Hard",
      "title": "Find Array Given Subset Sums",
      "titleSlug": "find-array-given-subset-sums",
      "topicTags": ["Array", "Divide and Conquer"]
   },
   {
      "acRate": 53.919882034898016,
      "frontEndId": "1983",
      "status": null,
      "difficulty": "Medium",
      "title": "Widest Pair of Indices With Equal Range Sum",
      "titleSlug": "widest-pair-of-indices-with-equal-range-sum",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 55.454963499453925,
      "frontEndId": "1984",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Minimum Difference Between Highest and Lowest of K Scores",
      "titleSlug": "minimum-difference-between-highest-and-lowest-of-k-scores",
      "topicTags": ["Array", "Sliding Window", "Sorting"]
   },
   {
      "acRate": 44.748664499371046,
      "frontEndId": "1985",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Kth Largest Integer in the Array",
      "titleSlug": "find-the-kth-largest-integer-in-the-array",
      "topicTags": [
         "Array",
         "String",
         "Divide and Conquer",
         "Sorting",
         "Heap (Priority Queue)",
         "Quickselect"
      ]
   },
   {
      "acRate": 33.07795331153962,
      "frontEndId": "1986",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Work Sessions to Finish the Tasks",
      "titleSlug": "minimum-number-of-work-sessions-to-finish-the-tasks",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 52.08798679226959,
      "frontEndId": "1987",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Unique Good Subsequences",
      "titleSlug": "number-of-unique-good-subsequences",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 67.33706545027299,
      "frontEndId": "1988",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Cutoff Score for Each School",
      "titleSlug": "find-cutoff-score-for-each-school",
      "topicTags": ["Database"]
   },
   {
      "acRate": 51.169188445667125,
      "frontEndId": "1989",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of People That Can Be Caught in Tag",
      "titleSlug": "maximum-number-of-people-that-can-be-caught-in-tag",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 49.76505766766339,
      "frontEndId": "1990",
      "status": null,
      "difficulty": "Medium",
      "title": "Count the Number of Experiments",
      "titleSlug": "count-the-number-of-experiments",
      "topicTags": ["Database"]
   },
   {
      "acRate": 67.4290248633398,
      "frontEndId": "1991",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Middle Index in Array",
      "titleSlug": "find-the-middle-index-in-array",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 68.21011673151752,
      "frontEndId": "1992",
      "status": null,
      "difficulty": "Medium",
      "title": "Find All Groups of Farmland",
      "titleSlug": "find-all-groups-of-farmland",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 44.99863350642252,
      "frontEndId": "1993",
      "status": null,
      "difficulty": "Medium",
      "title": "Operations on Tree",
      "titleSlug": "operations-on-tree",
      "topicTags": [
         "Array",
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Design"
      ]
   },
   {
      "acRate": 34.491353793425766,
      "frontEndId": "1994",
      "status": null,
      "difficulty": "Hard",
      "title": "The Number of Good Subsets",
      "titleSlug": "the-number-of-good-subsets",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 60.23864709417117,
      "frontEndId": "1995",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Special Quadruplets",
      "titleSlug": "count-special-quadruplets",
      "topicTags": ["Array", "Enumeration"]
   },
   {
      "acRate": 43.94295481252003,
      "frontEndId": "1996",
      "status": "ac",
      "difficulty": "Medium",
      "title": "The Number of Weak Characters in the Game",
      "titleSlug": "the-number-of-weak-characters-in-the-game",
      "topicTags": ["Array", "Stack", "Greedy", "Sorting", "Monotonic Stack"]
   },
   {
      "acRate": 36.76032913165266,
      "frontEndId": "1997",
      "status": null,
      "difficulty": "Medium",
      "title": "First Day Where You Have Been in All the Rooms",
      "titleSlug": "first-day-where-you-have-been-in-all-the-rooms",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 45.36803485439119,
      "frontEndId": "1998",
      "status": null,
      "difficulty": "Hard",
      "title": "GCD Sort of an Array",
      "titleSlug": "gcd-sort-of-an-array",
      "topicTags": ["Array", "Math", "Union Find", "Sorting", "Number Theory"]
   },
   {
      "acRate": 50.17006802721088,
      "frontEndId": "1999",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest Greater Multiple Made of Two Digits",
      "titleSlug": "smallest-greater-multiple-made-of-two-digits",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 79.83515355358487,
      "frontEndId": "2000",
      "status": null,
      "difficulty": "Easy",
      "title": "Reverse Prefix of Word",
      "titleSlug": "reverse-prefix-of-word",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 47.88295311766754,
      "frontEndId": "2001",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Pairs of Interchangeable Rectangles",
      "titleSlug": "number-of-pairs-of-interchangeable-rectangles",
      "topicTags": ["Array", "Hash Table", "Math", "Counting", "Number Theory"]
   },
   {
      "acRate": 56.76439151015422,
      "frontEndId": "2002",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Product of the Length of Two Palindromic Subsequences",
      "titleSlug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
      "topicTags": [
         "String",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 46.09757609571633,
      "frontEndId": "2003",
      "status": null,
      "difficulty": "Hard",
      "title": "Smallest Missing Genetic Value in Each Subtree",
      "titleSlug": "smallest-missing-genetic-value-in-each-subtree",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Union Find"
      ]
   },
   {
      "acRate": 40.72644323565538,
      "frontEndId": "2004",
      "status": null,
      "difficulty": "Hard",
      "title": "The Number of Seniors and Juniors to Join the Company",
      "titleSlug": "the-number-of-seniors-and-juniors-to-join-the-company",
      "topicTags": ["Database"]
   },
   {
      "acRate": 60.83150984682714,
      "frontEndId": "2005",
      "status": null,
      "difficulty": "Hard",
      "title": "Subtree Removal Game with Fibonacci Tree",
      "titleSlug": "subtree-removal-game-with-fibonacci-tree",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Tree",
         "Binary Tree",
         "Game Theory"
      ]
   },
   {
      "acRate": 83.06637127426902,
      "frontEndId": "2006",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Number of Pairs With Absolute Difference K",
      "titleSlug": "count-number-of-pairs-with-absolute-difference-k",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 40.47408754383686,
      "frontEndId": "2007",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Original Array From Doubled Array",
      "titleSlug": "find-original-array-from-doubled-array",
      "topicTags": ["Array", "Hash Table", "Greedy", "Sorting"]
   },
   {
      "acRate": 43.51181128953278,
      "frontEndId": "2008",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Earnings From Taxi",
      "titleSlug": "maximum-earnings-from-taxi",
      "topicTags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 53.62292590346739,
      "frontEndId": "2009",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Number of Operations to Make Array Continuous",
      "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 60.18122977346279,
      "frontEndId": "2010",
      "status": null,
      "difficulty": "Hard",
      "title": "The Number of Seniors and Juniors to Join the Company II",
      "titleSlug": "the-number-of-seniors-and-juniors-to-join-the-company-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 88.52632357746634,
      "frontEndId": "2011",
      "status": null,
      "difficulty": "Easy",
      "title": "Final Value of Variable After Performing Operations",
      "titleSlug": "final-value-of-variable-after-performing-operations",
      "topicTags": ["Array", "String", "Simulation"]
   },
   {
      "acRate": 47.472102026873145,
      "frontEndId": "2012",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum of Beauty in the Array",
      "titleSlug": "sum-of-beauty-in-the-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 50.46016076986234,
      "frontEndId": "2013",
      "status": null,
      "difficulty": "Medium",
      "title": "Detect Squares",
      "titleSlug": "detect-squares",
      "topicTags": ["Array", "Hash Table", "Design", "Counting"]
   },
   {
      "acRate": 54.80465502909393,
      "frontEndId": "2014",
      "status": null,
      "difficulty": "Hard",
      "title": "Longest Subsequence Repeated k Times",
      "titleSlug": "longest-subsequence-repeated-k-times",
      "topicTags": [
         "String",
         "Backtracking",
         "Greedy",
         "Counting",
         "Enumeration"
      ]
   },
   {
      "acRate": 58.92444737710326,
      "frontEndId": "2015",
      "status": null,
      "difficulty": "Medium",
      "title": "Average Height of Buildings in Each Segment",
      "titleSlug": "average-height-of-buildings-in-each-segment",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 54.97059647157659,
      "frontEndId": "2016",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Difference Between Increasing Elements",
      "titleSlug": "maximum-difference-between-increasing-elements",
      "topicTags": ["Array"]
   },
   {
      "acRate": 44.81187140804598,
      "frontEndId": "2017",
      "status": null,
      "difficulty": "Medium",
      "title": "Grid Game",
      "titleSlug": "grid-game",
      "topicTags": ["Array", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 49.16892672054993,
      "frontEndId": "2018",
      "status": null,
      "difficulty": "Medium",
      "title": "Check if Word Can Be Placed In Crossword",
      "titleSlug": "check-if-word-can-be-placed-in-crossword",
      "topicTags": ["Array", "Matrix", "Enumeration"]
   },
   {
      "acRate": 33.3749349973999,
      "frontEndId": "2019",
      "status": null,
      "difficulty": "Hard",
      "title": "The Score of Students Solving Math Expression",
      "titleSlug": "the-score-of-students-solving-math-expression",
      "topicTags": [
         "Array",
         "Math",
         "String",
         "Dynamic Programming",
         "Stack",
         "Memoization"
      ]
   },
   {
      "acRate": 71.98401465323454,
      "frontEndId": "2020",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Accounts That Did Not Stream",
      "titleSlug": "number-of-accounts-that-did-not-stream",
      "topicTags": ["Database"]
   },
   {
      "acRate": 62.467224372580844,
      "frontEndId": "2021",
      "status": null,
      "difficulty": "Medium",
      "title": "Brightest Position on Street",
      "titleSlug": "brightest-position-on-street",
      "topicTags": ["Array", "Prefix Sum", "Ordered Set"]
   },
   {
      "acRate": 60.198111720296374,
      "frontEndId": "2022",
      "status": null,
      "difficulty": "Easy",
      "title": "Convert 1D Array Into 2D Array",
      "titleSlug": "convert-1d-array-into-2d-array",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 73.95079023697242,
      "frontEndId": "2023",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Pairs of Strings With Concatenation Equal to Target",
      "titleSlug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 67.22233828731152,
      "frontEndId": "2024",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximize the Confusion of an Exam",
      "titleSlug": "maximize-the-confusion-of-an-exam",
      "topicTags": ["String", "Binary Search", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 33.55290761097592,
      "frontEndId": "2025",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Ways to Partition an Array",
      "titleSlug": "maximum-number-of-ways-to-partition-an-array",
      "topicTags": [
         "Array",
         "Hash Table",
         "Counting",
         "Enumeration",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 84.15309580887823,
      "frontEndId": "2026",
      "status": null,
      "difficulty": "Easy",
      "title": "Low-Quality Problems",
      "titleSlug": "low-quality-problems",
      "topicTags": ["Database"]
   },
   {
      "acRate": 54.31289861638727,
      "frontEndId": "2027",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Moves to Convert String",
      "titleSlug": "minimum-moves-to-convert-string",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 45.288731078303115,
      "frontEndId": "2028",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Missing Observations",
      "titleSlug": "find-missing-observations",
      "topicTags": ["Array", "Math", "Simulation"]
   },
   {
      "acRate": 27.516295285735943,
      "frontEndId": "2029",
      "status": null,
      "difficulty": "Medium",
      "title": "Stone Game IX",
      "titleSlug": "stone-game-ix",
      "topicTags": ["Array", "Math", "Greedy", "Counting", "Game Theory"]
   },
   {
      "acRate": 38.62436655405405,
      "frontEndId": "2030",
      "status": null,
      "difficulty": "Hard",
      "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
      "titleSlug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
      "topicTags": ["String", "Stack", "Greedy", "Monotonic Stack"]
   },
   {
      "acRate": 52.15936739659367,
      "frontEndId": "2031",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Subarrays With More Ones Than Zeros",
      "titleSlug": "count-subarrays-with-more-ones-than-zeros",
      "topicTags": [
         "Array",
         "Binary Search",
         "Divide and Conquer",
         "Binary Indexed Tree",
         "Segment Tree",
         "Merge Sort",
         "Ordered Set"
      ]
   },
   {
      "acRate": 74.3092157802268,
      "frontEndId": "2032",
      "status": null,
      "difficulty": "Easy",
      "title": "Two Out of Three",
      "titleSlug": "two-out-of-three",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 52.681371924008666,
      "frontEndId": "2033",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Operations to Make a Uni-Value Grid",
      "titleSlug": "minimum-operations-to-make-a-uni-value-grid",
      "topicTags": ["Array", "Math", "Sorting", "Matrix"]
   },
   {
      "acRate": 48.7530452622131,
      "frontEndId": "2034",
      "status": null,
      "difficulty": "Medium",
      "title": "Stock Price Fluctuation ",
      "titleSlug": "stock-price-fluctuation",
      "topicTags": [
         "Hash Table",
         "Design",
         "Heap (Priority Queue)",
         "Data Stream",
         "Ordered Set"
      ]
   },
   {
      "acRate": 19.376838726932334,
      "frontEndId": "2035",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
      "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Dynamic Programming",
         "Bit Manipulation",
         "Ordered Set",
         "Bitmask"
      ]
   },
   {
      "acRate": 40.9957969608794,
      "frontEndId": "2036",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Alternating Subarray Sum",
      "titleSlug": "maximum-alternating-subarray-sum",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 81.61671053748833,
      "frontEndId": "2037",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Minimum Number of Moves to Seat Everyone",
      "titleSlug": "minimum-number-of-moves-to-seat-everyone",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 62.98048668731884,
      "frontEndId": "2038",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
      "titleSlug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
      "topicTags": ["Math", "String", "Greedy", "Game Theory"]
   },
   {
      "acRate": 51.266005187533445,
      "frontEndId": "2039",
      "status": null,
      "difficulty": "Medium",
      "title": "The Time When the Network Becomes Idle",
      "titleSlug": "the-time-when-the-network-becomes-idle",
      "topicTags": ["Array", "Breadth-First Search", "Graph"]
   },
   {
      "acRate": 28.531176918091912,
      "frontEndId": "2040",
      "status": null,
      "difficulty": "Hard",
      "title": "Kth Smallest Product of Two Sorted Arrays",
      "titleSlug": "kth-smallest-product-of-two-sorted-arrays",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 78.14590301003345,
      "frontEndId": "2041",
      "status": null,
      "difficulty": "Medium",
      "title": "Accepted Candidates From the Interviews",
      "titleSlug": "accepted-candidates-from-the-interviews",
      "topicTags": ["Database"]
   },
   {
      "acRate": 68.14769873296272,
      "frontEndId": "2042",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if Numbers Are Ascending in a Sentence",
      "titleSlug": "check-if-numbers-are-ascending-in-a-sentence",
      "topicTags": ["String"]
   },
   {
      "acRate": 64.60549910340706,
      "frontEndId": "2043",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Simple Bank System",
      "titleSlug": "simple-bank-system",
      "topicTags": ["Array", "Hash Table", "Design", "Simulation"]
   },
   {
      "acRate": 76.53851034132724,
      "frontEndId": "2044",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Number of Maximum Bitwise-OR Subsets",
      "titleSlug": "count-number-of-maximum-bitwise-or-subsets",
      "topicTags": ["Array", "Backtracking", "Bit Manipulation"]
   },
   {
      "acRate": 39.85955392411124,
      "frontEndId": "2045",
      "status": null,
      "difficulty": "Hard",
      "title": "Second Minimum Time to Reach Destination",
      "titleSlug": "second-minimum-time-to-reach-destination",
      "topicTags": ["Breadth-First Search", "Graph", "Shortest Path"]
   },
   {
      "acRate": 67.9615841156793,
      "frontEndId": "2046",
      "status": null,
      "difficulty": "Medium",
      "title": "Sort Linked List Already Sorted Using Absolute Values",
      "titleSlug": "sort-linked-list-already-sorted-using-absolute-values",
      "topicTags": ["Linked List", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 28.88799076212471,
      "frontEndId": "2047",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Valid Words in a Sentence",
      "titleSlug": "number-of-valid-words-in-a-sentence",
      "topicTags": ["String"]
   },
   {
      "acRate": 47.3650919153983,
      "frontEndId": "2048",
      "status": null,
      "difficulty": "Medium",
      "title": "Next Greater Numerically Balanced Number",
      "titleSlug": "next-greater-numerically-balanced-number",
      "topicTags": ["Math", "Backtracking", "Enumeration"]
   },
   {
      "acRate": 47.57683808758538,
      "frontEndId": "2049",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Nodes With the Highest Score",
      "titleSlug": "count-nodes-with-the-highest-score",
      "topicTags": ["Array", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 59.46391176881195,
      "frontEndId": "2050",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Parallel Courses III",
      "titleSlug": "parallel-courses-iii",
      "topicTags": ["Array", "Dynamic Programming", "Graph", "Topological Sort"]
   },
   {
      "acRate": 69.66098034981646,
      "frontEndId": "2051",
      "status": null,
      "difficulty": "Medium",
      "title": "The Category of Each Member in the Store",
      "titleSlug": "the-category-of-each-member-in-the-store",
      "topicTags": ["Database"]
   },
   {
      "acRate": 49.76392823418319,
      "frontEndId": "2052",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Cost to Separate Sentence Into Rows",
      "titleSlug": "minimum-cost-to-separate-sentence-into-rows",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 72.18780118408371,
      "frontEndId": "2053",
      "status": null,
      "difficulty": "Easy",
      "title": "Kth Distinct String in an Array",
      "titleSlug": "kth-distinct-string-in-an-array",
      "topicTags": ["Array", "Hash Table", "String", "Counting"]
   },
   {
      "acRate": 45.97144167909164,
      "frontEndId": "2054",
      "status": null,
      "difficulty": "Medium",
      "title": "Two Best Non-Overlapping Events",
      "titleSlug": "two-best-non-overlapping-events",
      "topicTags": [
         "Array",
         "Binary Search",
         "Dynamic Programming",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 44.440483314447235,
      "frontEndId": "2055",
      "status": null,
      "difficulty": "Medium",
      "title": "Plates Between Candles",
      "titleSlug": "plates-between-candles",
      "topicTags": ["Array", "String", "Binary Search", "Prefix Sum"]
   },
   {
      "acRate": 53.606321839080465,
      "frontEndId": "2056",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Valid Move Combinations On Chessboard",
      "titleSlug": "number-of-valid-move-combinations-on-chessboard",
      "topicTags": ["Array", "String", "Backtracking", "Simulation"]
   },
   {
      "acRate": 72.25293362007996,
      "frontEndId": "2057",
      "status": null,
      "difficulty": "Easy",
      "title": "Smallest Index With Equal Value",
      "titleSlug": "smallest-index-with-equal-value",
      "topicTags": ["Array"]
   },
   {
      "acRate": 57.52590382375181,
      "frontEndId": "2058",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
      "titleSlug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 48.38952536824877,
      "frontEndId": "2059",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Operations to Convert Number",
      "titleSlug": "minimum-operations-to-convert-number",
      "topicTags": ["Array", "Breadth-First Search"]
   },
   {
      "acRate": 40.77716478771888,
      "frontEndId": "2060",
      "status": null,
      "difficulty": "Hard",
      "title": "Check if an Original String Exists Given Two Encoded Strings",
      "titleSlug": "check-if-an-original-string-exists-given-two-encoded-strings",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 54.11563657077756,
      "frontEndId": "2061",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Spaces Cleaning Robot Cleaned",
      "titleSlug": "number-of-spaces-cleaning-robot-cleaned",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 66.80167740615731,
      "frontEndId": "2062",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Count Vowel Substrings of a String",
      "titleSlug": "count-vowel-substrings-of-a-string",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 54.41060473269063,
      "frontEndId": "2063",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Vowels of All Substrings",
      "titleSlug": "vowels-of-all-substrings",
      "topicTags": ["Math", "String", "Dynamic Programming", "Combinatorics"]
   },
   {
      "acRate": 51.486405093787646,
      "frontEndId": "2064",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimized Maximum of Products Distributed to Any Store",
      "titleSlug": "minimized-maximum-of-products-distributed-to-any-store",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 57.65079157398927,
      "frontEndId": "2065",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Path Quality of a Graph",
      "titleSlug": "maximum-path-quality-of-a-graph",
      "topicTags": ["Array", "Backtracking", "Graph"]
   },
   {
      "acRate": 83.11940459497357,
      "frontEndId": "2066",
      "status": null,
      "difficulty": "Medium",
      "title": "Account Balance",
      "titleSlug": "account-balance",
      "topicTags": ["Database"]
   },
   {
      "acRate": 47.707612456747405,
      "frontEndId": "2067",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Equal Count Substrings",
      "titleSlug": "number-of-equal-count-substrings",
      "topicTags": ["String", "Counting", "Prefix Sum"]
   },
   {
      "acRate": 63.47756642950486,
      "frontEndId": "2068",
      "status": null,
      "difficulty": "Easy",
      "title": "Check Whether Two Strings are Almost Equivalent",
      "titleSlug": "check-whether-two-strings-are-almost-equivalent",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 24.13001513017165,
      "frontEndId": "2069",
      "status": null,
      "difficulty": "Medium",
      "title": "Walking Robot Simulation II",
      "titleSlug": "walking-robot-simulation-ii",
      "topicTags": ["Design", "Simulation"]
   },
   {
      "acRate": 49.374721622640216,
      "frontEndId": "2070",
      "status": null,
      "difficulty": "Medium",
      "title": "Most Beautiful Item for Each Query",
      "titleSlug": "most-beautiful-item-for-each-query",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 33.76521397722811,
      "frontEndId": "2071",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Tasks You Can Assign",
      "titleSlug": "maximum-number-of-tasks-you-can-assign",
      "topicTags": [
         "Array",
         "Binary Search",
         "Greedy",
         "Queue",
         "Sorting",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 72.62881261447798,
      "frontEndId": "2072",
      "status": null,
      "difficulty": "Easy",
      "title": "The Winner University",
      "titleSlug": "the-winner-university",
      "topicTags": ["Database"]
   },
   {
      "acRate": 62.66698001187413,
      "frontEndId": "2073",
      "status": null,
      "difficulty": "Easy",
      "title": "Time Needed to Buy Tickets",
      "titleSlug": "time-needed-to-buy-tickets",
      "topicTags": ["Array", "Queue", "Simulation"]
   },
   {
      "acRate": 55.5041396036016,
      "frontEndId": "2074",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Reverse Nodes in Even Length Groups",
      "titleSlug": "reverse-nodes-in-even-length-groups",
      "topicTags": ["Linked List"]
   },
   {
      "acRate": 49.41862853855951,
      "frontEndId": "2075",
      "status": null,
      "difficulty": "Medium",
      "title": "Decode the Slanted Ciphertext",
      "titleSlug": "decode-the-slanted-ciphertext",
      "topicTags": ["String", "Simulation"]
   },
   {
      "acRate": 54.06784432401999,
      "frontEndId": "2076",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Process Restricted Friend Requests",
      "titleSlug": "process-restricted-friend-requests",
      "topicTags": ["Union Find", "Graph"]
   },
   {
      "acRate": 54.805401111993646,
      "frontEndId": "2077",
      "status": null,
      "difficulty": "Medium",
      "title": "Paths in Maze That Lead to Same Room",
      "titleSlug": "paths-in-maze-that-lead-to-same-room",
      "topicTags": ["Graph"]
   },
   {
      "acRate": 66.57022732131405,
      "frontEndId": "2078",
      "status": null,
      "difficulty": "Easy",
      "title": "Two Furthest Houses With Different Colors",
      "titleSlug": "two-furthest-houses-with-different-colors",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 79.55902885510395,
      "frontEndId": "2079",
      "status": null,
      "difficulty": "Medium",
      "title": "Watering Plants",
      "titleSlug": "watering-plants",
      "topicTags": ["Array"]
   },
   {
      "acRate": 39.2294446835988,
      "frontEndId": "2080",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Range Frequency Queries",
      "titleSlug": "range-frequency-queries",
      "topicTags": [
         "Array",
         "Hash Table",
         "Binary Search",
         "Design",
         "Segment Tree"
      ]
   },
   {
      "acRate": 42.10559357147341,
      "frontEndId": "2081",
      "status": null,
      "difficulty": "Hard",
      "title": "Sum of k-Mirror Numbers",
      "titleSlug": "sum-of-k-mirror-numbers",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 77.61854498213707,
      "frontEndId": "2082",
      "status": null,
      "difficulty": "Easy",
      "title": "The Number of Rich Customers",
      "titleSlug": "the-number-of-rich-customers",
      "topicTags": ["Database"]
   },
   {
      "acRate": 68.00709639266707,
      "frontEndId": "2083",
      "status": null,
      "difficulty": "Medium",
      "title": "Substrings That Begin and End With the Same Letter",
      "titleSlug": "substrings-that-begin-and-end-with-the-same-letter",
      "topicTags": ["Hash Table", "Math", "String", "Counting", "Prefix Sum"]
   },
   {
      "acRate": 87.27690220227534,
      "frontEndId": "2084",
      "status": null,
      "difficulty": "Medium",
      "title": "Drop Type 1 Orders for Customers With Type 0 Orders",
      "titleSlug": "drop-type-1-orders-for-customers-with-type-0-orders",
      "topicTags": ["Database"]
   },
   {
      "acRate": 69.83054385118123,
      "frontEndId": "2085",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Common Words With One Occurrence",
      "titleSlug": "count-common-words-with-one-occurrence",
      "topicTags": ["Array", "Hash Table", "String", "Counting"]
   },
   {
      "acRate": 45.23742938643101,
      "frontEndId": "2086",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Food Buckets to Feed the Hamsters",
      "titleSlug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
      "topicTags": ["String", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 51.04936062213255,
      "frontEndId": "2087",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Cost Homecoming of a Robot in a Grid",
      "titleSlug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
      "topicTags": ["Array", "Greedy", "Matrix"]
   },
   {
      "acRate": 63.47127640998777,
      "frontEndId": "2088",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Count Fertile Pyramids in a Land",
      "titleSlug": "count-fertile-pyramids-in-a-land",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 75.76659272428444,
      "frontEndId": "2089",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Target Indices After Sorting Array",
      "titleSlug": "find-target-indices-after-sorting-array",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 47.48816649434173,
      "frontEndId": "2090",
      "status": "ac",
      "difficulty": "Medium",
      "title": "K Radius Subarray Averages",
      "titleSlug": "k-radius-subarray-averages",
      "topicTags": ["Array", "Sliding Window"]
   },
   {
      "acRate": 54.56003176445435,
      "frontEndId": "2091",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Removing Minimum and Maximum From Array",
      "titleSlug": "removing-minimum-and-maximum-from-array",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 34.1830805447123,
      "frontEndId": "2092",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Find All People With Secret",
      "titleSlug": "find-all-people-with-secret",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph",
         "Sorting"
      ]
   },
   {
      "acRate": 55.471014492753625,
      "frontEndId": "2093",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Cost to Reach City With Discounts",
      "titleSlug": "minimum-cost-to-reach-city-with-discounts",
      "topicTags": ["Graph", "Heap (Priority Queue)", "Shortest Path"]
   },
   {
      "acRate": 58.75820519737434,
      "frontEndId": "2094",
      "status": null,
      "difficulty": "Easy",
      "title": "Finding 3-Digit Even Numbers",
      "titleSlug": "finding-3-digit-even-numbers",
      "topicTags": ["Array", "Hash Table", "Sorting", "Enumeration"]
   },
   {
      "acRate": 58.7852470682062,
      "frontEndId": "2095",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Delete the Middle Node of a Linked List",
      "titleSlug": "delete-the-middle-node-of-a-linked-list",
      "topicTags": ["Linked List", "Two Pointers"]
   },
   {
      "acRate": 48.65259467116797,
      "frontEndId": "2096",
      "status": null,
      "difficulty": "Medium",
      "title": "Step-By-Step Directions From a Binary Tree Node to Another",
      "titleSlug": "step-by-step-directions-from-a-binary-tree-node-to-another",
      "topicTags": ["String", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 42.103669308030085,
      "frontEndId": "2097",
      "status": null,
      "difficulty": "Hard",
      "title": "Valid Arrangement of Pairs",
      "titleSlug": "valid-arrangement-of-pairs",
      "topicTags": ["Depth-First Search", "Graph", "Eulerian Circuit"]
   },
   {
      "acRate": 37.24147975531605,
      "frontEndId": "2098",
      "status": null,
      "difficulty": "Medium",
      "title": "Subsequence of Size K With the Largest Even Sum",
      "titleSlug": "subsequence-of-size-k-with-the-largest-even-sum",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 42.75977714069346,
      "frontEndId": "2099",
      "status": "notac",
      "difficulty": "Easy",
      "title": "Find Subsequence of Length K With the Largest Sum",
      "titleSlug": "find-subsequence-of-length-k-with-the-largest-sum",
      "topicTags": ["Array", "Hash Table", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 49.39825760964492,
      "frontEndId": "2100",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Good Days to Rob the Bank",
      "titleSlug": "find-good-days-to-rob-the-bank",
      "topicTags": ["Array", "Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 49.12078767857054,
      "frontEndId": "2101",
      "status": null,
      "difficulty": "Medium",
      "title": "Detonate the Maximum Bombs",
      "titleSlug": "detonate-the-maximum-bombs",
      "topicTags": [
         "Array",
         "Math",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Geometry"
      ]
   },
   {
      "acRate": 64.71541615025265,
      "frontEndId": "2102",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Sequentially Ordinal Rank Tracker",
      "titleSlug": "sequentially-ordinal-rank-tracker",
      "topicTags": [
         "Design",
         "Heap (Priority Queue)",
         "Data Stream",
         "Ordered Set"
      ]
   },
   {
      "acRate": 80.82509490923697,
      "frontEndId": "2103",
      "status": null,
      "difficulty": "Easy",
      "title": "Rings and Rods",
      "titleSlug": "rings-and-rods",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 60.93980004906771,
      "frontEndId": "2104",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sum of Subarray Ranges",
      "titleSlug": "sum-of-subarray-ranges",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 48.61099335876784,
      "frontEndId": "2105",
      "status": null,
      "difficulty": "Medium",
      "title": "Watering Plants II",
      "titleSlug": "watering-plants-ii",
      "topicTags": ["Array", "Two Pointers", "Simulation"]
   },
   {
      "acRate": 35.471228160140654,
      "frontEndId": "2106",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Fruits Harvested After at Most K Steps",
      "titleSlug": "maximum-fruits-harvested-after-at-most-k-steps",
      "topicTags": ["Array", "Binary Search", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 55.89369040373301,
      "frontEndId": "2107",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Unique Flavors After Sharing K Candies",
      "titleSlug": "number-of-unique-flavors-after-sharing-k-candies",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 78.94010700105774,
      "frontEndId": "2108",
      "status": null,
      "difficulty": "Easy",
      "title": "Find First Palindromic String in the Array",
      "titleSlug": "find-first-palindromic-string-in-the-array",
      "topicTags": ["Array", "Two Pointers", "String"]
   },
   {
      "acRate": 56.695795176060884,
      "frontEndId": "2109",
      "status": null,
      "difficulty": "Medium",
      "title": "Adding Spaces to a String",
      "titleSlug": "adding-spaces-to-a-string",
      "topicTags": ["Array", "String", "Simulation"]
   },
   {
      "acRate": 58.354755784061695,
      "frontEndId": "2110",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Smooth Descent Periods of a Stock",
      "titleSlug": "number-of-smooth-descent-periods-of-a-stock",
      "topicTags": ["Array", "Math", "Dynamic Programming"]
   },
   {
      "acRate": 38.069903914361255,
      "frontEndId": "2111",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Operations to Make the Array K-Increasing",
      "titleSlug": "minimum-operations-to-make-the-array-k-increasing",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 68.8140993726974,
      "frontEndId": "2112",
      "status": null,
      "difficulty": "Medium",
      "title": "The Airport With the Most Traffic",
      "titleSlug": "the-airport-with-the-most-traffic",
      "topicTags": ["Database"]
   },
   {
      "acRate": 73.50390286209887,
      "frontEndId": "2113",
      "status": null,
      "difficulty": "Medium",
      "title": "Elements in Array After Removing and Replacing Elements",
      "titleSlug": "elements-in-array-after-removing-and-replacing-elements",
      "topicTags": ["Array"]
   },
   {
      "acRate": 86.43084709074557,
      "frontEndId": "2114",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Number of Words Found in Sentences",
      "titleSlug": "maximum-number-of-words-found-in-sentences",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 48.95539572067993,
      "frontEndId": "2115",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find All Possible Recipes from Given Supplies",
      "titleSlug": "find-all-possible-recipes-from-given-supplies",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 30.829999148718823,
      "frontEndId": "2116",
      "status": null,
      "difficulty": "Medium",
      "title": "Check if a Parentheses String Can Be Valid",
      "titleSlug": "check-if-a-parentheses-string-can-be-valid",
      "topicTags": ["String", "Stack", "Greedy"]
   },
   {
      "acRate": 26.492537313432834,
      "frontEndId": "2117",
      "status": null,
      "difficulty": "Hard",
      "title": "Abbreviating the Product of a Range",
      "titleSlug": "abbreviating-the-product-of-a-range",
      "topicTags": ["Math"]
   },
   {
      "acRate": 55.44582392776524,
      "frontEndId": "2118",
      "status": null,
      "difficulty": "Hard",
      "title": "Build the Equation",
      "titleSlug": "build-the-equation",
      "topicTags": ["Database"]
   },
   {
      "acRate": 78.2873644239296,
      "frontEndId": "2119",
      "status": null,
      "difficulty": "Easy",
      "title": "A Number After a Double Reversal",
      "titleSlug": "a-number-after-a-double-reversal",
      "topicTags": ["Math"]
   },
   {
      "acRate": 82.56062549630444,
      "frontEndId": "2120",
      "status": null,
      "difficulty": "Medium",
      "title": "Execution of All Suffix Instructions Staying in a Grid",
      "titleSlug": "execution-of-all-suffix-instructions-staying-in-a-grid",
      "topicTags": ["String", "Simulation"]
   },
   {
      "acRate": 44.03832239714578,
      "frontEndId": "2121",
      "status": null,
      "difficulty": "Medium",
      "title": "Intervals Between Identical Elements",
      "titleSlug": "intervals-between-identical-elements",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 38.80142611064375,
      "frontEndId": "2122",
      "status": null,
      "difficulty": "Hard",
      "title": "Recover the Original Array",
      "titleSlug": "recover-the-original-array",
      "topicTags": ["Array", "Hash Table", "Sorting", "Enumeration"]
   },
   {
      "acRate": 41.7184265010352,
      "frontEndId": "2123",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Operations to Remove Adjacent Ones in Matrix",
      "titleSlug": "minimum-operations-to-remove-adjacent-ones-in-matrix",
      "topicTags": ["Array", "Graph", "Matrix"]
   },
   {
      "acRate": 71.2185563974494,
      "frontEndId": "2124",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if All A's Appears Before All B's",
      "titleSlug": "check-if-all-as-appears-before-all-bs",
      "topicTags": ["String"]
   },
   {
      "acRate": 81.37597995018109,
      "frontEndId": "2125",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Laser Beams in a Bank",
      "titleSlug": "number-of-laser-beams-in-a-bank",
      "topicTags": ["Array", "Math", "String", "Matrix"]
   },
   {
      "acRate": 50.7680200530473,
      "frontEndId": "2126",
      "status": null,
      "difficulty": "Medium",
      "title": "Destroying Asteroids",
      "titleSlug": "destroying-asteroids",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 35.917576252167706,
      "frontEndId": "2127",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Employees to Be Invited to a Meeting",
      "titleSlug": "maximum-employees-to-be-invited-to-a-meeting",
      "topicTags": ["Depth-First Search", "Graph", "Topological Sort"]
   },
   {
      "acRate": 76.26545061802472,
      "frontEndId": "2128",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove All Ones With Row and Column Flips",
      "titleSlug": "remove-all-ones-with-row-and-column-flips",
      "topicTags": ["Array", "Math", "Bit Manipulation", "Matrix"]
   },
   {
      "acRate": 62.924774905605574,
      "frontEndId": "2129",
      "status": null,
      "difficulty": "Easy",
      "title": "Capitalize the Title",
      "titleSlug": "capitalize-the-title",
      "topicTags": ["String"]
   },
   {
      "acRate": 81.6847258977706,
      "frontEndId": "2130",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Twin Sum of a Linked List",
      "titleSlug": "maximum-twin-sum-of-a-linked-list",
      "topicTags": ["Linked List", "Two Pointers", "Stack"]
   },
   {
      "acRate": 48.03983126542091,
      "frontEndId": "2131",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Palindrome by Concatenating Two Letter Words",
      "titleSlug": "longest-palindrome-by-concatenating-two-letter-words",
      "topicTags": ["Array", "Hash Table", "String", "Greedy", "Counting"]
   },
   {
      "acRate": 31.86327422256489,
      "frontEndId": "2132",
      "status": null,
      "difficulty": "Hard",
      "title": "Stamping the Grid",
      "titleSlug": "stamping-the-grid",
      "topicTags": ["Array", "Greedy", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 51.59857904085258,
      "frontEndId": "2133",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if Every Row and Column Contains All Numbers",
      "titleSlug": "check-if-every-row-and-column-contains-all-numbers",
      "topicTags": ["Array", "Hash Table", "Matrix"]
   },
   {
      "acRate": 51.65929203539823,
      "frontEndId": "2134",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Swaps to Group All 1's Together II",
      "titleSlug": "minimum-swaps-to-group-all-1s-together-ii",
      "topicTags": ["Array", "Sliding Window"]
   },
   {
      "acRate": 42.713280622729066,
      "frontEndId": "2135",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Words Obtained After Adding a Letter",
      "titleSlug": "count-words-obtained-after-adding-a-letter",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Bit Manipulation",
         "Sorting"
      ]
   },
   {
      "acRate": 72.29820982155685,
      "frontEndId": "2136",
      "status": null,
      "difficulty": "Hard",
      "title": "Earliest Possible Day of Full Bloom",
      "titleSlug": "earliest-possible-day-of-full-bloom",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 67.30894839973874,
      "frontEndId": "2137",
      "status": null,
      "difficulty": "Medium",
      "title": "Pour Water Between Buckets to Make Water Levels Equal",
      "titleSlug": "pour-water-between-buckets-to-make-water-levels-equal",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 65.84785795732205,
      "frontEndId": "2138",
      "status": null,
      "difficulty": "Easy",
      "title": "Divide a String Into Groups of Size k",
      "titleSlug": "divide-a-string-into-groups-of-size-k",
      "topicTags": ["String", "Simulation"]
   },
   {
      "acRate": 49.47906774832461,
      "frontEndId": "2139",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Moves to Reach Target Score",
      "titleSlug": "minimum-moves-to-reach-target-score",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 54.94304030298096,
      "frontEndId": "2140",
      "status": null,
      "difficulty": "Medium",
      "title": "Solving Questions With Brainpower",
      "titleSlug": "solving-questions-with-brainpower",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 50.36089441740068,
      "frontEndId": "2141",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Running Time of N Computers",
      "titleSlug": "maximum-running-time-of-n-computers",
      "topicTags": ["Array", "Binary Search", "Greedy", "Sorting"]
   },
   {
      "acRate": 48.09291276230698,
      "frontEndId": "2142",
      "status": null,
      "difficulty": "Medium",
      "title": "The Number of Passengers in Each Bus I",
      "titleSlug": "the-number-of-passengers-in-each-bus-i",
      "topicTags": ["Database"]
   },
   {
      "acRate": 51.62818235642392,
      "frontEndId": "2143",
      "status": null,
      "difficulty": "Hard",
      "title": "Choose Numbers From Two Arrays in Range",
      "titleSlug": "choose-numbers-from-two-arrays-in-range",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 60.761461890576186,
      "frontEndId": "2144",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Cost of Buying Candies With Discount",
      "titleSlug": "minimum-cost-of-buying-candies-with-discount",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 37.55726948313572,
      "frontEndId": "2145",
      "status": null,
      "difficulty": "Medium",
      "title": "Count the Hidden Sequences",
      "titleSlug": "count-the-hidden-sequences",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 42.09933311002162,
      "frontEndId": "2146",
      "status": null,
      "difficulty": "Medium",
      "title": "K Highest Ranked Items Within a Price Range",
      "titleSlug": "k-highest-ranked-items-within-a-price-range",
      "topicTags": [
         "Array",
         "Breadth-First Search",
         "Sorting",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 39.61597116317759,
      "frontEndId": "2147",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Number of Ways to Divide a Long Corridor",
      "titleSlug": "number-of-ways-to-divide-a-long-corridor",
      "topicTags": ["Math", "String", "Dynamic Programming"]
   },
   {
      "acRate": 59.34188577806046,
      "frontEndId": "2148",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Elements With Strictly Smaller and Greater Elements ",
      "titleSlug": "count-elements-with-strictly-smaller-and-greater-elements",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 81.86442169856399,
      "frontEndId": "2149",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Rearrange Array Elements by Sign",
      "titleSlug": "rearrange-array-elements-by-sign",
      "topicTags": ["Array", "Two Pointers", "Simulation"]
   },
   {
      "acRate": 60.21807418146672,
      "frontEndId": "2150",
      "status": null,
      "difficulty": "Medium",
      "title": "Find All Lonely Numbers in the Array",
      "titleSlug": "find-all-lonely-numbers-in-the-array",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 49.54925150938715,
      "frontEndId": "2151",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Good People Based on Statements",
      "titleSlug": "maximum-good-people-based-on-statements",
      "topicTags": ["Array", "Backtracking", "Bit Manipulation", "Enumeration"]
   },
   {
      "acRate": 45.90665646518745,
      "frontEndId": "2152",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Lines to Cover Points",
      "titleSlug": "minimum-number-of-lines-to-cover-points",
      "topicTags": [
         "Array",
         "Hash Table",
         "Math",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Geometry",
         "Bitmask"
      ]
   },
   {
      "acRate": 41.35298295454545,
      "frontEndId": "2153",
      "status": null,
      "difficulty": "Hard",
      "title": "The Number of Passengers in Each Bus II",
      "titleSlug": "the-number-of-passengers-in-each-bus-ii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 71.62020209532132,
      "frontEndId": "2154",
      "status": null,
      "difficulty": "Easy",
      "title": "Keep Multiplying Found Values by Two",
      "titleSlug": "keep-multiplying-found-values-by-two",
      "topicTags": ["Array", "Hash Table", "Sorting", "Simulation"]
   },
   {
      "acRate": 63.87638978168226,
      "frontEndId": "2155",
      "status": null,
      "difficulty": "Medium",
      "title": "All Divisions With the Highest Score of a Binary Array",
      "titleSlug": "all-divisions-with-the-highest-score-of-a-binary-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 22.766900905640526,
      "frontEndId": "2156",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Find Substring With Given Hash Value",
      "titleSlug": "find-substring-with-given-hash-value",
      "topicTags": ["String", "Sliding Window", "Rolling Hash", "Hash Function"]
   },
   {
      "acRate": 25.618945102260493,
      "frontEndId": "2157",
      "status": null,
      "difficulty": "Hard",
      "title": "Groups of Strings",
      "titleSlug": "groups-of-strings",
      "topicTags": ["String", "Bit Manipulation", "Union Find"]
   },
   {
      "acRate": 54.7346912713109,
      "frontEndId": "2158",
      "status": null,
      "difficulty": "Hard",
      "title": "Amount of New Area Painted Each Day",
      "titleSlug": "amount-of-new-area-painted-each-day",
      "topicTags": ["Array", "Segment Tree", "Ordered Set"]
   },
   {
      "acRate": 59.51528786174456,
      "frontEndId": "2159",
      "status": null,
      "difficulty": "Medium",
      "title": "Order Two Columns Independently",
      "titleSlug": "order-two-columns-independently",
      "topicTags": ["Database"]
   },
   {
      "acRate": 86.19755309745479,
      "frontEndId": "2160",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Minimum Sum of Four Digit Number After Splitting Digits",
      "titleSlug": "minimum-sum-of-four-digit-number-after-splitting-digits",
      "topicTags": ["Math", "Greedy", "Sorting"]
   },
   {
      "acRate": 84.83611748314733,
      "frontEndId": "2161",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Partition Array According to Given Pivot",
      "titleSlug": "partition-array-according-to-given-pivot",
      "topicTags": ["Array", "Two Pointers", "Simulation"]
   },
   {
      "acRate": 40.587776911944786,
      "frontEndId": "2162",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Cost to Set Cooking Time",
      "titleSlug": "minimum-cost-to-set-cooking-time",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 47.34761120263592,
      "frontEndId": "2163",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Difference in Sums After Removal of Elements",
      "titleSlug": "minimum-difference-in-sums-after-removal-of-elements",
      "topicTags": ["Array", "Dynamic Programming", "Heap (Priority Queue)"]
   },
   {
      "acRate": 63.54107297732623,
      "frontEndId": "2164",
      "status": null,
      "difficulty": "Easy",
      "title": "Sort Even and Odd Indices Independently",
      "titleSlug": "sort-even-and-odd-indices-independently",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 51.64363588163171,
      "frontEndId": "2165",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Smallest Value of the Rearranged Number",
      "titleSlug": "smallest-value-of-the-rearranged-number",
      "topicTags": ["Math", "Sorting"]
   },
   {
      "acRate": 31.943405634505112,
      "frontEndId": "2166",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Bitset",
      "titleSlug": "design-bitset",
      "topicTags": ["Array", "Hash Table", "Design"]
   },
   {
      "acRate": 41.02564102564102,
      "frontEndId": "2167",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
      "titleSlug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 58.998682476943344,
      "frontEndId": "2168",
      "status": null,
      "difficulty": "Medium",
      "title": "Unique Substrings With Equal Digit Frequency",
      "titleSlug": "unique-substrings-with-equal-digit-frequency",
      "topicTags": [
         "Hash Table",
         "String",
         "Rolling Hash",
         "Counting",
         "Hash Function"
      ]
   },
   {
      "acRate": 74.42420158359606,
      "frontEndId": "2169",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Operations to Obtain Zero",
      "titleSlug": "count-operations-to-obtain-zero",
      "topicTags": ["Math", "Simulation"]
   },
   {
      "acRate": 33.052987054755974,
      "frontEndId": "2170",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Operations to Make the Array Alternating",
      "titleSlug": "minimum-operations-to-make-the-array-alternating",
      "topicTags": ["Array", "Hash Table", "Greedy", "Counting"]
   },
   {
      "acRate": 42.350769449227,
      "frontEndId": "2171",
      "status": null,
      "difficulty": "Medium",
      "title": "Removing Minimum Number of Magic Beans",
      "titleSlug": "removing-minimum-number-of-magic-beans",
      "topicTags": ["Array", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 48.55354823473846,
      "frontEndId": "2172",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum AND Sum of Array",
      "titleSlug": "maximum-and-sum-of-array",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 52.145853501129395,
      "frontEndId": "2173",
      "status": null,
      "difficulty": "Hard",
      "title": "Longest Winning Streak",
      "titleSlug": "longest-winning-streak",
      "topicTags": ["Database"]
   },
   {
      "acRate": 68.0068037730014,
      "frontEndId": "2174",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove All Ones With Row and Column Flips II",
      "titleSlug": "remove-all-ones-with-row-and-column-flips-ii",
      "topicTags": [
         "Array",
         "Bit Manipulation",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 62.611578678908444,
      "frontEndId": "2175",
      "status": null,
      "difficulty": "Medium",
      "title": "The Change in Global Rankings",
      "titleSlug": "the-change-in-global-rankings",
      "topicTags": ["Database"]
   },
   {
      "acRate": 79.3744990044734,
      "frontEndId": "2176",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Count Equal and Divisible Pairs in an Array",
      "titleSlug": "count-equal-and-divisible-pairs-in-an-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 64.16225923912148,
      "frontEndId": "2177",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Three Consecutive Integers That Sum to a Given Number",
      "titleSlug": "find-three-consecutive-integers-that-sum-to-a-given-number",
      "topicTags": ["Math", "Simulation"]
   },
   {
      "acRate": 59.32530393951001,
      "frontEndId": "2178",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Split of Positive Even Integers",
      "titleSlug": "maximum-split-of-positive-even-integers",
      "topicTags": ["Math", "Backtracking", "Greedy"]
   },
   {
      "acRate": 39.823713392095534,
      "frontEndId": "2179",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Good Triplets in an Array",
      "titleSlug": "count-good-triplets-in-an-array",
      "topicTags": [
         "Array",
         "Binary Search",
         "Divide and Conquer",
         "Binary Indexed Tree",
         "Segment Tree",
         "Merge Sort",
         "Ordered Set"
      ]
   },
   {
      "acRate": 66.15826994938118,
      "frontEndId": "2180",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Integers With Even Digit Sum",
      "titleSlug": "count-integers-with-even-digit-sum",
      "topicTags": ["Math", "Simulation"]
   },
   {
      "acRate": 85.92651022152107,
      "frontEndId": "2181",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Merge Nodes in Between Zeros",
      "titleSlug": "merge-nodes-in-between-zeros",
      "topicTags": ["Linked List", "Simulation"]
   },
   {
      "acRate": 52.94446306849927,
      "frontEndId": "2182",
      "status": null,
      "difficulty": "Medium",
      "title": "Construct String With Repeat Limit",
      "titleSlug": "construct-string-with-repeat-limit",
      "topicTags": ["String", "Greedy", "Heap (Priority Queue)", "Counting"]
   },
   {
      "acRate": 28.610560917021367,
      "frontEndId": "2183",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Array Pairs Divisible by K",
      "titleSlug": "count-array-pairs-divisible-by-k",
      "topicTags": ["Array", "Math", "Number Theory"]
   },
   {
      "acRate": 50.10814084263344,
      "frontEndId": "2184",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Ways to Build Sturdy Brick Wall",
      "titleSlug": "number-of-ways-to-build-sturdy-brick-wall",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 77.35662121444257,
      "frontEndId": "2185",
      "status": null,
      "difficulty": "Easy",
      "title": "Counting Words With a Given Prefix",
      "titleSlug": "counting-words-with-a-given-prefix",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 71.95269615757184,
      "frontEndId": "2186",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Number of Steps to Make Two Strings Anagram II",
      "titleSlug": "minimum-number-of-steps-to-make-two-strings-anagram-ii",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 38.94848991550629,
      "frontEndId": "2187",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Time to Complete Trips",
      "titleSlug": "minimum-time-to-complete-trips",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 41.39695337028567,
      "frontEndId": "2188",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time to Finish the Race",
      "titleSlug": "minimum-time-to-finish-the-race",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 63.554107853782114,
      "frontEndId": "2189",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Ways to Build House of Cards",
      "titleSlug": "number-of-ways-to-build-house-of-cards",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 59.15617661777727,
      "frontEndId": "2190",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Most Frequent Number Following Key In an Array",
      "titleSlug": "most-frequent-number-following-key-in-an-array",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 46.031092350458145,
      "frontEndId": "2191",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sort the Jumbled Numbers",
      "titleSlug": "sort-the-jumbled-numbers",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 51.49794432836827,
      "frontEndId": "2192",
      "status": "ac",
      "difficulty": "Medium",
      "title": "All Ancestors of a Node in a Directed Acyclic Graph",
      "titleSlug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 50.90922604300863,
      "frontEndId": "2193",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Number of Moves to Make Palindrome",
      "titleSlug": "minimum-number-of-moves-to-make-palindrome",
      "topicTags": ["Two Pointers", "String", "Greedy", "Binary Indexed Tree"]
   },
   {
      "acRate": 83.92116182572614,
      "frontEndId": "2194",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Cells in a Range on an Excel Sheet",
      "titleSlug": "cells-in-a-range-on-an-excel-sheet",
      "topicTags": ["String"]
   },
   {
      "acRate": 25.089894226647186,
      "frontEndId": "2195",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Append K Integers With Minimal Sum",
      "titleSlug": "append-k-integers-with-minimal-sum",
      "topicTags": ["Array", "Math", "Greedy", "Sorting"]
   },
   {
      "acRate": 72.24173251390108,
      "frontEndId": "2196",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Create Binary Tree From Descriptions",
      "titleSlug": "create-binary-tree-from-descriptions",
      "topicTags": [
         "Array",
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 38.65576421960643,
      "frontEndId": "2197",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Replace Non-Coprime Numbers in Array",
      "titleSlug": "replace-non-coprime-numbers-in-array",
      "topicTags": ["Array", "Math", "Stack", "Number Theory"]
   },
   {
      "acRate": 56.202679091438554,
      "frontEndId": "2198",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Single Divisor Triplets",
      "titleSlug": "number-of-single-divisor-triplets",
      "topicTags": ["Math"]
   },
   {
      "acRate": 48.89604415823367,
      "frontEndId": "2199",
      "status": null,
      "difficulty": "Hard",
      "title": "Finding the Topic of Each Post",
      "titleSlug": "finding-the-topic-of-each-post",
      "topicTags": ["Database"]
   },
   {
      "acRate": 65.09922750313301,
      "frontEndId": "2200",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find All K-Distant Indices in an Array",
      "titleSlug": "find-all-k-distant-indices-in-an-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 55.81846153846154,
      "frontEndId": "2201",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Artifacts That Can Be Extracted",
      "titleSlug": "count-artifacts-that-can-be-extracted",
      "topicTags": ["Array", "Hash Table", "Simulation"]
   },
   {
      "acRate": 22.84849732768731,
      "frontEndId": "2202",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximize the Topmost Element After K Moves",
      "titleSlug": "maximize-the-topmost-element-after-k-moves",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 36.22266263342721,
      "frontEndId": "2203",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum Weighted Subgraph With the Required Paths",
      "titleSlug": "minimum-weighted-subgraph-with-the-required-paths",
      "topicTags": ["Graph", "Shortest Path"]
   },
   {
      "acRate": 70.15891701000588,
      "frontEndId": "2204",
      "status": null,
      "difficulty": "Hard",
      "title": "Distance to a Cycle in Undirected Graph",
      "titleSlug": "distance-to-a-cycle-in-undirected-graph",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 50.250350490686955,
      "frontEndId": "2205",
      "status": null,
      "difficulty": "Easy",
      "title": "The Number of Users That Are Eligible for Discount",
      "titleSlug": "the-number-of-users-that-are-eligible-for-discount",
      "topicTags": ["Database"]
   },
   {
      "acRate": 73.312277034243,
      "frontEndId": "2206",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Divide Array Into Equal Pairs",
      "titleSlug": "divide-array-into-equal-pairs",
      "topicTags": ["Array", "Hash Table", "Bit Manipulation", "Counting"]
   },
   {
      "acRate": 33.88542865077161,
      "frontEndId": "2207",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximize Number of Subsequences in a String",
      "titleSlug": "maximize-number-of-subsequences-in-a-string",
      "topicTags": ["String", "Greedy", "Prefix Sum"]
   },
   {
      "acRate": 45.88328134981774,
      "frontEndId": "2208",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Operations to Halve Array Sum",
      "titleSlug": "minimum-operations-to-halve-array-sum",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 35.014197591305205,
      "frontEndId": "2209",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Minimum White Tiles After Covering With Carpets",
      "titleSlug": "minimum-white-tiles-after-covering-with-carpets",
      "topicTags": ["String", "Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 58.70748299319728,
      "frontEndId": "2210",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Count Hills and Valleys in an Array",
      "titleSlug": "count-hills-and-valleys-in-an-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 43.035681271954154,
      "frontEndId": "2211",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Collisions on a Road",
      "titleSlug": "count-collisions-on-a-road",
      "topicTags": ["String", "Stack"]
   },
   {
      "acRate": 49.6078431372549,
      "frontEndId": "2212",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Points in an Archery Competition",
      "titleSlug": "maximum-points-in-an-archery-competition",
      "topicTags": ["Array", "Backtracking", "Bit Manipulation", "Enumeration"]
   },
   {
      "acRate": 31.693427192913077,
      "frontEndId": "2213",
      "status": null,
      "difficulty": "Hard",
      "title": "Longest Substring of One Repeating Character",
      "titleSlug": "longest-substring-of-one-repeating-character",
      "topicTags": ["Array", "String", "Segment Tree", "Ordered Set"]
   },
   {
      "acRate": 57.84272539958791,
      "frontEndId": "2214",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Health to Beat Game",
      "titleSlug": "minimum-health-to-beat-game",
      "topicTags": ["Array", "Greedy", "Prefix Sum"]
   },
   {
      "acRate": 78.32168089761818,
      "frontEndId": "2215",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find the Difference of Two Arrays",
      "titleSlug": "find-the-difference-of-two-arrays",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 47.54010781758431,
      "frontEndId": "2216",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Deletions to Make Array Beautiful",
      "titleSlug": "minimum-deletions-to-make-array-beautiful",
      "topicTags": ["Array", "Stack", "Greedy"]
   },
   {
      "acRate": 33.86191857387843,
      "frontEndId": "2217",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Palindrome With Fixed Length",
      "titleSlug": "find-palindrome-with-fixed-length",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 60.902060310545345,
      "frontEndId": "2218",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Value of K Coins From Piles",
      "titleSlug": "maximum-value-of-k-coins-from-piles",
      "topicTags": ["Array", "Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 62.037543284126116,
      "frontEndId": "2219",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Sum Score of Array",
      "titleSlug": "maximum-sum-score-of-array",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 82.80616980214795,
      "frontEndId": "2220",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Minimum Bit Flips to Convert Number",
      "titleSlug": "minimum-bit-flips-to-convert-number",
      "topicTags": ["Bit Manipulation"]
   },
   {
      "acRate": 78.32287710860585,
      "frontEndId": "2221",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Triangular Sum of an Array",
      "titleSlug": "find-triangular-sum-of-an-array",
      "topicTags": ["Array", "Math", "Simulation", "Combinatorics"]
   },
   {
      "acRate": 50.50478037039513,
      "frontEndId": "2222",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Ways to Select Buildings",
      "titleSlug": "number-of-ways-to-select-buildings",
      "topicTags": ["String", "Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 37.77547614937568,
      "frontEndId": "2223",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Sum of Scores of Built Strings",
      "titleSlug": "sum-of-scores-of-built-strings",
      "topicTags": [
         "String",
         "Binary Search",
         "Rolling Hash",
         "Suffix Array",
         "String Matching",
         "Hash Function"
      ]
   },
   {
      "acRate": 64.98932984236859,
      "frontEndId": "2224",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Minimum Number of Operations to Convert Time",
      "titleSlug": "minimum-number-of-operations-to-convert-time",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 71.24768208335026,
      "frontEndId": "2225",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Players With Zero or One Losses",
      "titleSlug": "find-players-with-zero-or-one-losses",
      "topicTags": ["Array", "Hash Table", "Sorting", "Counting"]
   },
   {
      "acRate": 37.33200044429635,
      "frontEndId": "2226",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Candies Allocated to K Children",
      "titleSlug": "maximum-candies-allocated-to-k-children",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 39.63954279981368,
      "frontEndId": "2227",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Encrypt and Decrypt Strings",
      "titleSlug": "encrypt-and-decrypt-strings",
      "topicTags": ["Array", "Hash Table", "String", "Design", "Trie"]
   },
   {
      "acRate": 43.74317536580039,
      "frontEndId": "2228",
      "status": null,
      "difficulty": "Medium",
      "title": "Users With Two Purchases Within Seven Days",
      "titleSlug": "users-with-two-purchases-within-seven-days",
      "topicTags": ["Database"]
   },
   {
      "acRate": 60.85045883417345,
      "frontEndId": "2229",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if an Array Is Consecutive",
      "titleSlug": "check-if-an-array-is-consecutive",
      "topicTags": ["Array"]
   },
   {
      "acRate": 49.61258239851972,
      "frontEndId": "2230",
      "status": null,
      "difficulty": "Easy",
      "title": "The Users That Are Eligible for Discount",
      "titleSlug": "the-users-that-are-eligible-for-discount",
      "topicTags": ["Database"]
   },
   {
      "acRate": 60.782794990112066,
      "frontEndId": "2231",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Largest Number After Digit Swaps by Parity",
      "titleSlug": "largest-number-after-digit-swaps-by-parity",
      "topicTags": ["Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 66.1779043013688,
      "frontEndId": "2232",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimize Result by Adding Parentheses to Expression",
      "titleSlug": "minimize-result-by-adding-parentheses-to-expression",
      "topicTags": ["String", "Enumeration"]
   },
   {
      "acRate": 41.24004817543366,
      "frontEndId": "2233",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Product After K Increments",
      "titleSlug": "maximum-product-after-k-increments",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 28.6852771073364,
      "frontEndId": "2234",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Maximum Total Beauty of the Gardens",
      "titleSlug": "maximum-total-beauty-of-the-gardens",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Greedy",
         "Sorting"
      ]
   },
   {
      "acRate": 87.16749029867619,
      "frontEndId": "2235",
      "status": null,
      "difficulty": "Easy",
      "title": "Add Two Integers",
      "titleSlug": "add-two-integers",
      "topicTags": ["Math"]
   },
   {
      "acRate": 83.48945270346846,
      "frontEndId": "2236",
      "status": null,
      "difficulty": "Easy",
      "title": "Root Equals Sum of Children",
      "titleSlug": "root-equals-sum-of-children",
      "topicTags": ["Tree", "Binary Tree"]
   },
   {
      "acRate": 63.75908618899273,
      "frontEndId": "2237",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Positions on Street With Required Brightness",
      "titleSlug": "count-positions-on-street-with-required-brightness",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 70.70473876063184,
      "frontEndId": "2238",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Times a Driver Was a Passenger",
      "titleSlug": "number-of-times-a-driver-was-a-passenger",
      "topicTags": ["Database"]
   },
   {
      "acRate": 44.5739208444279,
      "frontEndId": "2239",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Find Closest Number to Zero",
      "titleSlug": "find-closest-number-to-zero",
      "topicTags": ["Array"]
   },
   {
      "acRate": 56.96450132818159,
      "frontEndId": "2240",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Ways to Buy Pens and Pencils",
      "titleSlug": "number-of-ways-to-buy-pens-and-pencils",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 39.51227708038307,
      "frontEndId": "2241",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Design an ATM Machine",
      "titleSlug": "design-an-atm-machine",
      "topicTags": ["Array", "Greedy", "Design"]
   },
   {
      "acRate": 38.048954797212794,
      "frontEndId": "2242",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Score of a Node Sequence",
      "titleSlug": "maximum-score-of-a-node-sequence",
      "topicTags": ["Array", "Graph", "Sorting", "Enumeration"]
   },
   {
      "acRate": 65.76657256886985,
      "frontEndId": "2243",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Calculate Digit Sum of a String",
      "titleSlug": "calculate-digit-sum-of-a-string",
      "topicTags": ["String", "Simulation"]
   },
   {
      "acRate": 62.75823463031907,
      "frontEndId": "2244",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Rounds to Complete All Tasks",
      "titleSlug": "minimum-rounds-to-complete-all-tasks",
      "topicTags": ["Array", "Hash Table", "Greedy", "Counting"]
   },
   {
      "acRate": 35.56427307085107,
      "frontEndId": "2245",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Trailing Zeros in a Cornered Path",
      "titleSlug": "maximum-trailing-zeros-in-a-cornered-path",
      "topicTags": ["Array", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 55.055606082364015,
      "frontEndId": "2246",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Longest Path With Different Adjacent Characters",
      "titleSlug": "longest-path-with-different-adjacent-characters",
      "topicTags": [
         "Array",
         "String",
         "Tree",
         "Depth-First Search",
         "Graph",
         "Topological Sort"
      ]
   },
   {
      "acRate": 50.54531778864235,
      "frontEndId": "2247",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Cost of Trip With K Highways",
      "titleSlug": "maximum-cost-of-trip-with-k-highways",
      "topicTags": [
         "Dynamic Programming",
         "Bit Manipulation",
         "Graph",
         "Bitmask"
      ]
   },
   {
      "acRate": 68.17990146034,
      "frontEndId": "2248",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Intersection of Multiple Arrays",
      "titleSlug": "intersection-of-multiple-arrays",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 51.30886206136592,
      "frontEndId": "2249",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Lattice Points Inside a Circle",
      "titleSlug": "count-lattice-points-inside-a-circle",
      "topicTags": ["Array", "Hash Table", "Math", "Geometry", "Enumeration"]
   },
   {
      "acRate": 34.245649179917365,
      "frontEndId": "2250",
      "status": "notac",
      "difficulty": "Medium",
      "title": "Count Number of Rectangles Containing Each Point",
      "titleSlug": "count-number-of-rectangles-containing-each-point",
      "topicTags": ["Array", "Binary Search", "Binary Indexed Tree", "Sorting"]
   },
   {
      "acRate": 57.16091020244044,
      "frontEndId": "2251",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Flowers in Full Bloom",
      "titleSlug": "number-of-flowers-in-full-bloom",
      "topicTags": [
         "Array",
         "Hash Table",
         "Binary Search",
         "Sorting",
         "Prefix Sum",
         "Ordered Set"
      ]
   },
   {
      "acRate": 53.0631479736098,
      "frontEndId": "2252",
      "status": null,
      "difficulty": "Hard",
      "title": "Dynamic Pivoting of a Table",
      "titleSlug": "dynamic-pivoting-of-a-table",
      "topicTags": ["Database"]
   },
   {
      "acRate": 66.35610766045549,
      "frontEndId": "2253",
      "status": null,
      "difficulty": "Hard",
      "title": "Dynamic Unpivoting of a Table",
      "titleSlug": "dynamic-unpivoting-of-a-table",
      "topicTags": ["Database"]
   },
   {
      "acRate": 63.10517529215359,
      "frontEndId": "2254",
      "status": null,
      "difficulty": "Hard",
      "title": "Design Video Sharing Platform",
      "titleSlug": "design-video-sharing-platform",
      "topicTags": ["Hash Table", "Stack", "Design", "Ordered Set"]
   },
   {
      "acRate": 72.47080016270556,
      "frontEndId": "2255",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Count Prefixes of a Given String",
      "titleSlug": "count-prefixes-of-a-given-string",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 43.021695736117024,
      "frontEndId": "2256",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Average Difference",
      "titleSlug": "minimum-average-difference",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 51.98720227515108,
      "frontEndId": "2257",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Unguarded Cells in the Grid",
      "titleSlug": "count-unguarded-cells-in-the-grid",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 34.48992644707387,
      "frontEndId": "2258",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Escape the Spreading Fire",
      "titleSlug": "escape-the-spreading-fire",
      "topicTags": ["Array", "Binary Search", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 45.14477025435871,
      "frontEndId": "2259",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Remove Digit From Number to Maximize Result",
      "titleSlug": "remove-digit-from-number-to-maximize-result",
      "topicTags": ["String", "Greedy", "Enumeration"]
   },
   {
      "acRate": 50.643971202928775,
      "frontEndId": "2260",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Minimum Consecutive Cards to Pick Up",
      "titleSlug": "minimum-consecutive-cards-to-pick-up",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 49.048605141830116,
      "frontEndId": "2261",
      "status": "ac",
      "difficulty": "Medium",
      "title": "K Divisible Elements Subarrays",
      "titleSlug": "k-divisible-elements-subarrays",
      "topicTags": [
         "Array",
         "Hash Table",
         "Trie",
         "Rolling Hash",
         "Hash Function",
         "Enumeration"
      ]
   },
   {
      "acRate": 55.65274797821422,
      "frontEndId": "2262",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Total Appeal of A String",
      "titleSlug": "total-appeal-of-a-string",
      "topicTags": ["Hash Table", "String", "Dynamic Programming"]
   },
   {
      "acRate": 64.96815286624204,
      "frontEndId": "2263",
      "status": null,
      "difficulty": "Hard",
      "title": "Make Array Non-decreasing or Non-increasing",
      "titleSlug": "make-array-non-decreasing-or-non-increasing",
      "topicTags": ["Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 59.98600624837282,
      "frontEndId": "2264",
      "status": null,
      "difficulty": "Easy",
      "title": "Largest 3-Same-Digit Number in String",
      "titleSlug": "largest-3-same-digit-number-in-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 84.82003129890454,
      "frontEndId": "2265",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Nodes Equal to Average of Subtree",
      "titleSlug": "count-nodes-equal-to-average-of-subtree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 47.223274695534506,
      "frontEndId": "2266",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Number of Texts",
      "titleSlug": "count-number-of-texts",
      "topicTags": ["Hash Table", "Math", "String", "Dynamic Programming"]
   },
   {
      "acRate": 38.058551617873654,
      "frontEndId": "2267",
      "status": null,
      "difficulty": "Hard",
      "title": " Check if There Is a Valid Parentheses String Path",
      "titleSlug": "check-if-there-is-a-valid-parentheses-string-path",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 71.45687290460225,
      "frontEndId": "2268",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Keypresses",
      "titleSlug": "minimum-number-of-keypresses",
      "topicTags": ["Array", "String", "Greedy", "Sorting", "Counting"]
   },
   {
      "acRate": 58.444643085174306,
      "frontEndId": "2269",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the K-Beauty of a Number",
      "titleSlug": "find-the-k-beauty-of-a-number",
      "topicTags": ["Math", "String", "Sliding Window"]
   },
   {
      "acRate": 46.499248953639295,
      "frontEndId": "2270",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Ways to Split Array",
      "titleSlug": "number-of-ways-to-split-array",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 33.354216543977806,
      "frontEndId": "2271",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum White Tiles Covered by a Carpet",
      "titleSlug": "maximum-white-tiles-covered-by-a-carpet",
      "topicTags": ["Array", "Binary Search", "Greedy", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 46.821150108109286,
      "frontEndId": "2272",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Substring With Largest Variance",
      "titleSlug": "substring-with-largest-variance",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 57.819644925200286,
      "frontEndId": "2273",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Resultant Array After Removing Anagrams",
      "titleSlug": "find-resultant-array-after-removing-anagrams",
      "topicTags": ["Array", "Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 51.90584992565191,
      "frontEndId": "2274",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Consecutive Floors Without Special Floors",
      "titleSlug": "maximum-consecutive-floors-without-special-floors",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 72.49058002347273,
      "frontEndId": "2275",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Combination With Bitwise AND Greater Than Zero",
      "titleSlug": "largest-combination-with-bitwise-and-greater-than-zero",
      "topicTags": ["Array", "Hash Table", "Bit Manipulation", "Counting"]
   },
   {
      "acRate": 34.51639059423144,
      "frontEndId": "2276",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Count Integers in Intervals",
      "titleSlug": "count-integers-in-intervals",
      "topicTags": ["Design", "Segment Tree", "Ordered Set"]
   },
   {
      "acRate": 62.974069500793796,
      "frontEndId": "2277",
      "status": null,
      "difficulty": "Hard",
      "title": "Closest Node to Path in Tree",
      "titleSlug": "closest-node-to-path-in-tree",
      "topicTags": [
         "Array",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search"
      ]
   },
   {
      "acRate": 73.93351765582193,
      "frontEndId": "2278",
      "status": null,
      "difficulty": "Easy",
      "title": "Percentage of Letter in String",
      "titleSlug": "percentage-of-letter-in-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 67.59586640161459,
      "frontEndId": "2279",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Bags With Full Capacity of Rocks",
      "titleSlug": "maximum-bags-with-full-capacity-of-rocks",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 24.88673805601318,
      "frontEndId": "2280",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Lines to Represent a Line Chart",
      "titleSlug": "minimum-lines-to-represent-a-line-chart",
      "topicTags": ["Array", "Math", "Geometry", "Sorting", "Number Theory"]
   },
   {
      "acRate": 27.477187150174704,
      "frontEndId": "2281",
      "status": null,
      "difficulty": "Hard",
      "title": "Sum of Total Strength of Wizards",
      "titleSlug": "sum-of-total-strength-of-wizards",
      "topicTags": ["Array", "Stack", "Monotonic Stack", "Prefix Sum"]
   },
   {
      "acRate": 49.03183459140138,
      "frontEndId": "2282",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of People That Can Be Seen in a Grid",
      "titleSlug": "number-of-people-that-can-be-seen-in-a-grid",
      "topicTags": ["Array", "Stack", "Matrix", "Monotonic Stack"]
   },
   {
      "acRate": 72.58883248730965,
      "frontEndId": "2283",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if Number Has Equal Digit Count and Digit Value",
      "titleSlug": "check-if-number-has-equal-digit-count-and-digit-value",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 56.15906520919714,
      "frontEndId": "2284",
      "status": null,
      "difficulty": "Medium",
      "title": "Sender With Largest Word Count",
      "titleSlug": "sender-with-largest-word-count",
      "topicTags": ["Array", "Hash Table", "String", "Counting"]
   },
   {
      "acRate": 60.73119083208769,
      "frontEndId": "2285",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Total Importance of Roads",
      "titleSlug": "maximum-total-importance-of-roads",
      "topicTags": ["Greedy", "Graph", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 15.74147385707164,
      "frontEndId": "2286",
      "status": null,
      "difficulty": "Hard",
      "title": "Booking Concert Tickets in Groups",
      "titleSlug": "booking-concert-tickets-in-groups",
      "topicTags": [
         "Binary Search",
         "Design",
         "Binary Indexed Tree",
         "Segment Tree"
      ]
   },
   {
      "acRate": 58.01265949964834,
      "frontEndId": "2287",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Rearrange Characters to Make Target String",
      "titleSlug": "rearrange-characters-to-make-target-string",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 28.58043595748514,
      "frontEndId": "2288",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Apply Discount to Prices",
      "titleSlug": "apply-discount-to-prices",
      "topicTags": ["String"]
   },
   {
      "acRate": 21.242451420029894,
      "frontEndId": "2289",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Steps to Make Array Non-decreasing",
      "titleSlug": "steps-to-make-array-non-decreasing",
      "topicTags": ["Array", "Linked List", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 51.621976866456365,
      "frontEndId": "2290",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Obstacle Removal to Reach Corner",
      "titleSlug": "minimum-obstacle-removal-to-reach-corner",
      "topicTags": [
         "Array",
         "Breadth-First Search",
         "Graph",
         "Heap (Priority Queue)",
         "Matrix",
         "Shortest Path"
      ]
   },
   {
      "acRate": 45.0452221785293,
      "frontEndId": "2291",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Profit From Trading Stocks",
      "titleSlug": "maximum-profit-from-trading-stocks",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 38.29479768786127,
      "frontEndId": "2292",
      "status": null,
      "difficulty": "Medium",
      "title": "Products With Three or More Orders in Two Consecutive Years",
      "titleSlug": "products-with-three-or-more-orders-in-two-consecutive-years",
      "topicTags": ["Database"]
   },
   {
      "acRate": 63.146352898474014,
      "frontEndId": "2293",
      "status": null,
      "difficulty": "Easy",
      "title": "Min Max Game",
      "titleSlug": "min-max-game",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 73.0443132367663,
      "frontEndId": "2294",
      "status": null,
      "difficulty": "Medium",
      "title": "Partition Array Such That Maximum Difference Is K",
      "titleSlug": "partition-array-such-that-maximum-difference-is-k",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 57.68120206720248,
      "frontEndId": "2295",
      "status": null,
      "difficulty": "Medium",
      "title": "Replace Elements in an Array",
      "titleSlug": "replace-elements-in-an-array",
      "topicTags": ["Array", "Hash Table", "Simulation"]
   },
   {
      "acRate": 42.404381199551324,
      "frontEndId": "2296",
      "status": null,
      "difficulty": "Hard",
      "title": "Design a Text Editor",
      "titleSlug": "design-a-text-editor",
      "topicTags": [
         "Linked List",
         "String",
         "Stack",
         "Design",
         "Simulation",
         "Doubly-Linked List"
      ]
   },
   {
      "acRate": 50.58107360265633,
      "frontEndId": "2297",
      "status": null,
      "difficulty": "Medium",
      "title": "Jump Game VIII",
      "titleSlug": "jump-game-viii",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Stack",
         "Graph",
         "Monotonic Stack",
         "Shortest Path"
      ]
   },
   {
      "acRate": 82.06785137318255,
      "frontEndId": "2298",
      "status": null,
      "difficulty": "Medium",
      "title": "Tasks Count in the Weekend",
      "titleSlug": "tasks-count-in-the-weekend",
      "topicTags": ["Database"]
   },
   {
      "acRate": 55.053257755076615,
      "frontEndId": "2299",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Strong Password Checker II",
      "titleSlug": "strong-password-checker-ii",
      "topicTags": ["String"]
   },
   {
      "acRate": 41.81959318406198,
      "frontEndId": "2300",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Successful Pairs of Spells and Potions",
      "titleSlug": "successful-pairs-of-spells-and-potions",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 39.72615764951983,
      "frontEndId": "2301",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Match Substring After Replacement",
      "titleSlug": "match-substring-after-replacement",
      "topicTags": ["Array", "Hash Table", "String", "String Matching"]
   },
   {
      "acRate": 53.540043545552315,
      "frontEndId": "2302",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Count Subarrays With Score Less Than K",
      "titleSlug": "count-subarrays-with-score-less-than-k",
      "topicTags": ["Array", "Binary Search", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 64.34626252247624,
      "frontEndId": "2303",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Calculate Amount Paid in Taxes",
      "titleSlug": "calculate-amount-paid-in-taxes",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 65.99760564456558,
      "frontEndId": "2304",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Path Cost in a Grid",
      "titleSlug": "minimum-path-cost-in-a-grid",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 69.74623512771446,
      "frontEndId": "2305",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Fair Distribution of Cookies",
      "titleSlug": "fair-distribution-of-cookies",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Backtracking",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 46.76753782668501,
      "frontEndId": "2306",
      "status": null,
      "difficulty": "Hard",
      "title": "Naming a Company",
      "titleSlug": "naming-a-company",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Bit Manipulation",
         "Enumeration"
      ]
   },
   {
      "acRate": 42.38770685579196,
      "frontEndId": "2307",
      "status": null,
      "difficulty": "Hard",
      "title": "Check for Contradictions in Equations",
      "titleSlug": "check-for-contradictions-in-equations",
      "topicTags": ["Array", "Depth-First Search", "Union Find", "Graph"]
   },
   {
      "acRate": 68.41269841269842,
      "frontEndId": "2308",
      "status": null,
      "difficulty": "Medium",
      "title": "Arrange Table by Gender",
      "titleSlug": "arrange-table-by-gender",
      "topicTags": ["Database"]
   },
   {
      "acRate": 69.10265177418128,
      "frontEndId": "2309",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Greatest English Letter in Upper and Lower Case",
      "titleSlug": "greatest-english-letter-in-upper-and-lower-case",
      "topicTags": ["Hash Table", "String", "Enumeration"]
   },
   {
      "acRate": 26.264029459107846,
      "frontEndId": "2310",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Sum of Numbers With Units Digit K",
      "titleSlug": "sum-of-numbers-with-units-digit-k",
      "topicTags": ["Math", "Dynamic Programming", "Greedy", "Enumeration"]
   },
   {
      "acRate": 37.37938698027595,
      "frontEndId": "2311",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Binary Subsequence Less Than or Equal to K",
      "titleSlug": "longest-binary-subsequence-less-than-or-equal-to-k",
      "topicTags": ["String", "Dynamic Programming", "Greedy", "Memoization"]
   },
   {
      "acRate": 49.07154706480441,
      "frontEndId": "2312",
      "status": null,
      "difficulty": "Hard",
      "title": "Selling Pieces of Wood",
      "titleSlug": "selling-pieces-of-wood",
      "topicTags": ["Array", "Dynamic Programming", "Memoization"]
   },
   {
      "acRate": 60.00577533930118,
      "frontEndId": "2313",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Flips in Binary Tree to Get Result",
      "titleSlug": "minimum-flips-in-binary-tree-to-get-result",
      "topicTags": [
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 71.27468581687613,
      "frontEndId": "2314",
      "status": null,
      "difficulty": "Medium",
      "title": "The First Day of the Maximum Recorded Degree in Each City",
      "titleSlug": "the-first-day-of-the-maximum-recorded-degree-in-each-city",
      "topicTags": ["Database"]
   },
   {
      "acRate": 81.57697672711255,
      "frontEndId": "2315",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Count Asterisks",
      "titleSlug": "count-asterisks",
      "topicTags": ["String"]
   },
   {
      "acRate": 49.98780033645388,
      "frontEndId": "2316",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
      "titleSlug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 79.29296785523402,
      "frontEndId": "2317",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum XOR After Operations ",
      "titleSlug": "maximum-xor-after-operations",
      "topicTags": ["Array", "Math", "Bit Manipulation"]
   },
   {
      "acRate": 56.62770893287132,
      "frontEndId": "2318",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Distinct Roll Sequences",
      "titleSlug": "number-of-distinct-roll-sequences",
      "topicTags": ["Dynamic Programming", "Memoization"]
   },
   {
      "acRate": 65.43983674659282,
      "frontEndId": "2319",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if Matrix Is X-Matrix",
      "titleSlug": "check-if-matrix-is-x-matrix",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 41.0634328358209,
      "frontEndId": "2320",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Number of Ways to Place Houses",
      "titleSlug": "count-number-of-ways-to-place-houses",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 56.14665708123652,
      "frontEndId": "2321",
      "status": "ac",
      "difficulty": "Hard",
      "title": "Maximum Score Of Spliced Array",
      "titleSlug": "maximum-score-of-spliced-array",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 51.445880452342486,
      "frontEndId": "2322",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Score After Removals on a Tree",
      "titleSlug": "minimum-score-after-removals-on-a-tree",
      "topicTags": ["Array", "Bit Manipulation", "Tree", "Depth-First Search"]
   },
   {
      "acRate": 68.82733148661127,
      "frontEndId": "2323",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Minimum Time to Finish All Jobs II",
      "titleSlug": "find-minimum-time-to-finish-all-jobs-ii",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 73.64341085271317,
      "frontEndId": "2324",
      "status": null,
      "difficulty": "Medium",
      "title": "Product Sales Analysis IV",
      "titleSlug": "product-sales-analysis-iv",
      "topicTags": ["Database"]
   },
   {
      "acRate": 83.80968583418397,
      "frontEndId": "2325",
      "status": null,
      "difficulty": "Easy",
      "title": "Decode the Message",
      "titleSlug": "decode-the-message",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 75.11586136550103,
      "frontEndId": "2326",
      "status": null,
      "difficulty": "Medium",
      "title": "Spiral Matrix IV",
      "titleSlug": "spiral-matrix-iv",
      "topicTags": ["Array", "Linked List", "Matrix", "Simulation"]
   },
   {
      "acRate": 44.92046610561361,
      "frontEndId": "2327",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of People Aware of a Secret",
      "titleSlug": "number-of-people-aware-of-a-secret",
      "topicTags": ["Dynamic Programming", "Queue", "Simulation"]
   },
   {
      "acRate": 59.08168178942697,
      "frontEndId": "2328",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Increasing Paths in a Grid",
      "titleSlug": "number-of-increasing-paths-in-a-grid",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph",
         "Topological Sort",
         "Memoization",
         "Matrix"
      ]
   },
   {
      "acRate": 68.64772876030895,
      "frontEndId": "2329",
      "status": null,
      "difficulty": "Easy",
      "title": "Product Sales Analysis V",
      "titleSlug": "product-sales-analysis-v",
      "topicTags": ["Database"]
   },
   {
      "acRate": 75.61209136916975,
      "frontEndId": "2330",
      "status": null,
      "difficulty": "Medium",
      "title": "Valid Palindrome IV",
      "titleSlug": "valid-palindrome-iv",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 77.89887898743763,
      "frontEndId": "2331",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Evaluate Boolean Binary Tree",
      "titleSlug": "evaluate-boolean-binary-tree",
      "topicTags": ["Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 25.791244909450416,
      "frontEndId": "2332",
      "status": "ac",
      "difficulty": "Medium",
      "title": "The Latest Time to Catch a Bus",
      "titleSlug": "the-latest-time-to-catch-a-bus",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 25.3736447206968,
      "frontEndId": "2333",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Sum of Squared Difference",
      "titleSlug": "minimum-sum-of-squared-difference",
      "topicTags": ["Array", "Math", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 42.5588066551922,
      "frontEndId": "2334",
      "status": null,
      "difficulty": "Hard",
      "title": "Subarray With Elements Greater Than Varying Threshold",
      "titleSlug": "subarray-with-elements-greater-than-varying-threshold",
      "topicTags": ["Array", "Stack", "Union Find", "Monotonic Stack"]
   },
   {
      "acRate": 57.07888054912247,
      "frontEndId": "2335",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Minimum Amount of Time to Fill Cups",
      "titleSlug": "minimum-amount-of-time-to-fill-cups",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 73.26142273922041,
      "frontEndId": "2336",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Smallest Number in Infinite Set",
      "titleSlug": "smallest-number-in-infinite-set",
      "topicTags": ["Hash Table", "Design", "Heap (Priority Queue)"]
   },
   {
      "acRate": 47.62992109930885,
      "frontEndId": "2337",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Move Pieces to Obtain a String",
      "titleSlug": "move-pieces-to-obtain-a-string",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 26.387424518355218,
      "frontEndId": "2338",
      "status": null,
      "difficulty": "Hard",
      "title": "Count the Number of Ideal Arrays",
      "titleSlug": "count-the-number-of-ideal-arrays",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Combinatorics",
         "Number Theory"
      ]
   },
   {
      "acRate": 87.00947225981055,
      "frontEndId": "2339",
      "status": null,
      "difficulty": "Easy",
      "title": "All the Matches of the League",
      "titleSlug": "all-the-matches-of-the-league",
      "topicTags": ["Database"]
   },
   {
      "acRate": 73.27333333333334,
      "frontEndId": "2340",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Adjacent Swaps to Make a Valid Array",
      "titleSlug": "minimum-adjacent-swaps-to-make-a-valid-array",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 75.43231961836612,
      "frontEndId": "2341",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Maximum Number of Pairs in Array",
      "titleSlug": "maximum-number-of-pairs-in-array",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 53.83944515968271,
      "frontEndId": "2342",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Max Sum of a Pair With Equal Sum of Digits",
      "titleSlug": "max-sum-of-a-pair-with-equal-sum-of-digits",
      "topicTags": ["Array", "Hash Table", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 41.848245189290004,
      "frontEndId": "2343",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Query Kth Smallest Trimmed Number",
      "titleSlug": "query-kth-smallest-trimmed-number",
      "topicTags": [
         "Array",
         "String",
         "Divide and Conquer",
         "Sorting",
         "Heap (Priority Queue)",
         "Radix Sort",
         "Quickselect"
      ]
   },
   {
      "acRate": 56.22867272324397,
      "frontEndId": "2344",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Deletions to Make Array Divisible",
      "titleSlug": "minimum-deletions-to-make-array-divisible",
      "topicTags": [
         "Array",
         "Math",
         "Sorting",
         "Heap (Priority Queue)",
         "Number Theory"
      ]
   },
   {
      "acRate": 38.21827744904668,
      "frontEndId": "2345",
      "status": null,
      "difficulty": "Medium",
      "title": "Finding the Number of Visible Mountains",
      "titleSlug": "finding-the-number-of-visible-mountains",
      "topicTags": ["Array", "Stack", "Sorting", "Monotonic Stack"]
   },
   {
      "acRate": 32.93136368204201,
      "frontEndId": "2346",
      "status": null,
      "difficulty": "Medium",
      "title": "Compute the Rank as a Percentage",
      "titleSlug": "compute-the-rank-as-a-percentage",
      "topicTags": ["Database"]
   },
   {
      "acRate": 60.234927443949196,
      "frontEndId": "2347",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Best Poker Hand",
      "titleSlug": "best-poker-hand",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 66.67308916174763,
      "frontEndId": "2348",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Number of Zero-Filled Subarrays",
      "titleSlug": "number-of-zero-filled-subarrays",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 45.1078017337186,
      "frontEndId": "2349",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Design a Number Container System",
      "titleSlug": "design-a-number-container-system",
      "topicTags": [
         "Hash Table",
         "Design",
         "Heap (Priority Queue)",
         "Ordered Set"
      ]
   },
   {
      "acRate": 68.10389077096808,
      "frontEndId": "2350",
      "status": null,
      "difficulty": "Hard",
      "title": "Shortest Impossible Sequence of Rolls",
      "titleSlug": "shortest-impossible-sequence-of-rolls",
      "topicTags": ["Array", "Hash Table", "Greedy"]
   },
   {
      "acRate": 73.67260885901558,
      "frontEndId": "2351",
      "status": "ac",
      "difficulty": "Easy",
      "title": "First Letter to Appear Twice",
      "titleSlug": "first-letter-to-appear-twice",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 72.78589209129352,
      "frontEndId": "2352",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Equal Row and Column Pairs",
      "titleSlug": "equal-row-and-column-pairs",
      "topicTags": ["Array", "Hash Table", "Matrix", "Simulation"]
   },
   {
      "acRate": 34.48438978240303,
      "frontEndId": "2353",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Design a Food Rating System",
      "titleSlug": "design-a-food-rating-system",
      "topicTags": [
         "Hash Table",
         "Design",
         "Heap (Priority Queue)",
         "Ordered Set"
      ]
   },
   {
      "acRate": 46.51334011148897,
      "frontEndId": "2354",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Excellent Pairs",
      "titleSlug": "number-of-excellent-pairs",
      "topicTags": ["Array", "Hash Table", "Binary Search", "Bit Manipulation"]
   },
   {
      "acRate": 42.916483101516775,
      "frontEndId": "2355",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Books You Can Take",
      "titleSlug": "maximum-number-of-books-you-can-take",
      "topicTags": ["Array", "Dynamic Programming", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 86.29748656272366,
      "frontEndId": "2356",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Unique Subjects Taught by Each Teacher",
      "titleSlug": "number-of-unique-subjects-taught-by-each-teacher",
      "topicTags": ["Database"]
   },
   {
      "acRate": 71.85069025363627,
      "frontEndId": "2357",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Make Array Zero by Subtracting Equal Amounts",
      "titleSlug": "make-array-zero-by-subtracting-equal-amounts",
      "topicTags": [
         "Array",
         "Hash Table",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)",
         "Simulation"
      ]
   },
   {
      "acRate": 67.71353455479243,
      "frontEndId": "2358",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Maximum Number of Groups Entering a Competition",
      "titleSlug": "maximum-number-of-groups-entering-a-competition",
      "topicTags": ["Array", "Math", "Binary Search", "Greedy"]
   },
   {
      "acRate": 45.68714287532292,
      "frontEndId": "2359",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Find Closest Node to Given Two Nodes",
      "titleSlug": "find-closest-node-to-given-two-nodes",
      "topicTags": ["Depth-First Search", "Graph"]
   },
   {
      "acRate": 50.18711476372175,
      "frontEndId": "2360",
      "status": null,
      "difficulty": "Hard",
      "title": "Longest Cycle in a Graph",
      "titleSlug": "longest-cycle-in-a-graph",
      "topicTags": ["Depth-First Search", "Graph", "Topological Sort"]
   },
   {
      "acRate": 79.37774589796467,
      "frontEndId": "2361",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Costs Using the Train Line",
      "titleSlug": "minimum-costs-using-the-train-line",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 73.57280307889673,
      "frontEndId": "2362",
      "status": null,
      "difficulty": "Hard",
      "title": "Generate the Invoice",
      "titleSlug": "generate-the-invoice",
      "topicTags": ["Database"]
   },
   {
      "acRate": 75.42544368883729,
      "frontEndId": "2363",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Merge Similar Items",
      "titleSlug": "merge-similar-items",
      "topicTags": ["Array", "Hash Table", "Sorting", "Ordered Set"]
   },
   {
      "acRate": 41.11664943442231,
      "frontEndId": "2364",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Count Number of Bad Pairs",
      "titleSlug": "count-number-of-bad-pairs",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 47.286184210526315,
      "frontEndId": "2365",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Task Scheduler II",
      "titleSlug": "task-scheduler-ii",
      "topicTags": ["Array", "Hash Table", "Simulation"]
   },
   {
      "acRate": 54.107859024615465,
      "frontEndId": "2366",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Replacements to Sort the Array",
      "titleSlug": "minimum-replacements-to-sort-the-array",
      "topicTags": ["Array", "Math", "Greedy"]
   },
   {
      "acRate": 83.44665617001064,
      "frontEndId": "2367",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Number of Arithmetic Triplets",
      "titleSlug": "number-of-arithmetic-triplets",
      "topicTags": ["Array", "Hash Table", "Two Pointers", "Enumeration"]
   },
   {
      "acRate": 58.46442322831828,
      "frontEndId": "2368",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Reachable Nodes With Restrictions",
      "titleSlug": "reachable-nodes-with-restrictions",
      "topicTags": [
         "Array",
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph"
      ]
   },
   {
      "acRate": 51.92702007339784,
      "frontEndId": "2369",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Check if There is a Valid Partition For The Array",
      "titleSlug": "check-if-there-is-a-valid-partition-for-the-array",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 37.49805937451484,
      "frontEndId": "2370",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Longest Ideal Subsequence",
      "titleSlug": "longest-ideal-subsequence",
      "topicTags": ["Hash Table", "String", "Dynamic Programming"]
   },
   {
      "acRate": 65.3658536585366,
      "frontEndId": "2371",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimize Maximum Value in a Grid",
      "titleSlug": "minimize-maximum-value-in-a-grid",
      "topicTags": [
         "Array",
         "Union Find",
         "Graph",
         "Topological Sort",
         "Sorting",
         "Matrix"
      ]
   },
   {
      "acRate": 82.87119856887298,
      "frontEndId": "2372",
      "status": null,
      "difficulty": "Medium",
      "title": "Calculate the Influence of Each Salesperson",
      "titleSlug": "calculate-the-influence-of-each-salesperson",
      "topicTags": ["Database"]
   },
   {
      "acRate": 82.89588801399826,
      "frontEndId": "2373",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Largest Local Values in a Matrix",
      "titleSlug": "largest-local-values-in-a-matrix",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 46.734277331292255,
      "frontEndId": "2374",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Node With Highest Edge Score",
      "titleSlug": "node-with-highest-edge-score",
      "topicTags": ["Hash Table", "Graph"]
   },
   {
      "acRate": 75.15470034754598,
      "frontEndId": "2375",
      "status": "ac",
      "difficulty": "Medium",
      "title": "Construct Smallest Number From DI String",
      "titleSlug": "construct-smallest-number-from-di-string",
      "topicTags": ["String", "Backtracking", "Stack", "Greedy"]
   },
   {
      "acRate": 37.72279379800029,
      "frontEndId": "2376",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Special Integers",
      "titleSlug": "count-special-integers",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 77.97122046544679,
      "frontEndId": "2377",
      "status": null,
      "difficulty": "Easy",
      "title": "Sort the Olympic Table",
      "titleSlug": "sort-the-olympic-table",
      "topicTags": ["Database"]
   },
   {
      "acRate": 59.33781686497672,
      "frontEndId": "2378",
      "status": null,
      "difficulty": "Medium",
      "title": "Choose Edges to Maximize Score in a Tree",
      "titleSlug": "choose-edges-to-maximize-score-in-a-tree",
      "topicTags": ["Dynamic Programming", "Tree", "Depth-First Search"]
   },
   {
      "acRate": 58.16747873482534,
      "frontEndId": "2379",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Recolors to Get K Consecutive Black Blocks",
      "titleSlug": "minimum-recolors-to-get-k-consecutive-black-blocks",
      "topicTags": ["String", "Sliding Window"]
   },
   {
      "acRate": 49.43760951071086,
      "frontEndId": "2380",
      "status": null,
      "difficulty": "Medium",
      "title": "Time Needed to Rearrange a Binary String",
      "titleSlug": "time-needed-to-rearrange-a-binary-string",
      "topicTags": ["String", "Dynamic Programming", "Simulation"]
   },
   {
      "acRate": 36.01363421695653,
      "frontEndId": "2381",
      "status": null,
      "difficulty": "Medium",
      "title": "Shifting Letters II",
      "titleSlug": "shifting-letters-ii",
      "topicTags": ["Array", "String", "Prefix Sum"]
   },
   {
      "acRate": 48.489474018953125,
      "frontEndId": "2382",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Segment Sum After Removals",
      "titleSlug": "maximum-segment-sum-after-removals",
      "topicTags": ["Array", "Union Find", "Prefix Sum", "Ordered Set"]
   },
   {
      "acRate": 40.83692838654012,
      "frontEndId": "2383",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Hours of Training to Win a Competition",
      "titleSlug": "minimum-hours-of-training-to-win-a-competition",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 31.95872111085597,
      "frontEndId": "2384",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Palindromic Number",
      "titleSlug": "largest-palindromic-number",
      "topicTags": ["Hash Table", "String", "Greedy"]
   },
   {
      "acRate": 58.61063964751667,
      "frontEndId": "2385",
      "status": null,
      "difficulty": "Medium",
      "title": "Amount of Time for Binary Tree to Be Infected",
      "titleSlug": "amount-of-time-for-binary-tree-to-be-infected",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 38.20306439100077,
      "frontEndId": "2386",
      "status": null,
      "difficulty": "Hard",
      "title": "Find the K-Sum of an Array",
      "titleSlug": "find-the-k-sum-of-an-array",
      "topicTags": ["Array", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 69.23076923076923,
      "frontEndId": "2387",
      "status": null,
      "difficulty": "Medium",
      "title": "Median of a Row Wise Sorted Matrix",
      "titleSlug": "median-of-a-row-wise-sorted-matrix",
      "topicTags": ["Array", "Binary Search", "Matrix"]
   },
   {
      "acRate": 52.14509940704569,
      "frontEndId": "2388",
      "status": null,
      "difficulty": "Medium",
      "title": "Change Null Values in a Table to the Previous Value",
      "titleSlug": "change-null-values-in-a-table-to-the-previous-value",
      "topicTags": ["Database"]
   },
   {
      "acRate": 71.74666196556957,
      "frontEndId": "2389",
      "status": null,
      "difficulty": "Easy",
      "title": "Longest Subsequence With Limited Sum",
      "titleSlug": "longest-subsequence-with-limited-sum",
      "topicTags": ["Array", "Binary Search", "Greedy", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 73.52343501562851,
      "frontEndId": "2390",
      "status": null,
      "difficulty": "Medium",
      "title": "Removing Stars From a String",
      "titleSlug": "removing-stars-from-a-string",
      "topicTags": ["String", "Stack", "Simulation"]
   },
   {
      "acRate": 82.63977930605742,
      "frontEndId": "2391",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Amount of Time to Collect Garbage",
      "titleSlug": "minimum-amount-of-time-to-collect-garbage",
      "topicTags": ["Array", "String", "Prefix Sum"]
   },
   {
      "acRate": 60.54253431692969,
      "frontEndId": "2392",
      "status": null,
      "difficulty": "Hard",
      "title": "Build a Matrix With Conditions",
      "titleSlug": "build-a-matrix-with-conditions",
      "topicTags": ["Array", "Graph", "Topological Sort", "Matrix"]
   },
   {
      "acRate": 76.35164204789903,
      "frontEndId": "2393",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Strictly Increasing Subarrays",
      "titleSlug": "count-strictly-increasing-subarrays",
      "topicTags": ["Array", "Math", "Dynamic Programming"]
   },
   {
      "acRate": 40.834638940321895,
      "frontEndId": "2394",
      "status": null,
      "difficulty": "Medium",
      "title": "Employees With Deductions",
      "titleSlug": "employees-with-deductions",
      "topicTags": ["Database"]
   },
   {
      "acRate": 64.7162599235519,
      "frontEndId": "2395",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Subarrays With Equal Sum",
      "titleSlug": "find-subarrays-with-equal-sum",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 87.32987343112852,
      "frontEndId": "2396",
      "status": null,
      "difficulty": "Medium",
      "title": "Strictly Palindromic Number",
      "titleSlug": "strictly-palindromic-number",
      "topicTags": ["Math", "Two Pointers", "Brainteaser"]
   },
   {
      "acRate": 54.00833636841892,
      "frontEndId": "2397",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Rows Covered by Columns",
      "titleSlug": "maximum-rows-covered-by-columns",
      "topicTags": [
         "Array",
         "Backtracking",
         "Bit Manipulation",
         "Matrix",
         "Enumeration"
      ]
   },
   {
      "acRate": 33.62537595038389,
      "frontEndId": "2398",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Robots Within Budget",
      "titleSlug": "maximum-number-of-robots-within-budget",
      "topicTags": [
         "Array",
         "Binary Search",
         "Queue",
         "Sliding Window",
         "Heap (Priority Queue)",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 70.01412020891105,
      "frontEndId": "2399",
      "status": null,
      "difficulty": "Easy",
      "title": "Check Distances Between Same Letters",
      "titleSlug": "check-distances-between-same-letters",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 33.991355995121175,
      "frontEndId": "2400",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Ways to Reach a Position After Exactly k Steps",
      "titleSlug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
      "topicTags": ["Math", "Dynamic Programming", "Combinatorics"]
   },
   {
      "acRate": 49.9930831406494,
      "frontEndId": "2401",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Nice Subarray",
      "titleSlug": "longest-nice-subarray",
      "topicTags": ["Array", "Bit Manipulation", "Sliding Window"]
   },
   {
      "acRate": 33.31131983171901,
      "frontEndId": "2402",
      "status": null,
      "difficulty": "Hard",
      "title": "Meeting Rooms III",
      "titleSlug": "meeting-rooms-iii",
      "topicTags": ["Array", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 55.29835390946503,
      "frontEndId": "2403",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time to Kill All Monsters",
      "titleSlug": "minimum-time-to-kill-all-monsters",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 50.3235480430756,
      "frontEndId": "2404",
      "status": null,
      "difficulty": "Easy",
      "title": "Most Frequent Even Element",
      "titleSlug": "most-frequent-even-element",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 78.85836016628257,
      "frontEndId": "2405",
      "status": null,
      "difficulty": "Medium",
      "title": "Optimal Partition of String",
      "titleSlug": "optimal-partition-of-string",
      "topicTags": ["Hash Table", "String", "Greedy"]
   },
   {
      "acRate": 46.5455973299303,
      "frontEndId": "2406",
      "status": null,
      "difficulty": "Medium",
      "title": "Divide Intervals Into Minimum Number of Groups",
      "titleSlug": "divide-intervals-into-minimum-number-of-groups",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 22.077895760719787,
      "frontEndId": "2407",
      "status": "notac",
      "difficulty": "Hard",
      "title": "Longest Increasing Subsequence II",
      "titleSlug": "longest-increasing-subsequence-ii",
      "topicTags": [
         "Array",
         "Divide and Conquer",
         "Dynamic Programming",
         "Binary Indexed Tree",
         "Segment Tree",
         "Queue",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 77.92141951837769,
      "frontEndId": "2408",
      "status": null,
      "difficulty": "Medium",
      "title": "Design SQL",
      "titleSlug": "design-sql",
      "topicTags": ["Array", "Hash Table", "String", "Design"]
   },
   {
      "acRate": 44.46757478390732,
      "frontEndId": "2409",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Days Spent Together",
      "titleSlug": "count-days-spent-together",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 61.62251869732957,
      "frontEndId": "2410",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Matching of Players With Trainers",
      "titleSlug": "maximum-matching-of-players-with-trainers",
      "topicTags": ["Array", "Two Pointers", "Greedy", "Sorting"]
   },
   {
      "acRate": 42.79760756318735,
      "frontEndId": "2411",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest Subarrays With Maximum Bitwise OR",
      "titleSlug": "smallest-subarrays-with-maximum-bitwise-or",
      "topicTags": [
         "Array",
         "Binary Search",
         "Bit Manipulation",
         "Sliding Window"
      ]
   },
   {
      "acRate": 39.747647205796625,
      "frontEndId": "2412",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Money Required Before Transactions",
      "titleSlug": "minimum-money-required-before-transactions",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 87.37513299444379,
      "frontEndId": "2413",
      "status": null,
      "difficulty": "Easy",
      "title": "Smallest Even Multiple",
      "titleSlug": "smallest-even-multiple",
      "topicTags": ["Math", "Number Theory"]
   },
   {
      "acRate": 57.31776558109741,
      "frontEndId": "2414",
      "status": null,
      "difficulty": "Medium",
      "title": "Length of the Longest Alphabetical Continuous Substring",
      "titleSlug": "length-of-the-longest-alphabetical-continuous-substring",
      "topicTags": ["String"]
   },
   {
      "acRate": 77.4387728312643,
      "frontEndId": "2415",
      "status": null,
      "difficulty": "Medium",
      "title": "Reverse Odd Levels of Binary Tree",
      "titleSlug": "reverse-odd-levels-of-binary-tree",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 44.633982803502406,
      "frontEndId": "2416",
      "status": null,
      "difficulty": "Hard",
      "title": "Sum of Prefix Scores of Strings",
      "titleSlug": "sum-of-prefix-scores-of-strings",
      "topicTags": ["Array", "String", "Trie", "Counting"]
   },
   {
      "acRate": 44.53993933265925,
      "frontEndId": "2417",
      "status": null,
      "difficulty": "Medium",
      "title": "Closest Fair Integer",
      "titleSlug": "closest-fair-integer",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 80.06006675854597,
      "frontEndId": "2418",
      "status": null,
      "difficulty": "Easy",
      "title": "Sort the People",
      "titleSlug": "sort-the-people",
      "topicTags": ["Array", "Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 49.03309816725944,
      "frontEndId": "2419",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Subarray With Maximum Bitwise AND",
      "titleSlug": "longest-subarray-with-maximum-bitwise-and",
      "topicTags": ["Array", "Bit Manipulation", "Brainteaser"]
   },
   {
      "acRate": 38.03237582506729,
      "frontEndId": "2420",
      "status": null,
      "difficulty": "Medium",
      "title": "Find All Good Indices",
      "titleSlug": "find-all-good-indices",
      "topicTags": ["Array", "Dynamic Programming", "Prefix Sum"]
   },
   {
      "acRate": 56.83969280606455,
      "frontEndId": "2421",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Good Paths",
      "titleSlug": "number-of-good-paths",
      "topicTags": ["Array", "Tree", "Union Find", "Graph"]
   },
   {
      "acRate": 66.68329177057356,
      "frontEndId": "2422",
      "status": null,
      "difficulty": "Medium",
      "title": "Merge Operations to Turn Array Into a Palindrome",
      "titleSlug": "merge-operations-to-turn-array-into-a-palindrome",
      "topicTags": ["Array", "Two Pointers", "Greedy"]
   },
   {
      "acRate": 17.302750162828623,
      "frontEndId": "2423",
      "status": null,
      "difficulty": "Easy",
      "title": "Remove Letter To Equalize Frequency",
      "titleSlug": "remove-letter-to-equalize-frequency",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 54.4630511599324,
      "frontEndId": "2424",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Uploaded Prefix",
      "titleSlug": "longest-uploaded-prefix",
      "topicTags": [
         "Binary Search",
         "Union Find",
         "Design",
         "Binary Indexed Tree",
         "Segment Tree",
         "Heap (Priority Queue)",
         "Ordered Set"
      ]
   },
   {
      "acRate": 58.3472596432591,
      "frontEndId": "2425",
      "status": null,
      "difficulty": "Medium",
      "title": "Bitwise XOR of All Pairings",
      "titleSlug": "bitwise-xor-of-all-pairings",
      "topicTags": ["Array", "Bit Manipulation", "Brainteaser"]
   },
   {
      "acRate": 43.42038091498135,
      "frontEndId": "2426",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Pairs Satisfying Inequality",
      "titleSlug": "number-of-pairs-satisfying-inequality",
      "topicTags": [
         "Array",
         "Binary Search",
         "Divide and Conquer",
         "Binary Indexed Tree",
         "Segment Tree",
         "Merge Sort",
         "Ordered Set"
      ]
   },
   {
      "acRate": 78.84662971394634,
      "frontEndId": "2427",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Common Factors",
      "titleSlug": "number-of-common-factors",
      "topicTags": ["Math", "Enumeration", "Number Theory"]
   },
   {
      "acRate": 74.6823314702863,
      "frontEndId": "2428",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Sum of an Hourglass",
      "titleSlug": "maximum-sum-of-an-hourglass",
      "topicTags": ["Array", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 43.37472544201118,
      "frontEndId": "2429",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimize XOR",
      "titleSlug": "minimize-xor",
      "topicTags": ["Greedy", "Bit Manipulation"]
   },
   {
      "acRate": 32.24580821012638,
      "frontEndId": "2430",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Deletions on a String",
      "titleSlug": "maximum-deletions-on-a-string",
      "topicTags": [
         "String",
         "Dynamic Programming",
         "Rolling Hash",
         "String Matching",
         "Hash Function"
      ]
   },
   {
      "acRate": 64.26356589147288,
      "frontEndId": "2431",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximize Total Tastiness of Purchased Fruits",
      "titleSlug": "maximize-total-tastiness-of-purchased-fruits",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 49.176496950877926,
      "frontEndId": "2432",
      "status": null,
      "difficulty": "Easy",
      "title": "The Employee That Worked on the Longest Task",
      "titleSlug": "the-employee-that-worked-on-the-longest-task",
      "topicTags": ["Array"]
   },
   {
      "acRate": 85.69832617447078,
      "frontEndId": "2433",
      "status": null,
      "difficulty": "Medium",
      "title": "Find The Original Array of Prefix Xor",
      "titleSlug": "find-the-original-array-of-prefix-xor",
      "topicTags": ["Array", "Bit Manipulation"]
   },
   {
      "acRate": 38.939728621016094,
      "frontEndId": "2434",
      "status": null,
      "difficulty": "Medium",
      "title": "Using a Robot to Print the Lexicographically Smallest String",
      "titleSlug": "using-a-robot-to-print-the-lexicographically-smallest-string",
      "topicTags": ["Hash Table", "String", "Stack", "Greedy"]
   },
   {
      "acRate": 42.3668437106717,
      "frontEndId": "2435",
      "status": null,
      "difficulty": "Hard",
      "title": "Paths in Matrix Whose Sum Is Divisible by K",
      "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 72.29114971050456,
      "frontEndId": "2436",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Split Into Subarrays With GCD Greater Than One",
      "titleSlug": "minimum-split-into-subarrays-with-gcd-greater-than-one",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Greedy",
         "Number Theory"
      ]
   },
   {
      "acRate": 43.300529901589705,
      "frontEndId": "2437",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Valid Clock Times",
      "titleSlug": "number-of-valid-clock-times",
      "topicTags": ["String", "Enumeration"]
   },
   {
      "acRate": 39.482888506241935,
      "frontEndId": "2438",
      "status": null,
      "difficulty": "Medium",
      "title": "Range Product Queries of Powers",
      "titleSlug": "range-product-queries-of-powers",
      "topicTags": ["Array", "Bit Manipulation", "Prefix Sum"]
   },
   {
      "acRate": 46.81865658650618,
      "frontEndId": "2439",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimize Maximum of Array",
      "titleSlug": "minimize-maximum-of-array",
      "topicTags": [
         "Array",
         "Binary Search",
         "Dynamic Programming",
         "Greedy",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 53.74380887637176,
      "frontEndId": "2440",
      "status": null,
      "difficulty": "Hard",
      "title": "Create Components With Same Value",
      "titleSlug": "create-components-with-same-value",
      "topicTags": [
         "Array",
         "Math",
         "Tree",
         "Depth-First Search",
         "Enumeration"
      ]
   },
   {
      "acRate": 67.67019441085766,
      "frontEndId": "2441",
      "status": null,
      "difficulty": "Easy",
      "title": "Largest Positive Integer That Exists With Its Negative",
      "titleSlug": "largest-positive-integer-that-exists-with-its-negative",
      "topicTags": ["Array", "Hash Table", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 78.74687134990823,
      "frontEndId": "2442",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Number of Distinct Integers After Reverse Operations",
      "titleSlug": "count-number-of-distinct-integers-after-reverse-operations",
      "topicTags": ["Array", "Hash Table", "Math"]
   },
   {
      "acRate": 46.5398915455494,
      "frontEndId": "2443",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum of Number and Its Reverse",
      "titleSlug": "sum-of-number-and-its-reverse",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 61.54283509655411,
      "frontEndId": "2444",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Subarrays With Fixed Bounds",
      "titleSlug": "count-subarrays-with-fixed-bounds",
      "topicTags": ["Array", "Queue", "Sliding Window", "Monotonic Queue"]
   },
   {
      "acRate": 69.76241900647948,
      "frontEndId": "2445",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Nodes With Value One",
      "titleSlug": "number-of-nodes-with-value-one",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 50.13342274753063,
      "frontEndId": "2446",
      "status": null,
      "difficulty": "Easy",
      "title": "Determine if Two Events Have Conflict",
      "titleSlug": "determine-if-two-events-have-conflict",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 49.18704589757221,
      "frontEndId": "2447",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Subarrays With GCD Equal to K",
      "titleSlug": "number-of-subarrays-with-gcd-equal-to-k",
      "topicTags": ["Array", "Math", "Number Theory"]
   },
   {
      "acRate": 45.934574915668215,
      "frontEndId": "2448",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Cost to Make Array Equal",
      "titleSlug": "minimum-cost-to-make-array-equal",
      "topicTags": ["Array", "Binary Search", "Greedy", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 62.165248672414776,
      "frontEndId": "2449",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Number of Operations to Make Arrays Similar",
      "titleSlug": "minimum-number-of-operations-to-make-arrays-similar",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 64.85765124555161,
      "frontEndId": "2450",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Distinct Binary Strings After Applying Operations",
      "titleSlug": "number-of-distinct-binary-strings-after-applying-operations",
      "topicTags": ["Math", "String"]
   },
   {
      "acRate": 58.80773748172295,
      "frontEndId": "2451",
      "status": null,
      "difficulty": "Easy",
      "title": "Odd String Difference",
      "titleSlug": "odd-string-difference",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 60.31926653228429,
      "frontEndId": "2452",
      "status": null,
      "difficulty": "Medium",
      "title": "Words Within Two Edits of Dictionary",
      "titleSlug": "words-within-two-edits-of-dictionary",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 38.55326320089878,
      "frontEndId": "2453",
      "status": null,
      "difficulty": "Medium",
      "title": "Destroy Sequential Targets",
      "titleSlug": "destroy-sequential-targets",
      "topicTags": ["Array", "Hash Table", "Counting"]
   },
   {
      "acRate": 38.12008011551539,
      "frontEndId": "2454",
      "status": null,
      "difficulty": "Hard",
      "title": "Next Greater Element IV",
      "titleSlug": "next-greater-element-iv",
      "topicTags": [
         "Array",
         "Binary Search",
         "Stack",
         "Sorting",
         "Heap (Priority Queue)",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 59.64032394664408,
      "frontEndId": "2455",
      "status": null,
      "difficulty": "Easy",
      "title": "Average Value of Even Numbers That Are Divisible by Three",
      "titleSlug": "average-value-of-even-numbers-that-are-divisible-by-three",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 43.4727056439177,
      "frontEndId": "2456",
      "status": null,
      "difficulty": "Medium",
      "title": "Most Popular Video Creator",
      "titleSlug": "most-popular-video-creator",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 37.13133884998939,
      "frontEndId": "2457",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Addition to Make Integer Beautiful",
      "titleSlug": "minimum-addition-to-make-integer-beautiful",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 38.74043009704003,
      "frontEndId": "2458",
      "status": null,
      "difficulty": "Hard",
      "title": "Height of Binary Tree After Subtree Removal Queries",
      "titleSlug": "height-of-binary-tree-after-subtree-removal-queries",
      "topicTags": [
         "Array",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 46.69565217391305,
      "frontEndId": "2459",
      "status": null,
      "difficulty": "Hard",
      "title": "Sort Array by Moving Items to Empty Space",
      "titleSlug": "sort-array-by-moving-items-to-empty-space",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 67.172562480497,
      "frontEndId": "2460",
      "status": null,
      "difficulty": "Easy",
      "title": "Apply Operations to an Array",
      "titleSlug": "apply-operations-to-an-array",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 33.890125475210276,
      "frontEndId": "2461",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Sum of Distinct Subarrays With Length K",
      "titleSlug": "maximum-sum-of-distinct-subarrays-with-length-k",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 44.315425131677955,
      "frontEndId": "2462",
      "status": null,
      "difficulty": "Medium",
      "title": "Total Cost to Hire K Workers",
      "titleSlug": "total-cost-to-hire-k-workers",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Heap (Priority Queue)",
         "Simulation"
      ]
   },
   {
      "acRate": 40.061447303450926,
      "frontEndId": "2463",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Total Distance Traveled",
      "titleSlug": "minimum-total-distance-traveled",
      "topicTags": ["Array", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 56.00728155339806,
      "frontEndId": "2464",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Subarrays in a Valid Split",
      "titleSlug": "minimum-subarrays-in-a-valid-split",
      "topicTags": ["Array", "Math", "Dynamic Programming", "Number Theory"]
   },
   {
      "acRate": 57.93220681297967,
      "frontEndId": "2465",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Distinct Averages",
      "titleSlug": "number-of-distinct-averages",
      "topicTags": ["Array", "Hash Table", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 55.33604302664532,
      "frontEndId": "2466",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Ways To Build Good Strings",
      "titleSlug": "count-ways-to-build-good-strings",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 48.43917666569115,
      "frontEndId": "2467",
      "status": null,
      "difficulty": "Medium",
      "title": "Most Profitable Path in a Tree",
      "titleSlug": "most-profitable-path-in-a-tree",
      "topicTags": [
         "Array",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph"
      ]
   },
   {
      "acRate": 42.799544219475855,
      "frontEndId": "2468",
      "status": null,
      "difficulty": "Hard",
      "title": "Split Message Based on Limit",
      "titleSlug": "split-message-based-on-limit",
      "topicTags": ["String", "Binary Search"]
   },
   {
      "acRate": 88.59830253150605,
      "frontEndId": "2469",
      "status": null,
      "difficulty": "Easy",
      "title": "Convert the Temperature",
      "titleSlug": "convert-the-temperature",
      "topicTags": ["Math"]
   },
   {
      "acRate": 38.469454579474224,
      "frontEndId": "2470",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Subarrays With LCM Equal to K",
      "titleSlug": "number-of-subarrays-with-lcm-equal-to-k",
      "topicTags": ["Array", "Math", "Number Theory"]
   },
   {
      "acRate": 62.05385304957004,
      "frontEndId": "2471",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
      "titleSlug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
      "topicTags": ["Tree", "Breadth-First Search", "Binary Tree"]
   },
   {
      "acRate": 38.75653872817798,
      "frontEndId": "2472",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Non-overlapping Palindrome Substrings",
      "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 60.02921129503408,
      "frontEndId": "2473",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Cost to Buy Apples",
      "titleSlug": "minimum-cost-to-buy-apples",
      "topicTags": ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"]
   },
   {
      "acRate": 40.07927255770576,
      "frontEndId": "2474",
      "status": null,
      "difficulty": "Hard",
      "title": "Customers With Strictly Increasing Purchases",
      "titleSlug": "customers-with-strictly-increasing-purchases",
      "topicTags": ["Database"]
   },
   {
      "acRate": 70.56158845071019,
      "frontEndId": "2475",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Unequal Triplets in Array",
      "titleSlug": "number-of-unequal-triplets-in-array",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 41.2537245014898,
      "frontEndId": "2476",
      "status": null,
      "difficulty": "Medium",
      "title": "Closest Nodes Queries in a Binary Search Tree",
      "titleSlug": "closest-nodes-queries-in-a-binary-search-tree",
      "topicTags": [
         "Array",
         "Binary Search",
         "Tree",
         "Depth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 65.71444070738852,
      "frontEndId": "2477",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Fuel Cost to Report to the Capital",
      "titleSlug": "minimum-fuel-cost-to-report-to-the-capital",
      "topicTags": [
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph"
      ]
   },
   {
      "acRate": 30.407320154324147,
      "frontEndId": "2478",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Beautiful Partitions",
      "titleSlug": "number-of-beautiful-partitions",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 46.808510638297875,
      "frontEndId": "2479",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum XOR of Two Non-Overlapping Subtrees",
      "titleSlug": "maximum-xor-of-two-non-overlapping-subtrees",
      "topicTags": ["Tree", "Depth-First Search", "Graph", "Trie"]
   },
   {
      "acRate": 69.16243654822335,
      "frontEndId": "2480",
      "status": null,
      "difficulty": "Easy",
      "title": "Form a Chemical Bond",
      "titleSlug": "form-a-chemical-bond",
      "topicTags": ["Database"]
   },
   {
      "acRate": 52.347004165331626,
      "frontEndId": "2481",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Cuts to Divide a Circle",
      "titleSlug": "minimum-cuts-to-divide-a-circle",
      "topicTags": ["Math", "Geometry"]
   },
   {
      "acRate": 79.81761928024753,
      "frontEndId": "2482",
      "status": null,
      "difficulty": "Medium",
      "title": "Difference Between Ones and Zeros in Row and Column",
      "titleSlug": "difference-between-ones-and-zeros-in-row-and-column",
      "topicTags": ["Array", "Matrix", "Simulation"]
   },
   {
      "acRate": 67.6403496224469,
      "frontEndId": "2483",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Penalty for a Shop",
      "titleSlug": "minimum-penalty-for-a-shop",
      "topicTags": ["String", "Prefix Sum"]
   },
   {
      "acRate": 34.77518774992685,
      "frontEndId": "2484",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Palindromic Subsequences",
      "titleSlug": "count-palindromic-subsequences",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 79.83701155707007,
      "frontEndId": "2485",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Pivot Integer",
      "titleSlug": "find-the-pivot-integer",
      "topicTags": ["Math", "Prefix Sum"]
   },
   {
      "acRate": 65.21898984328324,
      "frontEndId": "2486",
      "status": null,
      "difficulty": "Medium",
      "title": "Append Characters to String to Make Subsequence",
      "titleSlug": "append-characters-to-string-to-make-subsequence",
      "topicTags": ["Two Pointers", "String", "Greedy"]
   },
   {
      "acRate": 65.95944066183469,
      "frontEndId": "2487",
      "status": null,
      "difficulty": "Medium",
      "title": "Remove Nodes From Linked List",
      "titleSlug": "remove-nodes-from-linked-list",
      "topicTags": ["Linked List", "Stack", "Recursion", "Monotonic Stack"]
   },
   {
      "acRate": 43.77356909410877,
      "frontEndId": "2488",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Subarrays With Median K",
      "titleSlug": "count-subarrays-with-median-k",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 58.09443507588533,
      "frontEndId": "2489",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Substrings With Fixed Ratio",
      "titleSlug": "number-of-substrings-with-fixed-ratio",
      "topicTags": ["Hash Table", "Math", "String", "Prefix Sum"]
   },
   {
      "acRate": 62.992979852748135,
      "frontEndId": "2490",
      "status": null,
      "difficulty": "Easy",
      "title": "Circular Sentence",
      "titleSlug": "circular-sentence",
      "topicTags": ["String"]
   },
   {
      "acRate": 58.87095132428086,
      "frontEndId": "2491",
      "status": null,
      "difficulty": "Medium",
      "title": "Divide Players Into Teams of Equal Skill",
      "titleSlug": "divide-players-into-teams-of-equal-skill",
      "topicTags": ["Array", "Hash Table", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 57.65393851353354,
      "frontEndId": "2492",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Score of a Path Between Two Cities",
      "titleSlug": "minimum-score-of-a-path-between-two-cities",
      "topicTags": [
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Graph"
      ]
   },
   {
      "acRate": 37.254558204768585,
      "frontEndId": "2493",
      "status": null,
      "difficulty": "Hard",
      "title": "Divide Nodes Into the Maximum Number of Groups",
      "titleSlug": "divide-nodes-into-the-maximum-number-of-groups",
      "topicTags": ["Breadth-First Search", "Union Find", "Graph"]
   },
   {
      "acRate": 24.993498049414825,
      "frontEndId": "2494",
      "status": null,
      "difficulty": "Hard",
      "title": "Merge Overlapping Events in the Same Hall",
      "titleSlug": "merge-overlapping-events-in-the-same-hall",
      "topicTags": ["Database"]
   },
   {
      "acRate": 64.54240536655487,
      "frontEndId": "2495",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Subarrays Having Even Product",
      "titleSlug": "number-of-subarrays-having-even-product",
      "topicTags": ["Array", "Math", "Dynamic Programming"]
   },
   {
      "acRate": 71.51671719543961,
      "frontEndId": "2496",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Value of a String in an Array",
      "titleSlug": "maximum-value-of-a-string-in-an-array",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 38.52017711582973,
      "frontEndId": "2497",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Star Sum of a Graph",
      "titleSlug": "maximum-star-sum-of-a-graph",
      "topicTags": [
         "Array",
         "Greedy",
         "Graph",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 61.362937922556846,
      "frontEndId": "2498",
      "status": null,
      "difficulty": "Medium",
      "title": "Frog Jump II",
      "titleSlug": "frog-jump-ii",
      "topicTags": ["Array", "Binary Search", "Greedy"]
   },
   {
      "acRate": 42.867943548387096,
      "frontEndId": "2499",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Total Cost to Make Arrays Unequal",
      "titleSlug": "minimum-total-cost-to-make-arrays-unequal",
      "topicTags": ["Array", "Hash Table", "Greedy", "Counting"]
   },
   {
      "acRate": 78.07628233231038,
      "frontEndId": "2500",
      "status": null,
      "difficulty": "Easy",
      "title": "Delete Greatest Value in Each Row",
      "titleSlug": "delete-greatest-value-in-each-row",
      "topicTags": [
         "Array",
         "Sorting",
         "Heap (Priority Queue)",
         "Matrix",
         "Simulation"
      ]
   },
   {
      "acRate": 39.00106452388311,
      "frontEndId": "2501",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Square Streak in an Array",
      "titleSlug": "longest-square-streak-in-an-array",
      "topicTags": [
         "Array",
         "Hash Table",
         "Binary Search",
         "Dynamic Programming",
         "Sorting"
      ]
   },
   {
      "acRate": 52.34541992149547,
      "frontEndId": "2502",
      "status": null,
      "difficulty": "Medium",
      "title": "Design Memory Allocator",
      "titleSlug": "design-memory-allocator",
      "topicTags": ["Array", "Hash Table", "Design", "Simulation"]
   },
   {
      "acRate": 35.61453161972811,
      "frontEndId": "2503",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Points From Grid Queries",
      "titleSlug": "maximum-number-of-points-from-grid-queries",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Breadth-First Search",
         "Union Find",
         "Sorting",
         "Heap (Priority Queue)",
         "Matrix"
      ]
   },
   {
      "acRate": 68.08397555142174,
      "frontEndId": "2504",
      "status": null,
      "difficulty": "Easy",
      "title": "Concatenate the Name and the Profession",
      "titleSlug": "concatenate-the-name-and-the-profession",
      "topicTags": ["Database"]
   },
   {
      "acRate": 58.705701078582436,
      "frontEndId": "2505",
      "status": null,
      "difficulty": "Medium",
      "title": "Bitwise OR of All Subsequence Sums",
      "titleSlug": "bitwise-or-of-all-subsequence-sums",
      "topicTags": ["Array", "Math", "Bit Manipulation", "Brainteaser"]
   },
   {
      "acRate": 68.9265650484264,
      "frontEndId": "2506",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Pairs Of Similar Strings",
      "titleSlug": "count-pairs-of-similar-strings",
      "topicTags": ["Array", "Hash Table", "String"]
   },
   {
      "acRate": 47.79901169826543,
      "frontEndId": "2507",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest Value After Replacing With Sum of Prime Factors",
      "titleSlug": "smallest-value-after-replacing-with-sum-of-prime-factors",
      "topicTags": ["Math", "Number Theory"]
   },
   {
      "acRate": 31.20867495371595,
      "frontEndId": "2508",
      "status": null,
      "difficulty": "Hard",
      "title": "Add Edges to Make Degrees of All Nodes Even",
      "titleSlug": "add-edges-to-make-degrees-of-all-nodes-even",
      "topicTags": ["Hash Table", "Graph"]
   },
   {
      "acRate": 54.598352214212156,
      "frontEndId": "2509",
      "status": null,
      "difficulty": "Hard",
      "title": "Cycle Length Queries in a Tree",
      "titleSlug": "cycle-length-queries-in-a-tree",
      "topicTags": ["Tree", "Binary Tree"]
   },
   {
      "acRate": 50.57077625570776,
      "frontEndId": "2510",
      "status": null,
      "difficulty": "Medium",
      "title": "Check if There is a Path With Equal Number of 0's And 1's",
      "titleSlug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 37.566437392527746,
      "frontEndId": "2511",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Enemy Forts That Can Be Captured",
      "titleSlug": "maximum-enemy-forts-that-can-be-captured",
      "topicTags": ["Array", "Two Pointers"]
   },
   {
      "acRate": 45.06392731891862,
      "frontEndId": "2512",
      "status": null,
      "difficulty": "Medium",
      "title": "Reward Top K Students",
      "titleSlug": "reward-top-k-students",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 26.772371058866412,
      "frontEndId": "2513",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimize the Maximum of Two Arrays",
      "titleSlug": "minimize-the-maximum-of-two-arrays",
      "topicTags": ["Math", "Binary Search", "Number Theory"]
   },
   {
      "acRate": 32.420305123102736,
      "frontEndId": "2514",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Anagrams",
      "titleSlug": "count-anagrams",
      "topicTags": ["Hash Table", "Math", "String", "Combinatorics", "Counting"]
   },
   {
      "acRate": 48.201452822126406,
      "frontEndId": "2515",
      "status": null,
      "difficulty": "Easy",
      "title": "Shortest Distance to Target String in a Circular Array",
      "titleSlug": "shortest-distance-to-target-string-in-a-circular-array",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 34.03550778165516,
      "frontEndId": "2516",
      "status": null,
      "difficulty": "Medium",
      "title": "Take K of Each Character From Left and Right",
      "titleSlug": "take-k-of-each-character-from-left-and-right",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 62.885346710898936,
      "frontEndId": "2517",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Tastiness of Candy Basket",
      "titleSlug": "maximum-tastiness-of-candy-basket",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 30.956962911126663,
      "frontEndId": "2518",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Great Partitions",
      "titleSlug": "number-of-great-partitions",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 55.93919652551575,
      "frontEndId": "2519",
      "status": null,
      "difficulty": "Hard",
      "title": "Count the Number of K-Big Indices",
      "titleSlug": "count-the-number-of-k-big-indices",
      "topicTags": [
         "Array",
         "Binary Search",
         "Divide and Conquer",
         "Binary Indexed Tree",
         "Segment Tree",
         "Merge Sort",
         "Ordered Set"
      ]
   },
   {
      "acRate": 83.44171804991784,
      "frontEndId": "2520",
      "status": null,
      "difficulty": "Easy",
      "title": "Count the Digits That Divide a Number",
      "titleSlug": "count-the-digits-that-divide-a-number",
      "topicTags": ["Math"]
   },
   {
      "acRate": 50.092176979801216,
      "frontEndId": "2521",
      "status": null,
      "difficulty": "Medium",
      "title": "Distinct Prime Factors of Product of Array",
      "titleSlug": "distinct-prime-factors-of-product-of-array",
      "topicTags": ["Array", "Hash Table", "Math", "Number Theory"]
   },
   {
      "acRate": 45.8263567418497,
      "frontEndId": "2522",
      "status": null,
      "difficulty": "Medium",
      "title": "Partition String Into Substrings With Values at Most K",
      "titleSlug": "partition-string-into-substrings-with-values-at-most-k",
      "topicTags": ["String", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 36.64850396711595,
      "frontEndId": "2523",
      "status": null,
      "difficulty": "Medium",
      "title": "Closest Prime Numbers in Range",
      "titleSlug": "closest-prime-numbers-in-range",
      "topicTags": ["Math", "Number Theory"]
   },
   {
      "acRate": 40.32967032967033,
      "frontEndId": "2524",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Frequency Score of a Subarray",
      "titleSlug": "maximum-frequency-score-of-a-subarray",
      "topicTags": ["Array", "Hash Table", "Math", "Sliding Window"]
   },
   {
      "acRate": 34.31136441009217,
      "frontEndId": "2525",
      "status": null,
      "difficulty": "Easy",
      "title": "Categorize Box According to Criteria",
      "titleSlug": "categorize-box-according-to-criteria",
      "topicTags": ["Math"]
   },
   {
      "acRate": 46.82881773399015,
      "frontEndId": "2526",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Consecutive Integers from a Data Stream",
      "titleSlug": "find-consecutive-integers-from-a-data-stream",
      "topicTags": ["Hash Table", "Design", "Queue", "Counting", "Data Stream"]
   },
   {
      "acRate": 67.92222086339733,
      "frontEndId": "2527",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Xor-Beauty of Array",
      "titleSlug": "find-xor-beauty-of-array",
      "topicTags": ["Array", "Math", "Bit Manipulation"]
   },
   {
      "acRate": 31.74430020726519,
      "frontEndId": "2528",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximize the Minimum Powered City",
      "titleSlug": "maximize-the-minimum-powered-city",
      "topicTags": [
         "Array",
         "Binary Search",
         "Greedy",
         "Queue",
         "Sliding Window",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 71.60510068879972,
      "frontEndId": "2529",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Count of Positive Integer and Negative Integer",
      "titleSlug": "maximum-count-of-positive-integer-and-negative-integer",
      "topicTags": ["Array", "Binary Search", "Counting"]
   },
   {
      "acRate": 44.41551445501886,
      "frontEndId": "2530",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximal Score After Applying K Operations",
      "titleSlug": "maximal-score-after-applying-k-operations",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 25.889481261172897,
      "frontEndId": "2531",
      "status": null,
      "difficulty": "Medium",
      "title": "Make Number of Distinct Characters Equal",
      "titleSlug": "make-number-of-distinct-characters-equal",
      "topicTags": ["Hash Table", "String", "Counting"]
   },
   {
      "acRate": 46.38017808749516,
      "frontEndId": "2532",
      "status": null,
      "difficulty": "Hard",
      "title": "Time to Cross a Bridge",
      "titleSlug": "time-to-cross-a-bridge",
      "topicTags": ["Array", "Heap (Priority Queue)", "Simulation"]
   },
   {
      "acRate": 53.51906158357771,
      "frontEndId": "2533",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Good Binary Strings",
      "titleSlug": "number-of-good-binary-strings",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 54.1476903057905,
      "frontEndId": "2534",
      "status": null,
      "difficulty": "Hard",
      "title": "Time Taken to Cross the Door",
      "titleSlug": "time-taken-to-cross-the-door",
      "topicTags": ["Array", "Queue", "Simulation"]
   },
   {
      "acRate": 83.52962441493207,
      "frontEndId": "2535",
      "status": null,
      "difficulty": "Easy",
      "title": "Difference Between Element Sum and Digit Sum of an Array",
      "titleSlug": "difference-between-element-sum-and-digit-sum-of-an-array",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 48.22522982635342,
      "frontEndId": "2536",
      "status": null,
      "difficulty": "Medium",
      "title": "Increment Submatrices by One",
      "titleSlug": "increment-submatrices-by-one",
      "topicTags": ["Array", "Matrix", "Prefix Sum"]
   },
   {
      "acRate": 48.58850776164246,
      "frontEndId": "2537",
      "status": null,
      "difficulty": "Medium",
      "title": "Count the Number of Good Subarrays",
      "titleSlug": "count-the-number-of-good-subarrays",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 32.39723239723239,
      "frontEndId": "2538",
      "status": null,
      "difficulty": "Hard",
      "title": "Difference Between Maximum and Minimum Price Sum",
      "titleSlug": "difference-between-maximum-and-minimum-price-sum",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Tree",
         "Depth-First Search"
      ]
   },
   {
      "acRate": 60.366068285814855,
      "frontEndId": "2539",
      "status": null,
      "difficulty": "Medium",
      "title": "Count the Number of Good Subsequences",
      "titleSlug": "count-the-number-of-good-subsequences",
      "topicTags": ["Hash Table", "Math", "String", "Combinatorics", "Counting"]
   },
   {
      "acRate": 50.51788177862676,
      "frontEndId": "2540",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Common Value",
      "titleSlug": "minimum-common-value",
      "topicTags": ["Array", "Hash Table", "Two Pointers", "Binary Search"]
   },
   {
      "acRate": 31.00036411417354,
      "frontEndId": "2541",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Operations to Make Array Equal II",
      "titleSlug": "minimum-operations-to-make-array-equal-ii",
      "topicTags": ["Array", "Math", "Greedy"]
   },
   {
      "acRate": 54.81644365958025,
      "frontEndId": "2542",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Subsequence Score",
      "titleSlug": "maximum-subsequence-score",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 41.332727154640516,
      "frontEndId": "2543",
      "status": null,
      "difficulty": "Hard",
      "title": "Check if Point Is Reachable",
      "titleSlug": "check-if-point-is-reachable",
      "topicTags": ["Math", "Number Theory"]
   },
   {
      "acRate": 68.14092060181737,
      "frontEndId": "2544",
      "status": null,
      "difficulty": "Easy",
      "title": "Alternating Digit Sum",
      "titleSlug": "alternating-digit-sum",
      "topicTags": ["Math"]
   },
   {
      "acRate": 84.63007159904534,
      "frontEndId": "2545",
      "status": null,
      "difficulty": "Medium",
      "title": "Sort the Students by Their Kth Score",
      "titleSlug": "sort-the-students-by-their-kth-score",
      "topicTags": ["Array", "Sorting", "Matrix"]
   },
   {
      "acRate": 40.450524826040805,
      "frontEndId": "2546",
      "status": null,
      "difficulty": "Medium",
      "title": "Apply Bitwise Operations to Make Strings Equal",
      "titleSlug": "apply-bitwise-operations-to-make-strings-equal",
      "topicTags": ["String", "Bit Manipulation"]
   },
   {
      "acRate": 38.796292764788895,
      "frontEndId": "2547",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Cost to Split an Array",
      "titleSlug": "minimum-cost-to-split-an-array",
      "topicTags": ["Array", "Hash Table", "Dynamic Programming", "Counting"]
   },
   {
      "acRate": 65.78599735799207,
      "frontEndId": "2548",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Price to Fill a Bag",
      "titleSlug": "maximum-price-to-fill-a-bag",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 59.18208620471359,
      "frontEndId": "2549",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Distinct Numbers on Board",
      "titleSlug": "count-distinct-numbers-on-board",
      "topicTags": ["Array", "Hash Table", "Math", "Simulation"]
   },
   {
      "acRate": 26.86299855165003,
      "frontEndId": "2550",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Collisions of Monkeys on a Polygon",
      "titleSlug": "count-collisions-of-monkeys-on-a-polygon",
      "topicTags": ["Math", "Recursion"]
   },
   {
      "acRate": 67.13428589101255,
      "frontEndId": "2551",
      "status": null,
      "difficulty": "Hard",
      "title": "Put Marbles in Bags",
      "titleSlug": "put-marbles-in-bags",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 32.00337054982094,
      "frontEndId": "2552",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Increasing Quadruplets",
      "titleSlug": "count-increasing-quadruplets",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Binary Indexed Tree",
         "Enumeration",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 78.1625613517908,
      "frontEndId": "2553",
      "status": null,
      "difficulty": "Easy",
      "title": "Separate the Digits in an Array",
      "titleSlug": "separate-the-digits-in-an-array",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 52.47163695299838,
      "frontEndId": "2554",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Integers to Choose From a Range I",
      "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-i",
      "topicTags": ["Array", "Hash Table", "Binary Search", "Greedy", "Sorting"]
   },
   {
      "acRate": 31.826755927062916,
      "frontEndId": "2555",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximize Win From Two Segments",
      "titleSlug": "maximize-win-from-two-segments",
      "topicTags": ["Array", "Binary Search", "Sliding Window"]
   },
   {
      "acRate": 27.403320409583458,
      "frontEndId": "2556",
      "status": null,
      "difficulty": "Medium",
      "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
      "titleSlug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 41.921072226358895,
      "frontEndId": "2557",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Integers to Choose From a Range II",
      "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-ii",
      "topicTags": ["Array", "Binary Search", "Greedy", "Sorting"]
   },
   {
      "acRate": 65.73441617813155,
      "frontEndId": "2558",
      "status": null,
      "difficulty": "Easy",
      "title": "Take Gifts From the Richest Pile",
      "titleSlug": "take-gifts-from-the-richest-pile",
      "topicTags": ["Array", "Heap (Priority Queue)", "Simulation"]
   },
   {
      "acRate": 50.9949981753,
      "frontEndId": "2559",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Vowel Strings in Ranges",
      "titleSlug": "count-vowel-strings-in-ranges",
      "topicTags": ["Array", "String", "Prefix Sum"]
   },
   {
      "acRate": 41.67194609226516,
      "frontEndId": "2560",
      "status": null,
      "difficulty": "Medium",
      "title": "House Robber IV",
      "titleSlug": "house-robber-iv",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 33.258104226508,
      "frontEndId": "2561",
      "status": null,
      "difficulty": "Hard",
      "title": "Rearranging Fruits",
      "titleSlug": "rearranging-fruits",
      "topicTags": ["Array", "Hash Table", "Greedy"]
   },
   {
      "acRate": 69.01141371090081,
      "frontEndId": "2562",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Array Concatenation Value",
      "titleSlug": "find-the-array-concatenation-value",
      "topicTags": ["Array", "Two Pointers", "Simulation"]
   },
   {
      "acRate": 32.562034262886996,
      "frontEndId": "2563",
      "status": null,
      "difficulty": "Medium",
      "title": "Count the Number of Fair Pairs",
      "titleSlug": "count-the-number-of-fair-pairs",
      "topicTags": ["Array", "Two Pointers", "Binary Search", "Sorting"]
   },
   {
      "acRate": 32.998734214477054,
      "frontEndId": "2564",
      "status": null,
      "difficulty": "Medium",
      "title": "Substring XOR Queries",
      "titleSlug": "substring-xor-queries",
      "topicTags": ["Array", "Hash Table", "String", "Bit Manipulation"]
   },
   {
      "acRate": 30.50602409638554,
      "frontEndId": "2565",
      "status": null,
      "difficulty": "Hard",
      "title": "Subsequence With the Minimum Score",
      "titleSlug": "subsequence-with-the-minimum-score",
      "topicTags": ["Two Pointers", "String", "Binary Search"]
   },
   {
      "acRate": 58.7019033273997,
      "frontEndId": "2566",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Difference by Remapping a Digit",
      "titleSlug": "maximum-difference-by-remapping-a-digit",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 47.24896836313617,
      "frontEndId": "2567",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Score by Changing Two Elements",
      "titleSlug": "minimum-score-by-changing-two-elements",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 56.60805922436275,
      "frontEndId": "2568",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Impossible OR",
      "titleSlug": "minimum-impossible-or",
      "topicTags": ["Array", "Bit Manipulation", "Brainteaser"]
   },
   {
      "acRate": 26.26188734455011,
      "frontEndId": "2569",
      "status": null,
      "difficulty": "Hard",
      "title": "Handling Sum Queries After Update",
      "titleSlug": "handling-sum-queries-after-update",
      "topicTags": ["Array", "Segment Tree"]
   },
   {
      "acRate": 72.8902482586176,
      "frontEndId": "2570",
      "status": null,
      "difficulty": "Easy",
      "title": "Merge Two 2D Arrays by Summing Values",
      "titleSlug": "merge-two-2d-arrays-by-summing-values",
      "topicTags": ["Array", "Hash Table", "Two Pointers"]
   },
   {
      "acRate": 50.90036633816625,
      "frontEndId": "2571",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Operations to Reduce an Integer to 0",
      "titleSlug": "minimum-operations-to-reduce-an-integer-to-0",
      "topicTags": ["Dynamic Programming", "Greedy", "Bit Manipulation"]
   },
   {
      "acRate": 21.82294145644931,
      "frontEndId": "2572",
      "status": null,
      "difficulty": "Medium",
      "title": "Count the Number of Square-Free Subsets",
      "titleSlug": "count-the-number-of-square-free-subsets",
      "topicTags": [
         "Array",
         "Math",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 31.35203677286416,
      "frontEndId": "2573",
      "status": null,
      "difficulty": "Hard",
      "title": "Find the String with LCP",
      "titleSlug": "find-the-string-with-lcp",
      "topicTags": [
         "Array",
         "String",
         "Dynamic Programming",
         "Greedy",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 85.94997033436047,
      "frontEndId": "2574",
      "status": null,
      "difficulty": "Easy",
      "title": "Left and Right Sum Differences",
      "titleSlug": "left-and-right-sum-differences",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 31.735692870977157,
      "frontEndId": "2575",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Divisibility Array of a String",
      "titleSlug": "find-the-divisibility-array-of-a-string",
      "topicTags": ["Array", "Math", "String"]
   },
   {
      "acRate": 37.63943157756871,
      "frontEndId": "2576",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Maximum Number of Marked Indices",
      "titleSlug": "find-the-maximum-number-of-marked-indices",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Greedy",
         "Sorting"
      ]
   },
   {
      "acRate": 34.38845659892725,
      "frontEndId": "2577",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time to Visit a Cell In a Grid",
      "titleSlug": "minimum-time-to-visit-a-cell-in-a-grid",
      "topicTags": [
         "Array",
         "Breadth-First Search",
         "Graph",
         "Heap (Priority Queue)",
         "Matrix",
         "Shortest Path"
      ]
   },
   {
      "acRate": 69.0863579474343,
      "frontEndId": "2578",
      "status": null,
      "difficulty": "Easy",
      "title": "Split With Minimum Sum",
      "titleSlug": "split-with-minimum-sum",
      "topicTags": ["Math", "Greedy", "Sorting"]
   },
   {
      "acRate": 57.08781956421901,
      "frontEndId": "2579",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Total Number of Colored Cells",
      "titleSlug": "count-total-number-of-colored-cells",
      "topicTags": ["Math"]
   },
   {
      "acRate": 35.007023368663006,
      "frontEndId": "2580",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Ways to Group Overlapping Ranges",
      "titleSlug": "count-ways-to-group-overlapping-ranges",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 45.115705614567524,
      "frontEndId": "2581",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Number of Possible Root Nodes",
      "titleSlug": "count-number-of-possible-root-nodes",
      "topicTags": [
         "Hash Table",
         "Dynamic Programming",
         "Tree",
         "Depth-First Search"
      ]
   },
   {
      "acRate": 45.41341257634357,
      "frontEndId": "2582",
      "status": null,
      "difficulty": "Easy",
      "title": "Pass the Pillow",
      "titleSlug": "pass-the-pillow",
      "topicTags": ["Math", "Simulation"]
   },
   {
      "acRate": 46.72111419540138,
      "frontEndId": "2583",
      "status": null,
      "difficulty": "Medium",
      "title": "Kth Largest Sum in a Binary Tree",
      "titleSlug": "kth-largest-sum-in-a-binary-tree",
      "topicTags": ["Binary Search", "Tree", "Breadth-First Search"]
   },
   {
      "acRate": 22.119925479831895,
      "frontEndId": "2584",
      "status": null,
      "difficulty": "Hard",
      "title": "Split the Array to Make Coprime Products",
      "titleSlug": "split-the-array-to-make-coprime-products",
      "topicTags": ["Array", "Hash Table", "Math", "Number Theory"]
   },
   {
      "acRate": 56.930507557147024,
      "frontEndId": "2585",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Ways to Earn Points",
      "titleSlug": "number-of-ways-to-earn-points",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 74.0470208482388,
      "frontEndId": "2586",
      "status": null,
      "difficulty": "Easy",
      "title": "Count the Number of Vowel Strings in Range",
      "titleSlug": "count-the-number-of-vowel-strings-in-range",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 40.05064893953783,
      "frontEndId": "2587",
      "status": null,
      "difficulty": "Medium",
      "title": "Rearrange Array to Maximize Prefix Score",
      "titleSlug": "rearrange-array-to-maximize-prefix-score",
      "topicTags": ["Array", "Greedy", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 49.15842556814461,
      "frontEndId": "2588",
      "status": null,
      "difficulty": "Medium",
      "title": "Count the Number of Beautiful Subarrays",
      "titleSlug": "count-the-number-of-beautiful-subarrays",
      "topicTags": ["Array", "Hash Table", "Bit Manipulation", "Prefix Sum"]
   },
   {
      "acRate": 37.04704463208685,
      "frontEndId": "2589",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time to Complete All Tasks",
      "titleSlug": "minimum-time-to-complete-all-tasks",
      "topicTags": ["Array", "Binary Search", "Stack", "Greedy", "Sorting"]
   },
   {
      "acRate": 59.4259988745076,
      "frontEndId": "2590",
      "status": null,
      "difficulty": "Medium",
      "title": "Design a Todo List",
      "titleSlug": "design-a-todo-list",
      "topicTags": ["Array", "Hash Table", "String", "Design", "Sorting"]
   },
   {
      "acRate": 18.814735445686004,
      "frontEndId": "2591",
      "status": null,
      "difficulty": "Easy",
      "title": "Distribute Money to Maximum Children",
      "titleSlug": "distribute-money-to-maximum-children",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 56.26178856920452,
      "frontEndId": "2592",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximize Greatness of an Array",
      "titleSlug": "maximize-greatness-of-an-array",
      "topicTags": ["Array", "Two Pointers", "Greedy", "Sorting"]
   },
   {
      "acRate": 51.96871628910464,
      "frontEndId": "2593",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Score of an Array After Marking All Elements",
      "titleSlug": "find-score-of-an-array-after-marking-all-elements",
      "topicTags": ["Array", "Sorting", "Heap (Priority Queue)", "Simulation"]
   },
   {
      "acRate": 42.54132440928912,
      "frontEndId": "2594",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Time to Repair Cars",
      "titleSlug": "minimum-time-to-repair-cars",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 71.04440275171983,
      "frontEndId": "2595",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Even and Odd Bits",
      "titleSlug": "number-of-even-and-odd-bits",
      "topicTags": ["Bit Manipulation"]
   },
   {
      "acRate": 56.66439686262642,
      "frontEndId": "2596",
      "status": null,
      "difficulty": "Medium",
      "title": "Check Knight Tour Configuration",
      "titleSlug": "check-knight-tour-configuration",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Matrix",
         "Simulation"
      ]
   },
   {
      "acRate": 30.098643882381786,
      "frontEndId": "2597",
      "status": null,
      "difficulty": "Medium",
      "title": "The Number of Beautiful Subsets",
      "titleSlug": "the-number-of-beautiful-subsets",
      "topicTags": ["Array", "Dynamic Programming", "Backtracking"]
   },
   {
      "acRate": 38.60466551468773,
      "frontEndId": "2598",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest Missing Non-negative Integer After Operations",
      "titleSlug": "smallest-missing-non-negative-integer-after-operations",
      "topicTags": ["Array", "Hash Table", "Math", "Greedy"]
   },
   {
      "acRate": 51.174412793603196,
      "frontEndId": "2599",
      "status": null,
      "difficulty": "Medium",
      "title": "Make the Prefix Sum Non-negative",
      "titleSlug": "make-the-prefix-sum-non-negative",
      "topicTags": ["Array", "Greedy", "Heap (Priority Queue)"]
   },
   {
      "acRate": 61.0549899768091,
      "frontEndId": "2600",
      "status": null,
      "difficulty": "Easy",
      "title": "K Items With the Maximum Sum",
      "titleSlug": "k-items-with-the-maximum-sum",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 36.88678289073586,
      "frontEndId": "2601",
      "status": null,
      "difficulty": "Medium",
      "title": "Prime Subtraction Operation",
      "titleSlug": "prime-subtraction-operation",
      "topicTags": ["Array", "Math", "Binary Search", "Greedy", "Number Theory"]
   },
   {
      "acRate": 34.56486636300099,
      "frontEndId": "2602",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Operations to Make All Array Elements Equal",
      "titleSlug": "minimum-operations-to-make-all-array-elements-equal",
      "topicTags": ["Array", "Binary Search", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 35.79849946409432,
      "frontEndId": "2603",
      "status": null,
      "difficulty": "Hard",
      "title": "Collect Coins in a Tree",
      "titleSlug": "collect-coins-in-a-tree",
      "topicTags": ["Array", "Tree", "Graph", "Topological Sort"]
   },
   {
      "acRate": 45.319280843149414,
      "frontEndId": "2604",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time to Eat All Grains",
      "titleSlug": "minimum-time-to-eat-all-grains",
      "topicTags": ["Array", "Binary Search", "Sorting"]
   },
   {
      "acRate": 53.085404864449494,
      "frontEndId": "2605",
      "status": null,
      "difficulty": "Easy",
      "title": "Form Smallest Number From Two Digit Arrays",
      "titleSlug": "form-smallest-number-from-two-digit-arrays",
      "topicTags": ["Array", "Hash Table", "Enumeration"]
   },
   {
      "acRate": 55.73752682039165,
      "frontEndId": "2606",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Substring With Maximum Cost",
      "titleSlug": "find-the-substring-with-maximum-cost",
      "topicTags": ["Array", "Hash Table", "String", "Dynamic Programming"]
   },
   {
      "acRate": 34.13183754375606,
      "frontEndId": "2607",
      "status": null,
      "difficulty": "Medium",
      "title": "Make K-Subarray Sums Equal",
      "titleSlug": "make-k-subarray-sums-equal",
      "topicTags": ["Array", "Math", "Sorting", "Number Theory"]
   },
   {
      "acRate": 36.21345857964208,
      "frontEndId": "2608",
      "status": null,
      "difficulty": "Hard",
      "title": "Shortest Cycle in a Graph",
      "titleSlug": "shortest-cycle-in-a-graph",
      "topicTags": ["Breadth-First Search", "Graph"]
   },
   {
      "acRate": 45.49180327868852,
      "frontEndId": "2609",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Longest Balanced Substring of a Binary String",
      "titleSlug": "find-the-longest-balanced-substring-of-a-binary-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 83.3641450984311,
      "frontEndId": "2610",
      "status": null,
      "difficulty": "Medium",
      "title": "Convert an Array Into a 2D Array With Conditions",
      "titleSlug": "convert-an-array-into-a-2d-array-with-conditions",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 43.441422358428916,
      "frontEndId": "2611",
      "status": null,
      "difficulty": "Medium",
      "title": "Mice and Cheese",
      "titleSlug": "mice-and-cheese",
      "topicTags": ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"]
   },
   {
      "acRate": 14.684838160136286,
      "frontEndId": "2612",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Reverse Operations",
      "titleSlug": "minimum-reverse-operations",
      "topicTags": ["Array", "Breadth-First Search", "Ordered Set"]
   },
   {
      "acRate": 46.11231101511879,
      "frontEndId": "2613",
      "status": null,
      "difficulty": "Hard",
      "title": "Beautiful Pairs",
      "titleSlug": "beautiful-pairs",
      "topicTags": [
         "Array",
         "Math",
         "Divide and Conquer",
         "Geometry",
         "Sorting",
         "Ordered Set"
      ]
   },
   {
      "acRate": 32.67387850514577,
      "frontEndId": "2614",
      "status": null,
      "difficulty": "Easy",
      "title": "Prime In Diagonal",
      "titleSlug": "prime-in-diagonal",
      "topicTags": ["Array", "Math", "Matrix", "Number Theory"]
   },
   {
      "acRate": 29.866386194538585,
      "frontEndId": "2615",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum of Distances",
      "titleSlug": "sum-of-distances",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 44.267825410928474,
      "frontEndId": "2616",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimize the Maximum Difference of Pairs",
      "titleSlug": "minimize-the-maximum-difference-of-pairs",
      "topicTags": ["Array", "Binary Search", "Greedy"]
   },
   {
      "acRate": 24.869164747749632,
      "frontEndId": "2617",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Number of Visited Cells in a Grid",
      "titleSlug": "minimum-number-of-visited-cells-in-a-grid",
      "topicTags": [
         "Array",
         "Binary Search",
         "Dynamic Programming",
         "Stack",
         "Union Find",
         "Binary Indexed Tree",
         "Segment Tree"
      ]
   },
   {
      "acRate": 28.480537584444367,
      "frontEndId": "2618",
      "status": null,
      "difficulty": "Medium",
      "title": "Check if Object Instance of Class",
      "titleSlug": "check-if-object-instance-of-class",
      "topicTags": []
   },
   {
      "acRate": 71.3737053139643,
      "frontEndId": "2619",
      "status": null,
      "difficulty": "Easy",
      "title": "Array Prototype Last",
      "titleSlug": "array-prototype-last",
      "topicTags": []
   },
   {
      "acRate": 79.58623875727258,
      "frontEndId": "2620",
      "status": null,
      "difficulty": "Easy",
      "title": "Counter",
      "titleSlug": "counter",
      "topicTags": []
   },
   {
      "acRate": 84.8993585769771,
      "frontEndId": "2621",
      "status": null,
      "difficulty": "Easy",
      "title": "Sleep",
      "titleSlug": "sleep",
      "topicTags": []
   },
   {
      "acRate": 75.75062625692411,
      "frontEndId": "2622",
      "status": null,
      "difficulty": "Medium",
      "title": "Cache With Time Limit",
      "titleSlug": "cache-with-time-limit",
      "topicTags": []
   },
   {
      "acRate": 61.71639995187101,
      "frontEndId": "2623",
      "status": null,
      "difficulty": "Medium",
      "title": "Memoize",
      "titleSlug": "memoize",
      "topicTags": []
   },
   {
      "acRate": 65.25299181188326,
      "frontEndId": "2624",
      "status": null,
      "difficulty": "Medium",
      "title": "Snail Traversal",
      "titleSlug": "snail-traversal",
      "topicTags": []
   },
   {
      "acRate": 66.21319097640779,
      "frontEndId": "2625",
      "status": null,
      "difficulty": "Medium",
      "title": "Flatten Deeply Nested Array",
      "titleSlug": "flatten-deeply-nested-array",
      "topicTags": []
   },
   {
      "acRate": 83.6579716748301,
      "frontEndId": "2626",
      "status": null,
      "difficulty": "Easy",
      "title": "Array Reduce Transformation",
      "titleSlug": "array-reduce-transformation",
      "topicTags": []
   },
   {
      "acRate": 92.0051606459131,
      "frontEndId": "2627",
      "status": null,
      "difficulty": "Medium",
      "title": "Debounce",
      "titleSlug": "debounce",
      "topicTags": []
   },
   {
      "acRate": 38.14682372738746,
      "frontEndId": "2628",
      "status": null,
      "difficulty": "Medium",
      "title": "JSON Deep Equal",
      "titleSlug": "json-deep-equal",
      "topicTags": []
   },
   {
      "acRate": 85.5748308444365,
      "frontEndId": "2629",
      "status": null,
      "difficulty": "Easy",
      "title": "Function Composition",
      "titleSlug": "function-composition",
      "topicTags": []
   },
   {
      "acRate": 31.677739112095328,
      "frontEndId": "2630",
      "status": null,
      "difficulty": "Hard",
      "title": "Memoize II",
      "titleSlug": "memoize-ii",
      "topicTags": []
   },
   {
      "acRate": 83.22511785110736,
      "frontEndId": "2631",
      "status": null,
      "difficulty": "Medium",
      "title": "Group By",
      "titleSlug": "group-by",
      "topicTags": []
   },
   {
      "acRate": 89.27389761174277,
      "frontEndId": "2632",
      "status": null,
      "difficulty": "Hard",
      "title": "Curry",
      "titleSlug": "curry",
      "topicTags": []
   },
   {
      "acRate": 77.57912355447353,
      "frontEndId": "2633",
      "status": null,
      "difficulty": "Medium",
      "title": "Convert Object to JSON String",
      "titleSlug": "convert-object-to-json-string",
      "topicTags": []
   },
   {
      "acRate": 83.46656758991814,
      "frontEndId": "2634",
      "status": null,
      "difficulty": "Easy",
      "title": "Filter Elements from Array",
      "titleSlug": "filter-elements-from-array",
      "topicTags": []
   },
   {
      "acRate": 85.62564868779725,
      "frontEndId": "2635",
      "status": null,
      "difficulty": "Easy",
      "title": "Apply Transform Over Each Element in Array",
      "titleSlug": "apply-transform-over-each-element-in-array",
      "topicTags": []
   },
   {
      "acRate": 80.77569094518246,
      "frontEndId": "2636",
      "status": null,
      "difficulty": "Medium",
      "title": "Promise Pool",
      "titleSlug": "promise-pool",
      "topicTags": []
   },
   {
      "acRate": 81.72548772018435,
      "frontEndId": "2637",
      "status": null,
      "difficulty": "Medium",
      "title": "Promise Time Limit",
      "titleSlug": "promise-time-limit",
      "topicTags": []
   },
   {
      "acRate": 50.19762845849802,
      "frontEndId": "2638",
      "status": null,
      "difficulty": "Medium",
      "title": "Count the Number of K-Free Subsets",
      "titleSlug": "count-the-number-of-k-free-subsets",
      "topicTags": ["Array", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 65.968010464978,
      "frontEndId": "2639",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Width of Columns of a Grid",
      "titleSlug": "find-the-width-of-columns-of-a-grid",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 69.82339548335487,
      "frontEndId": "2640",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Score of All Prefixes of an Array",
      "titleSlug": "find-the-score-of-all-prefixes-of-an-array",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 67.75129715944068,
      "frontEndId": "2641",
      "status": null,
      "difficulty": "Medium",
      "title": "Cousins in Binary Tree II",
      "titleSlug": "cousins-in-binary-tree-ii",
      "topicTags": [
         "Hash Table",
         "Tree",
         "Depth-First Search",
         "Breadth-First Search",
         "Binary Tree"
      ]
   },
   {
      "acRate": 58.24832328242123,
      "frontEndId": "2642",
      "status": null,
      "difficulty": "Hard",
      "title": "Design Graph With Shortest Path Calculator",
      "titleSlug": "design-graph-with-shortest-path-calculator",
      "topicTags": ["Graph", "Design", "Heap (Priority Queue)", "Shortest Path"]
   },
   {
      "acRate": 75.54471606437897,
      "frontEndId": "2643",
      "status": null,
      "difficulty": "Easy",
      "title": "Row With Maximum Ones",
      "titleSlug": "row-with-maximum-ones",
      "topicTags": ["Array", "Matrix"]
   },
   {
      "acRate": 48.16847407296033,
      "frontEndId": "2644",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Maximum Divisibility Score",
      "titleSlug": "find-the-maximum-divisibility-score",
      "topicTags": ["Array"]
   },
   {
      "acRate": 49.46238839522406,
      "frontEndId": "2645",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Additions to Make Valid String",
      "titleSlug": "minimum-additions-to-make-valid-string",
      "topicTags": ["String", "Dynamic Programming", "Stack", "Greedy"]
   },
   {
      "acRate": 43.03907695656907,
      "frontEndId": "2646",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimize the Total Price of the Trips",
      "titleSlug": "minimize-the-total-price-of-the-trips",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Graph"
      ]
   },
   {
      "acRate": 68.84816753926701,
      "frontEndId": "2647",
      "status": null,
      "difficulty": "Hard",
      "title": "Color the Triangle Red",
      "titleSlug": "color-the-triangle-red",
      "topicTags": ["Array", "Math"]
   },
   {
      "acRate": 83.72763419483101,
      "frontEndId": "2648",
      "status": null,
      "difficulty": "Easy",
      "title": "Generate Fibonacci Sequence",
      "titleSlug": "generate-fibonacci-sequence",
      "topicTags": []
   },
   {
      "acRate": 81.00911634624065,
      "frontEndId": "2649",
      "status": null,
      "difficulty": "Medium",
      "title": "Nested Array Generator",
      "titleSlug": "nested-array-generator",
      "topicTags": []
   },
   {
      "acRate": 49.69644405897659,
      "frontEndId": "2650",
      "status": null,
      "difficulty": "Hard",
      "title": "Design Cancellable Function",
      "titleSlug": "design-cancellable-function",
      "topicTags": []
   },
   {
      "acRate": 79.0124633151656,
      "frontEndId": "2651",
      "status": null,
      "difficulty": "Easy",
      "title": "Calculate Delayed Arrival Time",
      "titleSlug": "calculate-delayed-arrival-time",
      "topicTags": ["Math"]
   },
   {
      "acRate": 84.77379676652845,
      "frontEndId": "2652",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum Multiples",
      "titleSlug": "sum-multiples",
      "topicTags": ["Math"]
   },
   {
      "acRate": 31.90606668724915,
      "frontEndId": "2653",
      "status": null,
      "difficulty": "Medium",
      "title": "Sliding Subarray Beauty",
      "titleSlug": "sliding-subarray-beauty",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 34.69298655939127,
      "frontEndId": "2654",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Operations to Make All Array Elements Equal to 1",
      "titleSlug": "minimum-number-of-operations-to-make-all-array-elements-equal-to-1",
      "topicTags": ["Array", "Math", "Number Theory"]
   },
   {
      "acRate": 54.208084824387015,
      "frontEndId": "2655",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Maximal Uncovered Ranges",
      "titleSlug": "find-maximal-uncovered-ranges",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 81.51910727444994,
      "frontEndId": "2656",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Sum With Exactly K Elements ",
      "titleSlug": "maximum-sum-with-exactly-k-elements",
      "topicTags": ["Array", "Greedy"]
   },
   {
      "acRate": 79.84227305777728,
      "frontEndId": "2657",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Prefix Common Array of Two Arrays",
      "titleSlug": "find-the-prefix-common-array-of-two-arrays",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 58.6767863082459,
      "frontEndId": "2658",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Fish in a Grid",
      "titleSlug": "maximum-number-of-fish-in-a-grid",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 24.281592274172652,
      "frontEndId": "2659",
      "status": null,
      "difficulty": "Hard",
      "title": "Make Array Empty",
      "titleSlug": "make-array-empty",
      "topicTags": [
         "Array",
         "Binary Search",
         "Greedy",
         "Binary Indexed Tree",
         "Segment Tree",
         "Sorting",
         "Ordered Set"
      ]
   },
   {
      "acRate": 33.90760452101394,
      "frontEndId": "2660",
      "status": null,
      "difficulty": "Easy",
      "title": "Determine the Winner of a Bowling Game",
      "titleSlug": "determine-the-winner-of-a-bowling-game",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 49.53355092390327,
      "frontEndId": "2661",
      "status": null,
      "difficulty": "Medium",
      "title": "First Completely Painted Row or Column",
      "titleSlug": "first-completely-painted-row-or-column",
      "topicTags": ["Array", "Hash Table", "Matrix"]
   },
   {
      "acRate": 35.803263791601985,
      "frontEndId": "2662",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Cost of a Path With Special Roads",
      "titleSlug": "minimum-cost-of-a-path-with-special-roads",
      "topicTags": ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"]
   },
   {
      "acRate": 36.43802228412256,
      "frontEndId": "2663",
      "status": null,
      "difficulty": "Hard",
      "title": "Lexicographically Smallest Beautiful String",
      "titleSlug": "lexicographically-smallest-beautiful-string",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 69.23728813559322,
      "frontEndId": "2664",
      "status": null,
      "difficulty": "Medium",
      "title": "The Knight’s Tour",
      "titleSlug": "the-knights-tour",
      "topicTags": ["Array", "Backtracking", "Matrix"]
   },
   {
      "acRate": 80.2718333696747,
      "frontEndId": "2665",
      "status": null,
      "difficulty": "Easy",
      "title": "Counter II",
      "titleSlug": "counter-ii",
      "topicTags": []
   },
   {
      "acRate": 86.46206855105271,
      "frontEndId": "2666",
      "status": null,
      "difficulty": "Easy",
      "title": "Allow One Function Call",
      "titleSlug": "allow-one-function-call",
      "topicTags": []
   },
   {
      "acRate": 79.85534165817022,
      "frontEndId": "2667",
      "status": "ac",
      "difficulty": "Easy",
      "title": "Create Hello World Function",
      "titleSlug": "create-hello-world-function",
      "topicTags": []
   },
   {
      "acRate": 64.39929328621908,
      "frontEndId": "2668",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Latest Salaries",
      "titleSlug": "find-latest-salaries",
      "topicTags": ["Database"]
   },
   {
      "acRate": 67.34006734006735,
      "frontEndId": "2669",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Artist Occurrences On Spotify Ranking List",
      "titleSlug": "count-artist-occurrences-on-spotify-ranking-list",
      "topicTags": ["Database"]
   },
   {
      "acRate": 76.50038659450236,
      "frontEndId": "2670",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Distinct Difference Array",
      "titleSlug": "find-the-distinct-difference-array",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 28.810736363345185,
      "frontEndId": "2671",
      "status": null,
      "difficulty": "Medium",
      "title": "Frequency Tracker",
      "titleSlug": "frequency-tracker",
      "topicTags": ["Hash Table", "Design"]
   },
   {
      "acRate": 54.154054484626414,
      "frontEndId": "2672",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Adjacent Elements With the Same Color",
      "titleSlug": "number-of-adjacent-elements-with-the-same-color",
      "topicTags": ["Array"]
   },
   {
      "acRate": 58.26138595769951,
      "frontEndId": "2673",
      "status": null,
      "difficulty": "Medium",
      "title": "Make Costs of Paths Equal in a Binary Tree",
      "titleSlug": "make-costs-of-paths-equal-in-a-binary-tree",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Greedy",
         "Tree",
         "Binary Tree"
      ]
   },
   {
      "acRate": 74.61300309597523,
      "frontEndId": "2674",
      "status": null,
      "difficulty": "Medium",
      "title": "Split a Circular Linked List",
      "titleSlug": "split-a-circular-linked-list",
      "topicTags": []
   },
   {
      "acRate": 69.62872793670115,
      "frontEndId": "2675",
      "status": null,
      "difficulty": "Hard",
      "title": "Array of Objects to Matrix",
      "titleSlug": "array-of-objects-to-matrix",
      "topicTags": []
   },
   {
      "acRate": 85.64721663313213,
      "frontEndId": "2676",
      "status": null,
      "difficulty": "Medium",
      "title": "Throttle",
      "titleSlug": "throttle",
      "topicTags": []
   },
   {
      "acRate": 82.73258252928458,
      "frontEndId": "2677",
      "status": null,
      "difficulty": "Easy",
      "title": "Chunk Array",
      "titleSlug": "chunk-array",
      "topicTags": []
   },
   {
      "acRate": 75.77871480481122,
      "frontEndId": "2678",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Senior Citizens",
      "titleSlug": "number-of-senior-citizens",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 58.69205860374539,
      "frontEndId": "2679",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum in a Matrix",
      "titleSlug": "sum-in-a-matrix",
      "topicTags": [
         "Array",
         "Sorting",
         "Heap (Priority Queue)",
         "Matrix",
         "Simulation"
      ]
   },
   {
      "acRate": 39.70464431036902,
      "frontEndId": "2680",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum OR",
      "titleSlug": "maximum-or",
      "topicTags": ["Array", "Greedy", "Bit Manipulation", "Prefix Sum"]
   },
   {
      "acRate": 29.573448453404094,
      "frontEndId": "2681",
      "status": null,
      "difficulty": "Hard",
      "title": "Power of Heroes",
      "titleSlug": "power-of-heroes",
      "topicTags": ["Array", "Math", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 48.196316493466405,
      "frontEndId": "2682",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Losers of the Circular Game",
      "titleSlug": "find-the-losers-of-the-circular-game",
      "topicTags": ["Array", "Hash Table", "Simulation"]
   },
   {
      "acRate": 60.85133827797484,
      "frontEndId": "2683",
      "status": null,
      "difficulty": "Medium",
      "title": "Neighboring Bitwise XOR",
      "titleSlug": "neighboring-bitwise-xor",
      "topicTags": ["Array", "Bit Manipulation"]
   },
   {
      "acRate": 44.71084149251734,
      "frontEndId": "2684",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Moves in a Grid",
      "titleSlug": "maximum-number-of-moves-in-a-grid",
      "topicTags": ["Array", "Dynamic Programming", "Matrix"]
   },
   {
      "acRate": 64.77257064093729,
      "frontEndId": "2685",
      "status": null,
      "difficulty": "Medium",
      "title": "Count the Number of Complete Components",
      "titleSlug": "count-the-number-of-complete-components",
      "topicTags": ["Depth-First Search", "Breadth-First Search", "Graph"]
   },
   {
      "acRate": 57.305287094940304,
      "frontEndId": "2686",
      "status": null,
      "difficulty": "Medium",
      "title": "Immediate Food Delivery III",
      "titleSlug": "immediate-food-delivery-iii",
      "topicTags": ["Database"]
   },
   {
      "acRate": 77.64705882352942,
      "frontEndId": "2687",
      "status": null,
      "difficulty": "Easy",
      "title": "Bikes Last Time Used ",
      "titleSlug": "bikes-last-time-used",
      "topicTags": ["Database"]
   },
   {
      "acRate": 38.73670641314856,
      "frontEndId": "2688",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Active Users",
      "titleSlug": "find-active-users",
      "topicTags": ["Database"]
   },
   {
      "acRate": 74.73309608540926,
      "frontEndId": "2689",
      "status": null,
      "difficulty": "Easy",
      "title": "Extract Kth Character From The Rope Tree",
      "titleSlug": "extract-kth-character-from-the-rope-tree",
      "topicTags": ["Tree", "Depth-First Search"]
   },
   {
      "acRate": 91.81818181818183,
      "frontEndId": "2690",
      "status": null,
      "difficulty": "Easy",
      "title": "Infinite Method Object",
      "titleSlug": "infinite-method-object",
      "topicTags": []
   },
   {
      "acRate": 41.082802547770704,
      "frontEndId": "2691",
      "status": null,
      "difficulty": "Hard",
      "title": "Immutability Helper",
      "titleSlug": "immutability-helper",
      "topicTags": []
   },
   {
      "acRate": 61.19402985074627,
      "frontEndId": "2692",
      "status": null,
      "difficulty": "Medium",
      "title": "Make Object Immutable",
      "titleSlug": "make-object-immutable",
      "topicTags": []
   },
   {
      "acRate": 82.04518430439953,
      "frontEndId": "2693",
      "status": null,
      "difficulty": "Medium",
      "title": "Call Function with Custom Context",
      "titleSlug": "call-function-with-custom-context",
      "topicTags": []
   },
   {
      "acRate": 82.10595735326446,
      "frontEndId": "2694",
      "status": null,
      "difficulty": "Medium",
      "title": "Event Emitter",
      "titleSlug": "event-emitter",
      "topicTags": []
   },
   {
      "acRate": 88.05671058564201,
      "frontEndId": "2695",
      "status": null,
      "difficulty": "Easy",
      "title": "Array Wrapper",
      "titleSlug": "array-wrapper",
      "topicTags": []
   },
   {
      "acRate": 68.2553477256118,
      "frontEndId": "2696",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum String Length After Removing Substrings",
      "titleSlug": "minimum-string-length-after-removing-substrings",
      "topicTags": ["String", "Stack", "Simulation"]
   },
   {
      "acRate": 80.4973442781265,
      "frontEndId": "2697",
      "status": null,
      "difficulty": "Easy",
      "title": "Lexicographically Smallest Palindrome",
      "titleSlug": "lexicographically-smallest-palindrome",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 60.92483015559939,
      "frontEndId": "2698",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Punishment Number of an Integer",
      "titleSlug": "find-the-punishment-number-of-an-integer",
      "topicTags": ["Math", "Backtracking"]
   },
   {
      "acRate": 21.94961402668901,
      "frontEndId": "2699",
      "status": null,
      "difficulty": "Hard",
      "title": "Modify Graph Edge Weights",
      "titleSlug": "modify-graph-edge-weights",
      "topicTags": ["Graph", "Heap (Priority Queue)", "Shortest Path"]
   },
   {
      "acRate": 82.2711814283602,
      "frontEndId": "2700",
      "status": null,
      "difficulty": "Medium",
      "title": "Differences Between Two Objects",
      "titleSlug": "differences-between-two-objects",
      "topicTags": []
   },
   {
      "acRate": 22.54725472547255,
      "frontEndId": "2701",
      "status": null,
      "difficulty": "Hard",
      "title": "Consecutive Transactions with Increasing Amounts",
      "titleSlug": "consecutive-transactions-with-increasing-amounts",
      "topicTags": ["Database"]
   },
   {
      "acRate": 52.69360269360269,
      "frontEndId": "2702",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Operations to Make Numbers Non-positive",
      "titleSlug": "minimum-operations-to-make-numbers-non-positive",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 92.50490750104099,
      "frontEndId": "2703",
      "status": null,
      "difficulty": "Easy",
      "title": "Return Length of Arguments Passed",
      "titleSlug": "return-length-of-arguments-passed",
      "topicTags": []
   },
   {
      "acRate": 61.19737042548953,
      "frontEndId": "2704",
      "status": null,
      "difficulty": "Easy",
      "title": "To Be Or Not To Be",
      "titleSlug": "to-be-or-not-to-be",
      "topicTags": []
   },
   {
      "acRate": 64.68995396696454,
      "frontEndId": "2705",
      "status": null,
      "difficulty": "Medium",
      "title": "Compact Object",
      "titleSlug": "compact-object",
      "topicTags": []
   },
   {
      "acRate": 63.181332383327394,
      "frontEndId": "2706",
      "status": null,
      "difficulty": "Easy",
      "title": "Buy Two Chocolates",
      "titleSlug": "buy-two-chocolates",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 52.853026740803266,
      "frontEndId": "2707",
      "status": null,
      "difficulty": "Medium",
      "title": "Extra Characters in a String",
      "titleSlug": "extra-characters-in-a-string",
      "topicTags": [
         "Array",
         "Hash Table",
         "String",
         "Dynamic Programming",
         "Trie"
      ]
   },
   {
      "acRate": 23.33119177642146,
      "frontEndId": "2708",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Strength of a Group",
      "titleSlug": "maximum-strength-of-a-group",
      "topicTags": ["Array", "Backtracking", "Greedy", "Sorting"]
   },
   {
      "acRate": 22.64788076385654,
      "frontEndId": "2709",
      "status": null,
      "difficulty": "Hard",
      "title": "Greatest Common Divisor Traversal",
      "titleSlug": "greatest-common-divisor-traversal",
      "topicTags": ["Array", "Math", "Union Find", "Number Theory"]
   },
   {
      "acRate": 78.23882377710717,
      "frontEndId": "2710",
      "status": null,
      "difficulty": "Easy",
      "title": "Remove Trailing Zeros From a String",
      "titleSlug": "remove-trailing-zeros-from-a-string",
      "topicTags": ["String"]
   },
   {
      "acRate": 70.53059273422562,
      "frontEndId": "2711",
      "status": null,
      "difficulty": "Medium",
      "title": "Difference of Number of Distinct Values on Diagonals",
      "titleSlug": "difference-of-number-of-distinct-values-on-diagonals",
      "topicTags": ["Array", "Hash Table", "Matrix"]
   },
   {
      "acRate": 53.61119520974199,
      "frontEndId": "2712",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Cost to Make All Characters Equal",
      "titleSlug": "minimum-cost-to-make-all-characters-equal",
      "topicTags": ["String", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 27.85640889654944,
      "frontEndId": "2713",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Strictly Increasing Cells in a Matrix",
      "titleSlug": "maximum-strictly-increasing-cells-in-a-matrix",
      "topicTags": [
         "Array",
         "Binary Search",
         "Dynamic Programming",
         "Memoization",
         "Sorting",
         "Matrix"
      ]
   },
   {
      "acRate": 60.270880361173816,
      "frontEndId": "2714",
      "status": null,
      "difficulty": "Hard",
      "title": "Find Shortest Path with K Hops",
      "titleSlug": "find-shortest-path-with-k-hops",
      "topicTags": ["Graph", "Heap (Priority Queue)", "Shortest Path"]
   },
   {
      "acRate": 87.30043541364296,
      "frontEndId": "2715",
      "status": null,
      "difficulty": "Easy",
      "title": "Timeout Cancellation",
      "titleSlug": "timeout-cancellation",
      "topicTags": []
   },
   {
      "acRate": 74.50728448020242,
      "frontEndId": "2716",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimize String Length",
      "titleSlug": "minimize-string-length",
      "topicTags": ["Hash Table", "String"]
   },
   {
      "acRate": 62.933171210774915,
      "frontEndId": "2717",
      "status": null,
      "difficulty": "Easy",
      "title": "Semi-Ordered Permutation",
      "titleSlug": "semi-ordered-permutation",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 29.88884973894103,
      "frontEndId": "2718",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum of Matrix After Queries",
      "titleSlug": "sum-of-matrix-after-queries",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 33.60626973915078,
      "frontEndId": "2719",
      "status": null,
      "difficulty": "Hard",
      "title": "Count of Integers",
      "titleSlug": "count-of-integers",
      "topicTags": ["Math", "String", "Dynamic Programming"]
   },
   {
      "acRate": 41.12961622013034,
      "frontEndId": "2720",
      "status": null,
      "difficulty": "Hard",
      "title": "Popularity Percentage",
      "titleSlug": "popularity-percentage",
      "topicTags": ["Database"]
   },
   {
      "acRate": 80.5367731197337,
      "frontEndId": "2721",
      "status": null,
      "difficulty": "Medium",
      "title": "Execute Asynchronous Functions in Parallel",
      "titleSlug": "execute-asynchronous-functions-in-parallel",
      "topicTags": []
   },
   {
      "acRate": 52.75372775372775,
      "frontEndId": "2722",
      "status": null,
      "difficulty": "Medium",
      "title": "Join Two Arrays by ID",
      "titleSlug": "join-two-arrays-by-id",
      "topicTags": []
   },
   {
      "acRate": 89.72329408660664,
      "frontEndId": "2723",
      "status": null,
      "difficulty": "Easy",
      "title": "Add Two Promises",
      "titleSlug": "add-two-promises",
      "topicTags": []
   },
   {
      "acRate": 81.27474267616786,
      "frontEndId": "2724",
      "status": null,
      "difficulty": "Easy",
      "title": "Sort By",
      "titleSlug": "sort-by",
      "topicTags": []
   },
   {
      "acRate": 85.29182879377431,
      "frontEndId": "2725",
      "status": null,
      "difficulty": "Easy",
      "title": "Interval Cancellation",
      "titleSlug": "interval-cancellation",
      "topicTags": []
   },
   {
      "acRate": 72.76991508289527,
      "frontEndId": "2726",
      "status": null,
      "difficulty": "Easy",
      "title": "Calculator with Method Chaining",
      "titleSlug": "calculator-with-method-chaining",
      "topicTags": []
   },
   {
      "acRate": 77.45156705811954,
      "frontEndId": "2727",
      "status": null,
      "difficulty": "Easy",
      "title": "Is Object Empty",
      "titleSlug": "is-object-empty",
      "topicTags": []
   },
   {
      "acRate": 83.93416927899686,
      "frontEndId": "2728",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Houses in a Circular Street",
      "titleSlug": "count-houses-in-a-circular-street",
      "topicTags": ["Array", "Interactive"]
   },
   {
      "acRate": 51.37001794519929,
      "frontEndId": "2729",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if The Number is Fascinating",
      "titleSlug": "check-if-the-number-is-fascinating",
      "topicTags": ["Hash Table", "Math"]
   },
   {
      "acRate": 34.985573326684,
      "frontEndId": "2730",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Longest Semi-Repetitive Substring",
      "titleSlug": "find-the-longest-semi-repetitive-substring",
      "topicTags": ["String", "Sliding Window"]
   },
   {
      "acRate": 28.331223094454295,
      "frontEndId": "2731",
      "status": null,
      "difficulty": "Medium",
      "title": "Movement of Robots",
      "titleSlug": "movement-of-robots",
      "topicTags": ["Array", "Brainteaser", "Sorting", "Prefix Sum"]
   },
   {
      "acRate": 44.28069639584606,
      "frontEndId": "2732",
      "status": null,
      "difficulty": "Hard",
      "title": "Find a Good Subset of the Matrix",
      "titleSlug": "find-a-good-subset-of-the-matrix",
      "topicTags": ["Array", "Greedy", "Bit Manipulation", "Matrix"]
   },
   {
      "acRate": 76.83466590519703,
      "frontEndId": "2733",
      "status": null,
      "difficulty": "Easy",
      "title": "Neither Minimum nor Maximum",
      "titleSlug": "neither-minimum-nor-maximum",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 29.817143000969025,
      "frontEndId": "2734",
      "status": null,
      "difficulty": "Medium",
      "title": "Lexicographically Smallest String After Substring Operation",
      "titleSlug": "lexicographically-smallest-string-after-substring-operation",
      "topicTags": ["String", "Greedy"]
   },
   {
      "acRate": 31.920453821148577,
      "frontEndId": "2735",
      "status": null,
      "difficulty": "Medium",
      "title": "Collecting Chocolates",
      "titleSlug": "collecting-chocolates",
      "topicTags": ["Array", "Enumeration"]
   },
   {
      "acRate": 24.788566183701565,
      "frontEndId": "2736",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Sum Queries",
      "titleSlug": "maximum-sum-queries",
      "topicTags": [
         "Array",
         "Binary Search",
         "Stack",
         "Binary Indexed Tree",
         "Segment Tree",
         "Sorting",
         "Monotonic Stack"
      ]
   },
   {
      "acRate": 54.49256625727214,
      "frontEndId": "2737",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Closest Marked Node",
      "titleSlug": "find-the-closest-marked-node",
      "topicTags": ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"]
   },
   {
      "acRate": 53.65630712979891,
      "frontEndId": "2738",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Occurrences in Text",
      "titleSlug": "count-occurrences-in-text",
      "topicTags": ["Database"]
   },
   {
      "acRate": 38.50872740914006,
      "frontEndId": "2739",
      "status": null,
      "difficulty": "Easy",
      "title": "Total Distance Traveled",
      "titleSlug": "total-distance-traveled",
      "topicTags": ["Math", "Simulation"]
   },
   {
      "acRate": 64.50871613936539,
      "frontEndId": "2740",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Value of the Partition",
      "titleSlug": "find-the-value-of-the-partition",
      "topicTags": ["Array", "Sorting"]
   },
   {
      "acRate": 26.461758728985775,
      "frontEndId": "2741",
      "status": null,
      "difficulty": "Medium",
      "title": "Special Permutations",
      "titleSlug": "special-permutations",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Bit Manipulation",
         "Bitmask"
      ]
   },
   {
      "acRate": 51.88276232777888,
      "frontEndId": "2742",
      "status": null,
      "difficulty": "Hard",
      "title": "Painting the Walls",
      "titleSlug": "painting-the-walls",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 72.89931869795609,
      "frontEndId": "2743",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Substrings Without Repeating Character",
      "titleSlug": "count-substrings-without-repeating-character",
      "topicTags": ["Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 80.29178506297977,
      "frontEndId": "2744",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Maximum Number of String Pairs",
      "titleSlug": "find-maximum-number-of-string-pairs",
      "topicTags": ["Array", "Hash Table", "String", "Simulation"]
   },
   {
      "acRate": 51.937957836090376,
      "frontEndId": "2745",
      "status": null,
      "difficulty": "Medium",
      "title": "Construct the Longest New String",
      "titleSlug": "construct-the-longest-new-string",
      "topicTags": ["Math", "Greedy", "Brainteaser"]
   },
   {
      "acRate": 24.990991712375386,
      "frontEndId": "2746",
      "status": null,
      "difficulty": "Medium",
      "title": "Decremental String Concatenation",
      "titleSlug": "decremental-string-concatenation",
      "topicTags": ["Array", "String", "Dynamic Programming"]
   },
   {
      "acRate": 31.275227986246072,
      "frontEndId": "2747",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Zero Request Servers",
      "titleSlug": "count-zero-request-servers",
      "topicTags": ["Array", "Hash Table", "Sliding Window", "Sorting"]
   },
   {
      "acRate": 49.01194087426137,
      "frontEndId": "2748",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Beautiful Pairs",
      "titleSlug": "number-of-beautiful-pairs",
      "topicTags": ["Array", "Math", "Number Theory"]
   },
   {
      "acRate": 29.028010107840696,
      "frontEndId": "2749",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Operations to Make the Integer Zero",
      "titleSlug": "minimum-operations-to-make-the-integer-zero",
      "topicTags": ["Bit Manipulation", "Brainteaser"]
   },
   {
      "acRate": 32.985859663833516,
      "frontEndId": "2750",
      "status": null,
      "difficulty": "Medium",
      "title": "Ways to Split Array Into Good Subarrays",
      "titleSlug": "ways-to-split-array-into-good-subarrays",
      "topicTags": ["Array", "Math", "Dynamic Programming"]
   },
   {
      "acRate": 39.76344409362001,
      "frontEndId": "2751",
      "status": null,
      "difficulty": "Hard",
      "title": "Robot Collisions",
      "titleSlug": "robot-collisions",
      "topicTags": ["Array", "Stack", "Sorting", "Simulation"]
   },
   {
      "acRate": 34.63005339435546,
      "frontEndId": "2752",
      "status": null,
      "difficulty": "Hard",
      "title": "Customers with Maximum Number of Transactions on Consecutive Days",
      "titleSlug": "customers-with-maximum-number-of-transactions-on-consecutive-days",
      "topicTags": ["Database"]
   },
   {
      "acRate": 75.95993322203672,
      "frontEndId": "2753",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Houses in a Circular Street II",
      "titleSlug": "count-houses-in-a-circular-street-ii",
      "topicTags": []
   },
   {
      "acRate": 91,
      "frontEndId": "2754",
      "status": null,
      "difficulty": "Medium",
      "title": "Bind Function to Context",
      "titleSlug": "bind-function-to-context",
      "topicTags": []
   },
   {
      "acRate": 57.14285714285714,
      "frontEndId": "2755",
      "status": null,
      "difficulty": "Medium",
      "title": "Deep Merge of Two Objects",
      "titleSlug": "deep-merge-of-two-objects",
      "topicTags": []
   },
   {
      "acRate": 71.64179104477611,
      "frontEndId": "2756",
      "status": null,
      "difficulty": "Hard",
      "title": "Query Batching",
      "titleSlug": "query-batching",
      "topicTags": []
   },
   {
      "acRate": 80.0925925925926,
      "frontEndId": "2757",
      "status": null,
      "difficulty": "Medium",
      "title": "Generate Circular Array Values",
      "titleSlug": "generate-circular-array-values",
      "topicTags": []
   },
   {
      "acRate": 85.51859099804305,
      "frontEndId": "2758",
      "status": null,
      "difficulty": "Easy",
      "title": "Next Day",
      "titleSlug": "next-day",
      "topicTags": []
   },
   {
      "acRate": 69.23076923076923,
      "frontEndId": "2759",
      "status": null,
      "difficulty": "Hard",
      "title": "Convert JSON String to Object",
      "titleSlug": "convert-json-string-to-object",
      "topicTags": []
   },
   {
      "acRate": 28.632660441173343,
      "frontEndId": "2760",
      "status": null,
      "difficulty": "Easy",
      "title": "Longest Even Odd Subarray With Threshold",
      "titleSlug": "longest-even-odd-subarray-with-threshold",
      "topicTags": ["Array", "Sliding Window"]
   },
   {
      "acRate": 32.867694065479675,
      "frontEndId": "2761",
      "status": null,
      "difficulty": "Medium",
      "title": "Prime Pairs With Target Sum",
      "titleSlug": "prime-pairs-with-target-sum",
      "topicTags": ["Array", "Math", "Enumeration", "Number Theory"]
   },
   {
      "acRate": 40.5050916496945,
      "frontEndId": "2762",
      "status": null,
      "difficulty": "Medium",
      "title": "Continuous Subarrays",
      "titleSlug": "continuous-subarrays",
      "topicTags": [
         "Array",
         "Queue",
         "Sliding Window",
         "Heap (Priority Queue)",
         "Ordered Set",
         "Monotonic Queue"
      ]
   },
   {
      "acRate": 46.11463112664773,
      "frontEndId": "2763",
      "status": null,
      "difficulty": "Hard",
      "title": "Sum of Imbalance Numbers of All Subarrays",
      "titleSlug": "sum-of-imbalance-numbers-of-all-subarrays",
      "topicTags": ["Array", "Hash Table", "Ordered Set"]
   },
   {
      "acRate": 67.42671009771986,
      "frontEndId": "2764",
      "status": null,
      "difficulty": "Medium",
      "title": "is Array a Preorder of Some ‌Binary Tree",
      "titleSlug": "is-array-a-preorder-of-some-binary-tree",
      "topicTags": ["Stack", "Tree", "Depth-First Search", "Binary Tree"]
   },
   {
      "acRate": 33.00826615657877,
      "frontEndId": "2765",
      "status": null,
      "difficulty": "Easy",
      "title": "Longest Alternating Subarray",
      "titleSlug": "longest-alternating-subarray",
      "topicTags": ["Array", "Enumeration"]
   },
   {
      "acRate": 50.857707391551656,
      "frontEndId": "2766",
      "status": null,
      "difficulty": "Medium",
      "title": "Relocate Marbles",
      "titleSlug": "relocate-marbles",
      "topicTags": ["Array", "Hash Table", "Sorting", "Simulation"]
   },
   {
      "acRate": 51.95815682545172,
      "frontEndId": "2767",
      "status": null,
      "difficulty": "Medium",
      "title": "Partition String Into Minimum Beautiful Substrings",
      "titleSlug": "partition-string-into-minimum-beautiful-substrings",
      "topicTags": [
         "Hash Table",
         "String",
         "Dynamic Programming",
         "Backtracking"
      ]
   },
   {
      "acRate": 35.32673267326732,
      "frontEndId": "2768",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Black Blocks",
      "titleSlug": "number-of-black-blocks",
      "topicTags": ["Array", "Hash Table", "Enumeration"]
   },
   {
      "acRate": 88.42607897153351,
      "frontEndId": "2769",
      "status": null,
      "difficulty": "Easy",
      "title": "Find the Maximum Achievable Number",
      "titleSlug": "find-the-maximum-achievable-number",
      "topicTags": ["Math"]
   },
   {
      "acRate": 28.828087681120962,
      "frontEndId": "2770",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Jumps to Reach the Last Index",
      "titleSlug": "maximum-number-of-jumps-to-reach-the-last-index",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 27.34815014670669,
      "frontEndId": "2771",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Non-decreasing Subarray From Two Arrays",
      "titleSlug": "longest-non-decreasing-subarray-from-two-arrays",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 32.026982560052645,
      "frontEndId": "2772",
      "status": null,
      "difficulty": "Medium",
      "title": "Apply Operations to Make All Array Elements Equal to Zero",
      "titleSlug": "apply-operations-to-make-all-array-elements-equal-to-zero",
      "topicTags": ["Array", "Prefix Sum"]
   },
   {
      "acRate": 72.94117647058823,
      "frontEndId": "2773",
      "status": null,
      "difficulty": "Medium",
      "title": "Height of Special Binary Tree",
      "titleSlug": "height-of-special-binary-tree",
      "topicTags": []
   },
   {
      "acRate": 80.05780346820809,
      "frontEndId": "2774",
      "status": null,
      "difficulty": "Easy",
      "title": "Array Upper Bound",
      "titleSlug": "array-upper-bound",
      "topicTags": []
   },
   {
      "acRate": 73.69942196531792,
      "frontEndId": "2775",
      "status": null,
      "difficulty": "Medium",
      "title": "Undefined to Null",
      "titleSlug": "undefined-to-null",
      "topicTags": []
   },
   {
      "acRate": 92.96296296296296,
      "frontEndId": "2776",
      "status": null,
      "difficulty": "Medium",
      "title": "Convert Callback Based Function to Promise Based Function",
      "titleSlug": "convert-callback-based-function-to-promise-based-function",
      "topicTags": []
   },
   {
      "acRate": 91.81818181818183,
      "frontEndId": "2777",
      "status": null,
      "difficulty": "Medium",
      "title": "Date Range Generator",
      "titleSlug": "date-range-generator",
      "topicTags": []
   },
   {
      "acRate": 78.75853689965577,
      "frontEndId": "2778",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of Squares of Special Elements ",
      "titleSlug": "sum-of-squares-of-special-elements",
      "topicTags": ["Array", "Simulation"]
   },
   {
      "acRate": 36.69389941739771,
      "frontEndId": "2779",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Beauty of an Array After Applying Operation",
      "titleSlug": "maximum-beauty-of-an-array-after-applying-operation",
      "topicTags": ["Array", "Binary Search", "Sliding Window", "Sorting"]
   },
   {
      "acRate": 61.90432326209776,
      "frontEndId": "2780",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Index of a Valid Split",
      "titleSlug": "minimum-index-of-a-valid-split",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 33.256857518809674,
      "frontEndId": "2781",
      "status": null,
      "difficulty": "Hard",
      "title": "Length of the Longest Valid Substring",
      "titleSlug": "length-of-the-longest-valid-substring",
      "topicTags": ["Array", "Hash Table", "String", "Sliding Window"]
   },
   {
      "acRate": 84.2911877394636,
      "frontEndId": "2782",
      "status": null,
      "difficulty": "Medium",
      "title": "Number of Unique Categories",
      "titleSlug": "number-of-unique-categories",
      "topicTags": ["Union Find", "Counting"]
   },
   {
      "acRate": 35.37181996086105,
      "frontEndId": "2783",
      "status": null,
      "difficulty": "Medium",
      "title": "Flight Occupancy and Waitlist Analysis",
      "titleSlug": "flight-occupancy-and-waitlist-analysis",
      "topicTags": ["Database"]
   },
   {
      "acRate": 50.114104924664815,
      "frontEndId": "2784",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if Array is Good",
      "titleSlug": "check-if-array-is-good",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 75.32411952772952,
      "frontEndId": "2785",
      "status": null,
      "difficulty": "Medium",
      "title": "Sort Vowels in a String",
      "titleSlug": "sort-vowels-in-a-string",
      "topicTags": ["String", "Sorting"]
   },
   {
      "acRate": 35.15925722262171,
      "frontEndId": "2786",
      "status": null,
      "difficulty": "Medium",
      "title": "Visit Array Positions to Maximize Score",
      "titleSlug": "visit-array-positions-to-maximize-score",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 33.06800292676437,
      "frontEndId": "2787",
      "status": null,
      "difficulty": "Medium",
      "title": "Ways to Express an Integer as Sum of Powers",
      "titleSlug": "ways-to-express-an-integer-as-sum-of-powers",
      "topicTags": ["Dynamic Programming"]
   },
   {
      "acRate": 71.54688648941523,
      "frontEndId": "2788",
      "status": null,
      "difficulty": "Easy",
      "title": "Split Strings by Separator",
      "titleSlug": "split-strings-by-separator",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 46.34422288219488,
      "frontEndId": "2789",
      "status": null,
      "difficulty": "Medium",
      "title": "Largest Element in an Array after Merge Operations",
      "titleSlug": "largest-element-in-an-array-after-merge-operations",
      "topicTags": ["Array", "Greedy", "Prefix Sum"]
   },
   {
      "acRate": 18.840362947452387,
      "frontEndId": "2790",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of Groups With Increasing Length",
      "titleSlug": "maximum-number-of-groups-with-increasing-length",
      "topicTags": ["Array", "Math", "Binary Search", "Greedy", "Sorting"]
   },
   {
      "acRate": 44.37341562878871,
      "frontEndId": "2791",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Paths That Can Form a Palindrome in a Tree",
      "titleSlug": "count-paths-that-can-form-a-palindrome-in-a-tree",
      "topicTags": [
         "Dynamic Programming",
         "Bit Manipulation",
         "Tree",
         "Depth-First Search",
         "Bitmask"
      ]
   },
   {
      "acRate": 59.24932975871313,
      "frontEndId": "2792",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Nodes That Are Great Enough",
      "titleSlug": "count-nodes-that-are-great-enough",
      "topicTags": []
   },
   {
      "acRate": 55.154639175257735,
      "frontEndId": "2793",
      "status": null,
      "difficulty": "Hard",
      "title": "Status of Flight Tickets",
      "titleSlug": "status-of-flight-tickets",
      "topicTags": []
   },
   {
      "acRate": 65.29160739687056,
      "frontEndId": "2794",
      "status": null,
      "difficulty": "Easy",
      "title": "Create Object from Two Arrays",
      "titleSlug": "create-object-from-two-arrays",
      "topicTags": []
   },
   {
      "acRate": 93.0327868852459,
      "frontEndId": "2795",
      "status": null,
      "difficulty": "Medium",
      "title": "Parallel Execution of Promises for Individual Results Retrieval",
      "titleSlug": "parallel-execution-of-promises-for-individual-results-retrieval",
      "topicTags": []
   },
   {
      "acRate": 92.19562955254943,
      "frontEndId": "2796",
      "status": null,
      "difficulty": "Easy",
      "title": "Repeat String",
      "titleSlug": "repeat-string",
      "topicTags": []
   },
   {
      "acRate": 92.48704663212435,
      "frontEndId": "2797",
      "status": null,
      "difficulty": "Easy",
      "title": "Partial Function with Placeholders",
      "titleSlug": "partial-function-with-placeholders",
      "topicTags": []
   },
   {
      "acRate": 87.65147788758216,
      "frontEndId": "2798",
      "status": null,
      "difficulty": "Easy",
      "title": "Number of Employees Who Met the Target",
      "titleSlug": "number-of-employees-who-met-the-target",
      "topicTags": ["Array", "Enumeration"]
   },
   {
      "acRate": 63.426612886371714,
      "frontEndId": "2799",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Complete Subarrays in an Array",
      "titleSlug": "count-complete-subarrays-in-an-array",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 29.7399641027886,
      "frontEndId": "2800",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest String That Contains Three Strings",
      "titleSlug": "shortest-string-that-contains-three-strings",
      "topicTags": ["String", "Greedy", "Enumeration"]
   },
   {
      "acRate": 26.26382473833637,
      "frontEndId": "2801",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Stepping Numbers in Range",
      "titleSlug": "count-stepping-numbers-in-range",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 70.63291139240506,
      "frontEndId": "2802",
      "status": null,
      "difficulty": "Medium",
      "title": "Find The K-th Lucky Number",
      "titleSlug": "find-the-k-th-lucky-number",
      "topicTags": []
   },
   {
      "acRate": 84.11405295315683,
      "frontEndId": "2803",
      "status": null,
      "difficulty": "Easy",
      "title": "Factorial Generator",
      "titleSlug": "factorial-generator",
      "topicTags": []
   },
   {
      "acRate": 91.76201372997713,
      "frontEndId": "2804",
      "status": null,
      "difficulty": "Easy",
      "title": "Array Prototype ForEach",
      "titleSlug": "array-prototype-foreach",
      "topicTags": []
   },
   {
      "acRate": 88.5,
      "frontEndId": "2805",
      "status": null,
      "difficulty": "Medium",
      "title": "Custom Interval",
      "titleSlug": "custom-interval",
      "topicTags": []
   },
   {
      "acRate": 51.61599090677953,
      "frontEndId": "2806",
      "status": null,
      "difficulty": "Easy",
      "title": "Account Balance After Rounded Purchase",
      "titleSlug": "account-balance-after-rounded-purchase",
      "topicTags": ["Math"]
   },
   {
      "acRate": 88.54127979376489,
      "frontEndId": "2807",
      "status": null,
      "difficulty": "Medium",
      "title": "Insert Greatest Common Divisors in Linked List",
      "titleSlug": "insert-greatest-common-divisors-in-linked-list",
      "topicTags": ["Array", "Linked List", "Math"]
   },
   {
      "acRate": 25.44699811489613,
      "frontEndId": "2808",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Seconds to Equalize a Circular Array",
      "titleSlug": "minimum-seconds-to-equalize-a-circular-array",
      "topicTags": ["Array", "Hash Table", "Greedy"]
   },
   {
      "acRate": 23.504712939160243,
      "frontEndId": "2809",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time to Make Array Sum At Most x",
      "titleSlug": "minimum-time-to-make-array-sum-at-most-x",
      "topicTags": ["Array", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 82.10413274673502,
      "frontEndId": "2810",
      "status": null,
      "difficulty": "Easy",
      "title": "Faulty Keyboard",
      "titleSlug": "faulty-keyboard",
      "topicTags": ["String", "Simulation"]
   },
   {
      "acRate": 33.158115263017564,
      "frontEndId": "2811",
      "status": null,
      "difficulty": "Medium",
      "title": "Check if it is Possible to Split Array",
      "titleSlug": "check-if-it-is-possible-to-split-array",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 30.269698361048448,
      "frontEndId": "2812",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Safest Path in a Grid",
      "titleSlug": "find-the-safest-path-in-a-grid",
      "topicTags": [
         "Array",
         "Binary Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 32.03099563716872,
      "frontEndId": "2813",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Elegance of a K-Length Subsequence",
      "titleSlug": "maximum-elegance-of-a-k-length-subsequence",
      "topicTags": [
         "Array",
         "Hash Table",
         "Greedy",
         "Sorting",
         "Heap (Priority Queue)"
      ]
   },
   {
      "acRate": 67.1484888304862,
      "frontEndId": "2814",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Time Takes to Reach Destination Without Drowning",
      "titleSlug": "minimum-time-takes-to-reach-destination-without-drowning",
      "topicTags": ["Array", "Breadth-First Search", "Matrix"]
   },
   {
      "acRate": 57.62984920737209,
      "frontEndId": "2815",
      "status": null,
      "difficulty": "Easy",
      "title": "Max Pair Sum in an Array",
      "titleSlug": "max-pair-sum-in-an-array",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 47.87119015905351,
      "frontEndId": "2816",
      "status": null,
      "difficulty": "Medium",
      "title": "Double a Number Represented as a Linked List",
      "titleSlug": "double-a-number-represented-as-a-linked-list",
      "topicTags": ["Linked List", "Math", "Stack"]
   },
   {
      "acRate": 31.906784451155506,
      "frontEndId": "2817",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Absolute Difference Between Elements With Constraint",
      "titleSlug": "minimum-absolute-difference-between-elements-with-constraint",
      "topicTags": ["Array", "Binary Search", "Ordered Set"]
   },
   {
      "acRate": 32.25163677768289,
      "frontEndId": "2818",
      "status": null,
      "difficulty": "Hard",
      "title": "Apply Operations to Maximize Score",
      "titleSlug": "apply-operations-to-maximize-score",
      "topicTags": [
         "Array",
         "Math",
         "Stack",
         "Greedy",
         "Monotonic Stack",
         "Number Theory"
      ]
   },
   {
      "acRate": 56.074766355140184,
      "frontEndId": "2819",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Relative Loss After Buying Chocolates",
      "titleSlug": "minimum-relative-loss-after-buying-chocolates",
      "topicTags": []
   },
   {
      "acRate": 67.94081381011098,
      "frontEndId": "2820",
      "status": null,
      "difficulty": "Medium",
      "title": "Election Results",
      "titleSlug": "election-results",
      "topicTags": []
   },
   {
      "acRate": 79.67213114754098,
      "frontEndId": "2821",
      "status": null,
      "difficulty": "Easy",
      "title": "Delay the Resolution of Each Promise",
      "titleSlug": "delay-the-resolution-of-each-promise",
      "topicTags": []
   },
   {
      "acRate": 68.88412017167383,
      "frontEndId": "2822",
      "status": null,
      "difficulty": "Easy",
      "title": "Inversion of Object",
      "titleSlug": "inversion-of-object",
      "topicTags": []
   },
   {
      "acRate": 55.5984555984556,
      "frontEndId": "2823",
      "status": null,
      "difficulty": "Medium",
      "title": "Deep Object Filter",
      "titleSlug": "deep-object-filter",
      "topicTags": []
   },
   {
      "acRate": 86.93347089082806,
      "frontEndId": "2824",
      "status": null,
      "difficulty": "Easy",
      "title": "Count Pairs Whose Sum is Less than Target",
      "titleSlug": "count-pairs-whose-sum-is-less-than-target",
      "topicTags": ["Array", "Two Pointers", "Sorting"]
   },
   {
      "acRate": 46.71411706332233,
      "frontEndId": "2825",
      "status": null,
      "difficulty": "Medium",
      "title": "Make String a Subsequence Using Cyclic Increments",
      "titleSlug": "make-string-a-subsequence-using-cyclic-increments",
      "topicTags": ["Two Pointers", "String"]
   },
   {
      "acRate": 40.99633221122444,
      "frontEndId": "2826",
      "status": null,
      "difficulty": "Medium",
      "title": "Sorting Three Groups",
      "titleSlug": "sorting-three-groups",
      "topicTags": ["Array", "Dynamic Programming"]
   },
   {
      "acRate": 16.74499833063667,
      "frontEndId": "2827",
      "status": null,
      "difficulty": "Hard",
      "title": "Number of Beautiful Integers in the Range",
      "titleSlug": "number-of-beautiful-integers-in-the-range",
      "topicTags": ["Math", "Dynamic Programming"]
   },
   {
      "acRate": 82.99971674062884,
      "frontEndId": "2828",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if a String Is an Acronym of Words",
      "titleSlug": "check-if-a-string-is-an-acronym-of-words",
      "topicTags": ["Array", "String"]
   },
   {
      "acRate": 60.746670862920205,
      "frontEndId": "2829",
      "status": null,
      "difficulty": "Medium",
      "title": "Determine the Minimum Sum of a k-avoiding Array",
      "titleSlug": "determine-the-minimum-sum-of-a-k-avoiding-array",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 35.02950717161058,
      "frontEndId": "2830",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximize the Profit as the Salesman",
      "titleSlug": "maximize-the-profit-as-the-salesman",
      "topicTags": ["Array", "Binary Search", "Dynamic Programming", "Sorting"]
   },
   {
      "acRate": 34.1886097829259,
      "frontEndId": "2831",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Longest Equal Subarray",
      "titleSlug": "find-the-longest-equal-subarray",
      "topicTags": ["Array", "Hash Table", "Binary Search", "Sliding Window"]
   },
   {
      "acRate": 74.22680412371135,
      "frontEndId": "2832",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximal Range That Each Element Is Maximum in It",
      "titleSlug": "maximal-range-that-each-element-is-maximum-in-it",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 63.068315073541726,
      "frontEndId": "2833",
      "status": null,
      "difficulty": "Easy",
      "title": "Furthest Point From Origin",
      "titleSlug": "furthest-point-from-origin",
      "topicTags": ["Array", "Counting"]
   },
   {
      "acRate": 41.75560688909032,
      "frontEndId": "2834",
      "status": null,
      "difficulty": "Medium",
      "title": "Find the Minimum Possible Sum of a Beautiful Array",
      "titleSlug": "find-the-minimum-possible-sum-of-a-beautiful-array",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 30.672076634430578,
      "frontEndId": "2835",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Operations to Form Subsequence With Target Sum",
      "titleSlug": "minimum-operations-to-form-subsequence-with-target-sum",
      "topicTags": ["Array", "Greedy", "Bit Manipulation"]
   },
   {
      "acRate": 29.145270829882392,
      "frontEndId": "2836",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximize Value of Function in a Ball Passing Game",
      "titleSlug": "maximize-value-of-function-in-a-ball-passing-game",
      "topicTags": ["Array", "Dynamic Programming", "Bit Manipulation"]
   },
   {
      "acRate": 71.75080558539206,
      "frontEndId": "2837",
      "status": null,
      "difficulty": "Easy",
      "title": "Total Traveled Distance",
      "titleSlug": "total-traveled-distance",
      "topicTags": ["Database"]
   },
   {
      "acRate": 74.90774907749078,
      "frontEndId": "2838",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Coins Heroes Can Collect",
      "titleSlug": "maximum-coins-heroes-can-collect",
      "topicTags": [
         "Array",
         "Two Pointers",
         "Binary Search",
         "Sorting",
         "Prefix Sum"
      ]
   },
   {
      "acRate": 46.25106922691207,
      "frontEndId": "2839",
      "status": null,
      "difficulty": "Easy",
      "title": "Check if Strings Can be Made Equal With Operations I",
      "titleSlug": "check-if-strings-can-be-made-equal-with-operations-i",
      "topicTags": ["String"]
   },
   {
      "acRate": 54.52723886754202,
      "frontEndId": "2840",
      "status": null,
      "difficulty": "Medium",
      "title": "Check if Strings Can be Made Equal With Operations II",
      "titleSlug": "check-if-strings-can-be-made-equal-with-operations-ii",
      "topicTags": ["Hash Table", "String", "Sorting"]
   },
   {
      "acRate": 36.96946008847514,
      "frontEndId": "2841",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Sum of Almost Unique Subarray",
      "titleSlug": "maximum-sum-of-almost-unique-subarray",
      "topicTags": ["Array", "Hash Table", "Sliding Window"]
   },
   {
      "acRate": 27.536231884057973,
      "frontEndId": "2842",
      "status": null,
      "difficulty": "Hard",
      "title": "Count K-Subsequences of a String With Maximum Beauty",
      "titleSlug": "count-k-subsequences-of-a-string-with-maximum-beauty",
      "topicTags": ["Hash Table", "Math", "String", "Greedy", "Combinatorics"]
   },
   {
      "acRate": 74.30980582096781,
      "frontEndId": "2843",
      "status": null,
      "difficulty": "Easy",
      "title": "  Count Symmetric Integers",
      "titleSlug": "count-symmetric-integers",
      "topicTags": ["Math", "Enumeration"]
   },
   {
      "acRate": 37.28805205047318,
      "frontEndId": "2844",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Operations to Make a Special Number",
      "titleSlug": "minimum-operations-to-make-a-special-number",
      "topicTags": ["Math", "String", "Greedy", "Enumeration"]
   },
   {
      "acRate": 33.9085697486403,
      "frontEndId": "2845",
      "status": null,
      "difficulty": "Medium",
      "title": "Count of Interesting Subarrays",
      "titleSlug": "count-of-interesting-subarrays",
      "topicTags": ["Array", "Hash Table", "Prefix Sum"]
   },
   {
      "acRate": 43.61025641025641,
      "frontEndId": "2846",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Edge Weight Equilibrium Queries in a Tree",
      "titleSlug": "minimum-edge-weight-equilibrium-queries-in-a-tree",
      "topicTags": ["Array", "Tree", "Graph", "Strongly Connected Component"]
   },
   {
      "acRate": 50.23832221163013,
      "frontEndId": "2847",
      "status": null,
      "difficulty": "Medium",
      "title": "Smallest Number With Given Digit Product",
      "titleSlug": "smallest-number-with-given-digit-product",
      "topicTags": ["Math", "Greedy"]
   },
   {
      "acRate": 74.51050754704286,
      "frontEndId": "2848",
      "status": null,
      "difficulty": "Easy",
      "title": "Points That Intersect With Cars",
      "titleSlug": "points-that-intersect-with-cars",
      "topicTags": ["Hash Table", "Math", "Prefix Sum"]
   },
   {
      "acRate": 23.207517057016318,
      "frontEndId": "2849",
      "status": null,
      "difficulty": "Medium",
      "title": "Determine if a Cell Is Reachable at a Given Time",
      "titleSlug": "determine-if-a-cell-is-reachable-at-a-given-time",
      "topicTags": ["Math"]
   },
   {
      "acRate": 38.81422667664573,
      "frontEndId": "2850",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Moves to Spread Stones Over Grid",
      "titleSlug": "minimum-moves-to-spread-stones-over-grid",
      "topicTags": [
         "Array",
         "Dynamic Programming",
         "Breadth-First Search",
         "Matrix"
      ]
   },
   {
      "acRate": 26.987114521499926,
      "frontEndId": "2851",
      "status": null,
      "difficulty": "Hard",
      "title": "String Transformation",
      "titleSlug": "string-transformation",
      "topicTags": ["Math", "String", "Dynamic Programming", "String Matching"]
   },
   {
      "acRate": 69.20863309352518,
      "frontEndId": "2852",
      "status": null,
      "difficulty": "Medium",
      "title": "Sum of Remoteness of All Cells",
      "titleSlug": "sum-of-remoteness-of-all-cells",
      "topicTags": [
         "Array",
         "Depth-First Search",
         "Breadth-First Search",
         "Union Find",
         "Matrix"
      ]
   },
   {
      "acRate": 75.95473833097596,
      "frontEndId": "2853",
      "status": null,
      "difficulty": "Easy",
      "title": "Highest Salaries Difference",
      "titleSlug": "highest-salaries-difference",
      "topicTags": ["Database"]
   },
   {
      "acRate": 69.90990990990991,
      "frontEndId": "2854",
      "status": null,
      "difficulty": "Medium",
      "title": "Rolling Average Steps",
      "titleSlug": "rolling-average-steps",
      "topicTags": ["Database"]
   },
   {
      "acRate": 57.176285392158945,
      "frontEndId": "2855",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Right Shifts to Sort the Array",
      "titleSlug": "minimum-right-shifts-to-sort-the-array",
      "topicTags": ["Array"]
   },
   {
      "acRate": 20.105448587654138,
      "frontEndId": "2856",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Array Length After Pair Removals",
      "titleSlug": "minimum-array-length-after-pair-removals",
      "topicTags": [
         "Array",
         "Hash Table",
         "Two Pointers",
         "Binary Search",
         "Greedy",
         "Counting"
      ]
   },
   {
      "acRate": 31.568483063328422,
      "frontEndId": "2857",
      "status": null,
      "difficulty": "Medium",
      "title": "Count Pairs of Points With Distance k",
      "titleSlug": "count-pairs-of-points-with-distance-k",
      "topicTags": ["Array", "Hash Table", "Bit Manipulation"]
   },
   {
      "acRate": 59.17995444191344,
      "frontEndId": "2858",
      "status": null,
      "difficulty": "Hard",
      "title": "Minimum Edge Reversals So Every Node Is Reachable",
      "titleSlug": "minimum-edge-reversals-so-every-node-is-reachable",
      "topicTags": [
         "Dynamic Programming",
         "Depth-First Search",
         "Breadth-First Search",
         "Graph"
      ]
   },
   {
      "acRate": 86.39423906878098,
      "frontEndId": "2859",
      "status": null,
      "difficulty": "Easy",
      "title": "Sum of Values at Indices With K Set Bits",
      "titleSlug": "sum-of-values-at-indices-with-k-set-bits",
      "topicTags": ["Array", "Bit Manipulation"]
   },
   {
      "acRate": 50.0156851561386,
      "frontEndId": "2860",
      "status": null,
      "difficulty": "Medium",
      "title": "Happy Students",
      "titleSlug": "happy-students",
      "topicTags": ["Array", "Sorting", "Enumeration"]
   },
   {
      "acRate": 36.76666325381387,
      "frontEndId": "2861",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Number of Alloys",
      "titleSlug": "maximum-number-of-alloys",
      "topicTags": ["Array", "Binary Search"]
   },
   {
      "acRate": 42.86022588303,
      "frontEndId": "2862",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Element-Sum of a Complete Subset of Indices",
      "titleSlug": "maximum-element-sum-of-a-complete-subset-of-indices",
      "topicTags": ["Array", "Math", "Number Theory"]
   },
   {
      "acRate": 71.60194174757282,
      "frontEndId": "2863",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Length of Semi-Decreasing Subarrays",
      "titleSlug": "maximum-length-of-semi-decreasing-subarrays",
      "topicTags": ["Array", "Hash Table", "Sorting"]
   },
   {
      "acRate": 71.98966911943863,
      "frontEndId": "2864",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Odd Binary Number",
      "titleSlug": "maximum-odd-binary-number",
      "topicTags": ["Math", "String", "Greedy"]
   },
   {
      "acRate": 42.64327907291338,
      "frontEndId": "2865",
      "status": null,
      "difficulty": "Medium",
      "title": "Beautiful Towers I",
      "titleSlug": "beautiful-towers-i",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 33.113756436835416,
      "frontEndId": "2866",
      "status": null,
      "difficulty": "Medium",
      "title": "Beautiful Towers II",
      "titleSlug": "beautiful-towers-ii",
      "topicTags": ["Array", "Stack", "Monotonic Stack"]
   },
   {
      "acRate": 33.59893758300132,
      "frontEndId": "2867",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Valid Paths in a Tree",
      "titleSlug": "count-valid-paths-in-a-tree",
      "topicTags": [
         "Math",
         "Dynamic Programming",
         "Tree",
         "Depth-First Search",
         "Number Theory"
      ]
   },
   {
      "acRate": 66.00496277915633,
      "frontEndId": "2868",
      "status": null,
      "difficulty": "Hard",
      "title": "The Wording Game",
      "titleSlug": "the-wording-game",
      "topicTags": ["Array", "Math", "Two Pointers", "String", "Game Theory"]
   },
   {
      "acRate": 57.892238846449395,
      "frontEndId": "2869",
      "status": null,
      "difficulty": "Easy",
      "title": "Minimum Operations to Collect Elements",
      "titleSlug": "minimum-operations-to-collect-elements",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 48.05616237884154,
      "frontEndId": "2870",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Number of Operations to Make Array Empty",
      "titleSlug": "minimum-number-of-operations-to-make-array-empty",
      "topicTags": ["Array", "Hash Table", "Greedy", "Counting"]
   },
   {
      "acRate": 42.968195600283856,
      "frontEndId": "2871",
      "status": null,
      "difficulty": "Medium",
      "title": "Split Array Into Maximum Number of Subarrays",
      "titleSlug": "split-array-into-maximum-number-of-subarrays",
      "topicTags": ["Array", "Greedy", "Bit Manipulation"]
   },
   {
      "acRate": 60.72479368496592,
      "frontEndId": "2872",
      "status": null,
      "difficulty": "Hard",
      "title": "Maximum Number of K-Divisible Components",
      "titleSlug": "maximum-number-of-k-divisible-components",
      "topicTags": ["Dynamic Programming", "Tree", "Depth-First Search"]
   },
   {
      "acRate": 43.943233654333504,
      "frontEndId": "2873",
      "status": null,
      "difficulty": "Easy",
      "title": "Maximum Value of an Ordered Triplet I",
      "titleSlug": "maximum-value-of-an-ordered-triplet-i",
      "topicTags": ["Array"]
   },
   {
      "acRate": 40.68659238735287,
      "frontEndId": "2874",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Value of an Ordered Triplet II",
      "titleSlug": "maximum-value-of-an-ordered-triplet-ii",
      "topicTags": ["Array"]
   },
   {
      "acRate": 30.044962190884938,
      "frontEndId": "2875",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Size Subarray in Infinite Array",
      "titleSlug": "minimum-size-subarray-in-infinite-array",
      "topicTags": ["Array", "Hash Table", "Sliding Window", "Prefix Sum"]
   },
   {
      "acRate": 31.320254733512844,
      "frontEndId": "2876",
      "status": null,
      "difficulty": "Hard",
      "title": "Count Visited Nodes in a Directed Graph",
      "titleSlug": "count-visited-nodes-in-a-directed-graph",
      "topicTags": ["Dynamic Programming", "Graph", "Memoization"]
   },
   {
      "acRate": 81.05152786099461,
      "frontEndId": "2877",
      "status": null,
      "difficulty": "Easy",
      "title": "Create a DataFrame from List",
      "titleSlug": "create-a-dataframe-from-list",
      "topicTags": []
   },
   {
      "acRate": 85.07923441037251,
      "frontEndId": "2878",
      "status": null,
      "difficulty": "Easy",
      "title": "Get the Size of a DataFrame",
      "titleSlug": "get-the-size-of-a-dataframe",
      "topicTags": []
   },
   {
      "acRate": 92.4735397883183,
      "frontEndId": "2879",
      "status": null,
      "difficulty": "Easy",
      "title": "Display the First Three Rows",
      "titleSlug": "display-the-first-three-rows",
      "topicTags": []
   },
   {
      "acRate": 78.6955540510043,
      "frontEndId": "2880",
      "status": null,
      "difficulty": "Easy",
      "title": "Select Data",
      "titleSlug": "select-data",
      "topicTags": []
   },
   {
      "acRate": 90,
      "frontEndId": "2881",
      "status": null,
      "difficulty": "Easy",
      "title": "Create a New Column",
      "titleSlug": "create-a-new-column",
      "topicTags": []
   },
   {
      "acRate": 82.91157236280921,
      "frontEndId": "2882",
      "status": null,
      "difficulty": "Easy",
      "title": "Drop Duplicate Rows",
      "titleSlug": "drop-duplicate-rows",
      "topicTags": []
   },
   {
      "acRate": 80.75221238938053,
      "frontEndId": "2883",
      "status": null,
      "difficulty": "Easy",
      "title": "Drop Missing Data",
      "titleSlug": "drop-missing-data",
      "topicTags": []
   },
   {
      "acRate": 90.34913426057336,
      "frontEndId": "2884",
      "status": null,
      "difficulty": "Easy",
      "title": "Modify Columns",
      "titleSlug": "modify-columns",
      "topicTags": []
   },
   {
      "acRate": 85.73224387177876,
      "frontEndId": "2885",
      "status": null,
      "difficulty": "Easy",
      "title": "Rename Columns",
      "titleSlug": "rename-columns",
      "topicTags": []
   },
   {
      "acRate": 85.30006743088335,
      "frontEndId": "2886",
      "status": null,
      "difficulty": "Easy",
      "title": "Change Data Type",
      "titleSlug": "change-data-type",
      "topicTags": []
   },
   {
      "acRate": 83.79458794587946,
      "frontEndId": "2887",
      "status": null,
      "difficulty": "Easy",
      "title": "Fill Missing Data",
      "titleSlug": "fill-missing-data",
      "topicTags": []
   },
   {
      "acRate": 87.81424581005587,
      "frontEndId": "2888",
      "status": null,
      "difficulty": "Easy",
      "title": "Reshape Data: Concatenate",
      "titleSlug": "reshape-data-concatenate",
      "topicTags": []
   },
   {
      "acRate": 81.18126272912424,
      "frontEndId": "2889",
      "status": null,
      "difficulty": "Easy",
      "title": "Reshape Data: Pivot",
      "titleSlug": "reshape-data-pivot",
      "topicTags": []
   },
   {
      "acRate": 83.45446772124839,
      "frontEndId": "2890",
      "status": null,
      "difficulty": "Easy",
      "title": "Reshape Data: Melt",
      "titleSlug": "reshape-data-melt",
      "topicTags": []
   },
   {
      "acRate": 72.20251531763947,
      "frontEndId": "2891",
      "status": null,
      "difficulty": "Easy",
      "title": "Method Chaining",
      "titleSlug": "method-chaining",
      "topicTags": []
   },
   {
      "acRate": 44.00977995110024,
      "frontEndId": "2892",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimizing Array After Replacing Pairs With Their Product",
      "titleSlug": "minimizing-array-after-replacing-pairs-with-their-product",
      "topicTags": ["Array", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 74.40273037542661,
      "frontEndId": "2893",
      "status": null,
      "difficulty": "Medium",
      "title": "Calculate Orders Within Each Interval",
      "titleSlug": "calculate-orders-within-each-interval",
      "topicTags": ["Database"]
   },
   {
      "acRate": 87.31339360807401,
      "frontEndId": "2894",
      "status": null,
      "difficulty": "Easy",
      "title": "Divisible and Non-divisible Sums Difference",
      "titleSlug": "divisible-and-non-divisible-sums-difference",
      "topicTags": ["Math"]
   },
   {
      "acRate": 67.33855185909981,
      "frontEndId": "2895",
      "status": null,
      "difficulty": "Medium",
      "title": "Minimum Processing Time",
      "titleSlug": "minimum-processing-time",
      "topicTags": ["Array", "Greedy", "Sorting"]
   },
   {
      "acRate": 24.206496889786806,
      "frontEndId": "2896",
      "status": null,
      "difficulty": "Medium",
      "title": "Apply Operations to Make Two Strings Equal",
      "titleSlug": "apply-operations-to-make-two-strings-equal",
      "topicTags": ["String", "Dynamic Programming"]
   },
   {
      "acRate": 46.40721404841006,
      "frontEndId": "2897",
      "status": null,
      "difficulty": "Hard",
      "title": "Apply Operations on Array to Maximize Sum of Squares",
      "titleSlug": "apply-operations-on-array-to-maximize-sum-of-squares",
      "topicTags": ["Array", "Hash Table", "Greedy", "Bit Manipulation"]
   },
   {
      "acRate": 72.61538461538461,
      "frontEndId": "2898",
      "status": null,
      "difficulty": "Medium",
      "title": "Maximum Linear Stock Score",
      "titleSlug": "maximum-linear-stock-score",
      "topicTags": ["Array", "Hash Table"]
   },
   {
      "acRate": 63.05404102221728,
      "frontEndId": "2899",
      "status": null,
      "difficulty": "Easy",
      "title": "Last Visited Integers",
      "titleSlug": "last-visited-integers",
      "topicTags": ["Array", "String", "Simulation"]
   },
   {
      "acRate": 63.57283717739861,
      "frontEndId": "2900",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Unequal Adjacent Groups Subsequence I",
      "titleSlug": "longest-unequal-adjacent-groups-subsequence-i",
      "topicTags": ["Array", "String", "Dynamic Programming", "Greedy"]
   },
   {
      "acRate": 23.681517363716996,
      "frontEndId": "2901",
      "status": null,
      "difficulty": "Medium",
      "title": "Longest Unequal Adjacent Groups Subsequence II",
      "titleSlug": "longest-unequal-adjacent-groups-subsequence-ii",
      "topicTags": ["Array", "String", "Dynamic Programming"]
   },
   {
      "acRate": 14.357420210247183,
      "frontEndId": "2902",
      "status": null,
      "difficulty": "Hard",
      "title": "Count of Sub-Multisets With Bounded Sum",
      "titleSlug": "count-of-sub-multisets-with-bounded-sum",
      "topicTags": [
         "Array",
         "Hash Table",
         "Dynamic Programming",
         "Sliding Window"
      ]
   },
   {
      "acRate": 63.15298507462687,
      "frontEndId": "2903",
      "status": null,
      "difficulty": "Easy",
      "title": "Find Indices With Index and Value Difference I",
      "titleSlug": "find-indices-with-index-and-value-difference-i",
      "topicTags": ["Array"]
   },
   {
      "acRate": 35.777288986647115,
      "frontEndId": "2904",
      "status": null,
      "difficulty": "Medium",
      "title": "Shortest and Lexicographically Smallest Beautiful String",
      "titleSlug": "shortest-and-lexicographically-smallest-beautiful-string",
      "topicTags": ["String", "Sliding Window"]
   },
   {
      "acRate": 29.68583599574015,
      "frontEndId": "2905",
      "status": null,
      "difficulty": "Medium",
      "title": "Find Indices With Index and Value Difference II",
      "titleSlug": "find-indices-with-index-and-value-difference-ii",
      "topicTags": ["Array"]
   },
   {
      "acRate": 28.093255620316405,
      "frontEndId": "2906",
      "status": null,
      "difficulty": "Medium",
      "title": "Construct Product Matrix",
      "titleSlug": "construct-product-matrix",
      "topicTags": ["Array", "Matrix", "Prefix Sum"]
   }
]
